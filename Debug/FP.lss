
FP.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00002f1c  00002fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800068  00800068  00002fb8  2**0
                  ALLOC
  3 .stab         000027b4  00000000  00000000  00002fb8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f82  00000000  00000000  0000576c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000066ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000682e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000699e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000085e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000094d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a280  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a3e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a66d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ae3b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	a9 36       	cpi	r26, 0x69	; 105
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ec e1       	ldi	r30, 0x1C	; 28
      78:	ff e2       	ldi	r31, 0x2F	; 47
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 c3 0c 	call	0x1986	; 0x1986 <main>
      8a:	0c 94 8c 17 	jmp	0x2f18	; 0x2f18 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5f 17 	jmp	0x2ebe	; 0x2ebe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5f 17 	jmp	0x2ebe	; 0x2ebe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4f 17 	jmp	0x2e9e	; 0x2e9e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 6b 17 	jmp	0x2ed6	; 0x2ed6 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 53 17 	jmp	0x2ea6	; 0x2ea6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6f 17 	jmp	0x2ede	; 0x2ede <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <ADC_voidInit>:
#include "STD_TYPES.h"
#include "ADC_PRIVATE.h"
#include "ADC_CONFIG.h"

void ADC_voidInit(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* select Reference volt*/
#if ADC_REFERENCE_VOLT==ADC_AVCC
	SET_BIT(ADMUX,6);
     b4e:	a7 e2       	ldi	r26, 0x27	; 39
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e7 e2       	ldi	r30, 0x27	; 39
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	80 64       	ori	r24, 0x40	; 64
     b5a:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
     b5c:	a7 e2       	ldi	r26, 0x27	; 39
     b5e:	b0 e0       	ldi	r27, 0x00	; 0
     b60:	e7 e2       	ldi	r30, 0x27	; 39
     b62:	f0 e0       	ldi	r31, 0x00	; 0
     b64:	80 81       	ld	r24, Z
     b66:	8f 77       	andi	r24, 0x7F	; 127
     b68:	8c 93       	st	X, r24
	#error "Invalid ADC_REFERENCE_VOLT Options"
#endif

	/* select Adjust Option*/
#if ADC_LEFT_RIGHT_ADJUST==ADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
     b6a:	a7 e2       	ldi	r26, 0x27	; 39
     b6c:	b0 e0       	ldi	r27, 0x00	; 0
     b6e:	e7 e2       	ldi	r30, 0x27	; 39
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	80 81       	ld	r24, Z
     b74:	80 62       	ori	r24, 0x20	; 32
     b76:	8c 93       	st	X, r24
#else
	#error "Invalid ADC_LEFT_RIGHT Options"
#endif

	/* select 128 prescaler*/
	ADCSRA&=0xF8;
     b78:	a6 e2       	ldi	r26, 0x26	; 38
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	e6 e2       	ldi	r30, 0x26	; 38
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	88 7f       	andi	r24, 0xF8	; 248
     b84:	8c 93       	st	X, r24
	ADCSRA|=0x07;
     b86:	a6 e2       	ldi	r26, 0x26	; 38
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e6 e2       	ldi	r30, 0x26	; 38
     b8c:	f0 e0       	ldi	r31, 0x00	; 0
     b8e:	80 81       	ld	r24, Z
     b90:	87 60       	ori	r24, 0x07	; 7
     b92:	8c 93       	st	X, r24

	/* enable ADC*/
	SET_BIT(ADCSRA,7);
     b94:	a6 e2       	ldi	r26, 0x26	; 38
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e6 e2       	ldi	r30, 0x26	; 38
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	80 68       	ori	r24, 0x80	; 128
     ba0:	8c 93       	st	X, r24
}
     ba2:	cf 91       	pop	r28
     ba4:	df 91       	pop	r29
     ba6:	08 95       	ret

00000ba8 <ADC_voidInit_Interrupt>:
void ADC_voidInit_Interrupt()
{
     ba8:	df 93       	push	r29
     baa:	cf 93       	push	r28
     bac:	cd b7       	in	r28, 0x3d	; 61
     bae:	de b7       	in	r29, 0x3e	; 62
	/* select Reference volt*/
#if ADC_REFERENCE_VOLT==ADC_AVCC
	SET_BIT(ADMUX,6);
     bb0:	a7 e2       	ldi	r26, 0x27	; 39
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e7 e2       	ldi	r30, 0x27	; 39
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	80 64       	ori	r24, 0x40	; 64
     bbc:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,7);
     bbe:	a7 e2       	ldi	r26, 0x27	; 39
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e7 e2       	ldi	r30, 0x27	; 39
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	8f 77       	andi	r24, 0x7F	; 127
     bca:	8c 93       	st	X, r24
	#error "Invalid ADC_REFERENCE_VOLT Options"
#endif

	/* select Adjust Option*/
#if ADC_LEFT_RIGHT_ADJUST==ADC_LEFT_ADJUST
	SET_BIT(ADMUX,5);
     bcc:	a7 e2       	ldi	r26, 0x27	; 39
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	e7 e2       	ldi	r30, 0x27	; 39
     bd2:	f0 e0       	ldi	r31, 0x00	; 0
     bd4:	80 81       	ld	r24, Z
     bd6:	80 62       	ori	r24, 0x20	; 32
     bd8:	8c 93       	st	X, r24
#else
	#error "Invalid ADC_LEFT_RIGHT Options"
#endif

	/* select 128 prescaler*/
	ADCSRA&=0xF8;
     bda:	a6 e2       	ldi	r26, 0x26	; 38
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	e6 e2       	ldi	r30, 0x26	; 38
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	80 81       	ld	r24, Z
     be4:	88 7f       	andi	r24, 0xF8	; 248
     be6:	8c 93       	st	X, r24
	ADCSRA|=0x07;
     be8:	a6 e2       	ldi	r26, 0x26	; 38
     bea:	b0 e0       	ldi	r27, 0x00	; 0
     bec:	e6 e2       	ldi	r30, 0x26	; 38
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	80 81       	ld	r24, Z
     bf2:	87 60       	ori	r24, 0x07	; 7
     bf4:	8c 93       	st	X, r24

	/* enable ADC*/
	SET_BIT(ADCSRA,7);
     bf6:	a6 e2       	ldi	r26, 0x26	; 38
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	e6 e2       	ldi	r30, 0x26	; 38
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	80 81       	ld	r24, Z
     c00:	80 68       	ori	r24, 0x80	; 128
     c02:	8c 93       	st	X, r24

	/*ADC Interrupt enable*/
	SET_BIT(ADCSRA,3);
     c04:	a6 e2       	ldi	r26, 0x26	; 38
     c06:	b0 e0       	ldi	r27, 0x00	; 0
     c08:	e6 e2       	ldi	r30, 0x26	; 38
     c0a:	f0 e0       	ldi	r31, 0x00	; 0
     c0c:	80 81       	ld	r24, Z
     c0e:	88 60       	ori	r24, 0x08	; 8
     c10:	8c 93       	st	X, r24
}
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	08 95       	ret

00000c18 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 Copy_u8Channel)
{
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	0f 92       	push	r0
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0xE0;
     c24:	a7 e2       	ldi	r26, 0x27	; 39
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	e7 e2       	ldi	r30, 0x27	; 39
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	80 7e       	andi	r24, 0xE0	; 224
     c30:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
     c32:	a7 e2       	ldi	r26, 0x27	; 39
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	e7 e2       	ldi	r30, 0x27	; 39
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	90 81       	ld	r25, Z
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	89 2b       	or	r24, r25
     c40:	8c 93       	st	X, r24

	/* start conversion */
	SET_BIT(ADCSRA,6);
     c42:	a6 e2       	ldi	r26, 0x26	; 38
     c44:	b0 e0       	ldi	r27, 0x00	; 0
     c46:	e6 e2       	ldi	r30, 0x26	; 38
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	80 64       	ori	r24, 0x40	; 64
     c4e:	8c 93       	st	X, r24

	/*wait till ADC_flag be high*/
	while(GET_BIT(ADCSRA,4)==0);
     c50:	e6 e2       	ldi	r30, 0x26	; 38
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	82 95       	swap	r24
     c58:	8f 70       	andi	r24, 0x0F	; 15
     c5a:	88 2f       	mov	r24, r24
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	81 70       	andi	r24, 0x01	; 1
     c60:	90 70       	andi	r25, 0x00	; 0
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	a9 f3       	breq	.-22     	; 0xc50 <ADC_voidStartConversion+0x38>
}
     c66:	0f 90       	pop	r0
     c68:	cf 91       	pop	r28
     c6a:	df 91       	pop	r29
     c6c:	08 95       	ret

00000c6e <ADC_voidStartConversion_Interrupt>:
void ADC_voidStartConversion_Interrupt(u8 Copy_u8Channel)
{
     c6e:	df 93       	push	r29
     c70:	cf 93       	push	r28
     c72:	0f 92       	push	r0
     c74:	cd b7       	in	r28, 0x3d	; 61
     c76:	de b7       	in	r29, 0x3e	; 62
     c78:	89 83       	std	Y+1, r24	; 0x01
	ADMUX&=0xE0;
     c7a:	a7 e2       	ldi	r26, 0x27	; 39
     c7c:	b0 e0       	ldi	r27, 0x00	; 0
     c7e:	e7 e2       	ldi	r30, 0x27	; 39
     c80:	f0 e0       	ldi	r31, 0x00	; 0
     c82:	80 81       	ld	r24, Z
     c84:	80 7e       	andi	r24, 0xE0	; 224
     c86:	8c 93       	st	X, r24
	ADMUX|=Copy_u8Channel;
     c88:	a7 e2       	ldi	r26, 0x27	; 39
     c8a:	b0 e0       	ldi	r27, 0x00	; 0
     c8c:	e7 e2       	ldi	r30, 0x27	; 39
     c8e:	f0 e0       	ldi	r31, 0x00	; 0
     c90:	90 81       	ld	r25, Z
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	89 2b       	or	r24, r25
     c96:	8c 93       	st	X, r24

	/* start conversion */
	SET_BIT(ADCSRA,6);
     c98:	a6 e2       	ldi	r26, 0x26	; 38
     c9a:	b0 e0       	ldi	r27, 0x00	; 0
     c9c:	e6 e2       	ldi	r30, 0x26	; 38
     c9e:	f0 e0       	ldi	r31, 0x00	; 0
     ca0:	80 81       	ld	r24, Z
     ca2:	80 64       	ori	r24, 0x40	; 64
     ca4:	8c 93       	st	X, r24
}
     ca6:	0f 90       	pop	r0
     ca8:	cf 91       	pop	r28
     caa:	df 91       	pop	r29
     cac:	08 95       	ret

00000cae <ADC_u16ReadDigitalValue>:
u16 ADC_u16ReadDigitalValue(void)
{
     cae:	df 93       	push	r29
     cb0:	cf 93       	push	r28
     cb2:	cd b7       	in	r28, 0x3d	; 61
     cb4:	de b7       	in	r29, 0x3e	; 62
	return ADC;
     cb6:	e4 e2       	ldi	r30, 0x24	; 36
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	80 81       	ld	r24, Z
     cbc:	91 81       	ldd	r25, Z+1	; 0x01
}
     cbe:	cf 91       	pop	r28
     cc0:	df 91       	pop	r29
     cc2:	08 95       	ret

00000cc4 <DIO_u8SetPinDirection>:
#include "BIT_MATH.h"
#include "DIO_INTERFACE.h"
#include "DIO_PRIVATE.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8PinNumber,u8 Copy_u8PortName,u8 Copy_u8Direction)
{
     cc4:	df 93       	push	r29
     cc6:	cf 93       	push	r28
     cc8:	00 d0       	rcall	.+0      	; 0xcca <DIO_u8SetPinDirection+0x6>
     cca:	00 d0       	rcall	.+0      	; 0xccc <DIO_u8SetPinDirection+0x8>
     ccc:	00 d0       	rcall	.+0      	; 0xcce <DIO_u8SetPinDirection+0xa>
     cce:	cd b7       	in	r28, 0x3d	; 61
     cd0:	de b7       	in	r29, 0x3e	; 62
     cd2:	8a 83       	std	Y+2, r24	; 0x02
     cd4:	6b 83       	std	Y+3, r22	; 0x03
     cd6:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State = OK;
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8PinNumber<8)
     cdc:	8a 81       	ldd	r24, Y+2	; 0x02
     cde:	88 30       	cpi	r24, 0x08	; 8
     ce0:	08 f0       	brcs	.+2      	; 0xce4 <DIO_u8SetPinDirection+0x20>
     ce2:	e8 c0       	rjmp	.+464    	; 0xeb4 <DIO_u8SetPinDirection+0x1f0>
	{
	switch(Copy_u8PortName)
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	28 2f       	mov	r18, r24
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	3e 83       	std	Y+6, r19	; 0x06
     cec:	2d 83       	std	Y+5, r18	; 0x05
     cee:	8d 81       	ldd	r24, Y+5	; 0x05
     cf0:	9e 81       	ldd	r25, Y+6	; 0x06
     cf2:	81 30       	cpi	r24, 0x01	; 1
     cf4:	91 05       	cpc	r25, r1
     cf6:	09 f4       	brne	.+2      	; 0xcfa <DIO_u8SetPinDirection+0x36>
     cf8:	48 c0       	rjmp	.+144    	; 0xd8a <DIO_u8SetPinDirection+0xc6>
     cfa:	2d 81       	ldd	r18, Y+5	; 0x05
     cfc:	3e 81       	ldd	r19, Y+6	; 0x06
     cfe:	22 30       	cpi	r18, 0x02	; 2
     d00:	31 05       	cpc	r19, r1
     d02:	2c f4       	brge	.+10     	; 0xd0e <DIO_u8SetPinDirection+0x4a>
     d04:	8d 81       	ldd	r24, Y+5	; 0x05
     d06:	9e 81       	ldd	r25, Y+6	; 0x06
     d08:	00 97       	sbiw	r24, 0x00	; 0
     d0a:	71 f0       	breq	.+28     	; 0xd28 <DIO_u8SetPinDirection+0x64>
     d0c:	d1 c0       	rjmp	.+418    	; 0xeb0 <DIO_u8SetPinDirection+0x1ec>
     d0e:	2d 81       	ldd	r18, Y+5	; 0x05
     d10:	3e 81       	ldd	r19, Y+6	; 0x06
     d12:	22 30       	cpi	r18, 0x02	; 2
     d14:	31 05       	cpc	r19, r1
     d16:	09 f4       	brne	.+2      	; 0xd1a <DIO_u8SetPinDirection+0x56>
     d18:	69 c0       	rjmp	.+210    	; 0xdec <DIO_u8SetPinDirection+0x128>
     d1a:	8d 81       	ldd	r24, Y+5	; 0x05
     d1c:	9e 81       	ldd	r25, Y+6	; 0x06
     d1e:	83 30       	cpi	r24, 0x03	; 3
     d20:	91 05       	cpc	r25, r1
     d22:	09 f4       	brne	.+2      	; 0xd26 <DIO_u8SetPinDirection+0x62>
     d24:	94 c0       	rjmp	.+296    	; 0xe4e <DIO_u8SetPinDirection+0x18a>
     d26:	c4 c0       	rjmp	.+392    	; 0xeb0 <DIO_u8SetPinDirection+0x1ec>
	{
	case DIO_PORTA:
		if(Copy_u8Direction == PIN_OUTPUT)
     d28:	8c 81       	ldd	r24, Y+4	; 0x04
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	a1 f4       	brne	.+40     	; 0xd56 <DIO_u8SetPinDirection+0x92>
		{
			SET_BIT(DDRA,Copy_u8PinNumber);
     d2e:	aa e3       	ldi	r26, 0x3A	; 58
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ea e3       	ldi	r30, 0x3A	; 58
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	48 2f       	mov	r20, r24
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
     d3c:	28 2f       	mov	r18, r24
     d3e:	30 e0       	ldi	r19, 0x00	; 0
     d40:	81 e0       	ldi	r24, 0x01	; 1
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	02 2e       	mov	r0, r18
     d46:	02 c0       	rjmp	.+4      	; 0xd4c <DIO_u8SetPinDirection+0x88>
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	0a 94       	dec	r0
     d4e:	e2 f7       	brpl	.-8      	; 0xd48 <DIO_u8SetPinDirection+0x84>
     d50:	84 2b       	or	r24, r20
     d52:	8c 93       	st	X, r24
     d54:	b0 c0       	rjmp	.+352    	; 0xeb6 <DIO_u8SetPinDirection+0x1f2>
		}
		else if(Copy_u8Direction == PIN_INPUT)
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	88 23       	and	r24, r24
     d5a:	a9 f4       	brne	.+42     	; 0xd86 <DIO_u8SetPinDirection+0xc2>
		{
			CLR_BIT(DDRA,Copy_u8PinNumber);
     d5c:	aa e3       	ldi	r26, 0x3A	; 58
     d5e:	b0 e0       	ldi	r27, 0x00	; 0
     d60:	ea e3       	ldi	r30, 0x3A	; 58
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	48 2f       	mov	r20, r24
     d68:	8a 81       	ldd	r24, Y+2	; 0x02
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	02 2e       	mov	r0, r18
     d74:	02 c0       	rjmp	.+4      	; 0xd7a <DIO_u8SetPinDirection+0xb6>
     d76:	88 0f       	add	r24, r24
     d78:	99 1f       	adc	r25, r25
     d7a:	0a 94       	dec	r0
     d7c:	e2 f7       	brpl	.-8      	; 0xd76 <DIO_u8SetPinDirection+0xb2>
     d7e:	80 95       	com	r24
     d80:	84 23       	and	r24, r20
     d82:	8c 93       	st	X, r24
     d84:	98 c0       	rjmp	.+304    	; 0xeb6 <DIO_u8SetPinDirection+0x1f2>
		}
		else
		{
			Error_State = NOK;
     d86:	19 82       	std	Y+1, r1	; 0x01
     d88:	96 c0       	rjmp	.+300    	; 0xeb6 <DIO_u8SetPinDirection+0x1f2>
		}
		break;
	case DIO_PORTB:
		if(Copy_u8Direction == PIN_OUTPUT)
     d8a:	8c 81       	ldd	r24, Y+4	; 0x04
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	a1 f4       	brne	.+40     	; 0xdb8 <DIO_u8SetPinDirection+0xf4>
		{
			SET_BIT(DDRB,Copy_u8PinNumber);
     d90:	a7 e3       	ldi	r26, 0x37	; 55
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e7 e3       	ldi	r30, 0x37	; 55
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	48 2f       	mov	r20, r24
     d9c:	8a 81       	ldd	r24, Y+2	; 0x02
     d9e:	28 2f       	mov	r18, r24
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	81 e0       	ldi	r24, 0x01	; 1
     da4:	90 e0       	ldi	r25, 0x00	; 0
     da6:	02 2e       	mov	r0, r18
     da8:	02 c0       	rjmp	.+4      	; 0xdae <DIO_u8SetPinDirection+0xea>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	0a 94       	dec	r0
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <DIO_u8SetPinDirection+0xe6>
     db2:	84 2b       	or	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	7f c0       	rjmp	.+254    	; 0xeb6 <DIO_u8SetPinDirection+0x1f2>
		}
		else if(Copy_u8Direction == PIN_INPUT)
     db8:	8c 81       	ldd	r24, Y+4	; 0x04
     dba:	88 23       	and	r24, r24
     dbc:	a9 f4       	brne	.+42     	; 0xde8 <DIO_u8SetPinDirection+0x124>
		{
			CLR_BIT(DDRB,Copy_u8PinNumber);
     dbe:	a7 e3       	ldi	r26, 0x37	; 55
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e7 e3       	ldi	r30, 0x37	; 55
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <DIO_u8SetPinDirection+0x118>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <DIO_u8SetPinDirection+0x114>
     de0:	80 95       	com	r24
     de2:	84 23       	and	r24, r20
     de4:	8c 93       	st	X, r24
     de6:	67 c0       	rjmp	.+206    	; 0xeb6 <DIO_u8SetPinDirection+0x1f2>
		}
		else
		{
			Error_State = NOK;
     de8:	19 82       	std	Y+1, r1	; 0x01
     dea:	65 c0       	rjmp	.+202    	; 0xeb6 <DIO_u8SetPinDirection+0x1f2>
		}
		break;
	case DIO_PORTC:
		if(Copy_u8Direction == PIN_OUTPUT)
     dec:	8c 81       	ldd	r24, Y+4	; 0x04
     dee:	81 30       	cpi	r24, 0x01	; 1
     df0:	a1 f4       	brne	.+40     	; 0xe1a <DIO_u8SetPinDirection+0x156>
		{
			SET_BIT(DDRC,Copy_u8PinNumber);
     df2:	a4 e3       	ldi	r26, 0x34	; 52
     df4:	b0 e0       	ldi	r27, 0x00	; 0
     df6:	e4 e3       	ldi	r30, 0x34	; 52
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	80 81       	ld	r24, Z
     dfc:	48 2f       	mov	r20, r24
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	28 2f       	mov	r18, r24
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	81 e0       	ldi	r24, 0x01	; 1
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	02 2e       	mov	r0, r18
     e0a:	02 c0       	rjmp	.+4      	; 0xe10 <DIO_u8SetPinDirection+0x14c>
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	0a 94       	dec	r0
     e12:	e2 f7       	brpl	.-8      	; 0xe0c <DIO_u8SetPinDirection+0x148>
     e14:	84 2b       	or	r24, r20
     e16:	8c 93       	st	X, r24
     e18:	4e c0       	rjmp	.+156    	; 0xeb6 <DIO_u8SetPinDirection+0x1f2>
		}
		else if(Copy_u8Direction == PIN_INPUT)
     e1a:	8c 81       	ldd	r24, Y+4	; 0x04
     e1c:	88 23       	and	r24, r24
     e1e:	a9 f4       	brne	.+42     	; 0xe4a <DIO_u8SetPinDirection+0x186>
		{
			CLR_BIT(DDRC,Copy_u8PinNumber);
     e20:	a4 e3       	ldi	r26, 0x34	; 52
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	e4 e3       	ldi	r30, 0x34	; 52
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	48 2f       	mov	r20, r24
     e2c:	8a 81       	ldd	r24, Y+2	; 0x02
     e2e:	28 2f       	mov	r18, r24
     e30:	30 e0       	ldi	r19, 0x00	; 0
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	02 2e       	mov	r0, r18
     e38:	02 c0       	rjmp	.+4      	; 0xe3e <DIO_u8SetPinDirection+0x17a>
     e3a:	88 0f       	add	r24, r24
     e3c:	99 1f       	adc	r25, r25
     e3e:	0a 94       	dec	r0
     e40:	e2 f7       	brpl	.-8      	; 0xe3a <DIO_u8SetPinDirection+0x176>
     e42:	80 95       	com	r24
     e44:	84 23       	and	r24, r20
     e46:	8c 93       	st	X, r24
     e48:	36 c0       	rjmp	.+108    	; 0xeb6 <DIO_u8SetPinDirection+0x1f2>
		}
		else
		{
			Error_State = NOK;
     e4a:	19 82       	std	Y+1, r1	; 0x01
     e4c:	34 c0       	rjmp	.+104    	; 0xeb6 <DIO_u8SetPinDirection+0x1f2>
		}
		break;
	case DIO_PORTD:
		if(Copy_u8Direction == PIN_OUTPUT)
     e4e:	8c 81       	ldd	r24, Y+4	; 0x04
     e50:	81 30       	cpi	r24, 0x01	; 1
     e52:	a1 f4       	brne	.+40     	; 0xe7c <DIO_u8SetPinDirection+0x1b8>
		{
			SET_BIT(DDRD,Copy_u8PinNumber);
     e54:	a1 e3       	ldi	r26, 0x31	; 49
     e56:	b0 e0       	ldi	r27, 0x00	; 0
     e58:	e1 e3       	ldi	r30, 0x31	; 49
     e5a:	f0 e0       	ldi	r31, 0x00	; 0
     e5c:	80 81       	ld	r24, Z
     e5e:	48 2f       	mov	r20, r24
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	28 2f       	mov	r18, r24
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	02 2e       	mov	r0, r18
     e6c:	02 c0       	rjmp	.+4      	; 0xe72 <DIO_u8SetPinDirection+0x1ae>
     e6e:	88 0f       	add	r24, r24
     e70:	99 1f       	adc	r25, r25
     e72:	0a 94       	dec	r0
     e74:	e2 f7       	brpl	.-8      	; 0xe6e <DIO_u8SetPinDirection+0x1aa>
     e76:	84 2b       	or	r24, r20
     e78:	8c 93       	st	X, r24
     e7a:	1d c0       	rjmp	.+58     	; 0xeb6 <DIO_u8SetPinDirection+0x1f2>
		}
		else if(Copy_u8Direction == PIN_INPUT)
     e7c:	8c 81       	ldd	r24, Y+4	; 0x04
     e7e:	88 23       	and	r24, r24
     e80:	a9 f4       	brne	.+42     	; 0xeac <DIO_u8SetPinDirection+0x1e8>
		{
			CLR_BIT(DDRD,Copy_u8PinNumber);
     e82:	a1 e3       	ldi	r26, 0x31	; 49
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e1 e3       	ldi	r30, 0x31	; 49
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	48 2f       	mov	r20, r24
     e8e:	8a 81       	ldd	r24, Y+2	; 0x02
     e90:	28 2f       	mov	r18, r24
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	81 e0       	ldi	r24, 0x01	; 1
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	02 2e       	mov	r0, r18
     e9a:	02 c0       	rjmp	.+4      	; 0xea0 <DIO_u8SetPinDirection+0x1dc>
     e9c:	88 0f       	add	r24, r24
     e9e:	99 1f       	adc	r25, r25
     ea0:	0a 94       	dec	r0
     ea2:	e2 f7       	brpl	.-8      	; 0xe9c <DIO_u8SetPinDirection+0x1d8>
     ea4:	80 95       	com	r24
     ea6:	84 23       	and	r24, r20
     ea8:	8c 93       	st	X, r24
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <DIO_u8SetPinDirection+0x1f2>
		}
		else
		{
			Error_State = NOK;
     eac:	19 82       	std	Y+1, r1	; 0x01
     eae:	03 c0       	rjmp	.+6      	; 0xeb6 <DIO_u8SetPinDirection+0x1f2>
		}
		break;
	default:
		Error_State = NOK;
     eb0:	19 82       	std	Y+1, r1	; 0x01
     eb2:	01 c0       	rjmp	.+2      	; 0xeb6 <DIO_u8SetPinDirection+0x1f2>
		break;
	}
}
	else
	{
		Error_State = NOK;
     eb4:	19 82       	std	Y+1, r1	; 0x01
	}
	return Error_State;
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
}
     eb8:	26 96       	adiw	r28, 0x06	; 6
     eba:	0f b6       	in	r0, 0x3f	; 63
     ebc:	f8 94       	cli
     ebe:	de bf       	out	0x3e, r29	; 62
     ec0:	0f be       	out	0x3f, r0	; 63
     ec2:	cd bf       	out	0x3d, r28	; 61
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <DIO_u8SetPinValue>:

u8 DIO_u8SetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortName,u8 Copy_u8Value)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <DIO_u8SetPinValue+0x6>
     ed0:	00 d0       	rcall	.+0      	; 0xed2 <DIO_u8SetPinValue+0x8>
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <DIO_u8SetPinValue+0xa>
     ed4:	cd b7       	in	r28, 0x3d	; 61
     ed6:	de b7       	in	r29, 0x3e	; 62
     ed8:	8a 83       	std	Y+2, r24	; 0x02
     eda:	6b 83       	std	Y+3, r22	; 0x03
     edc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Error_State = OK;
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PinNumber<8)
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	88 30       	cpi	r24, 0x08	; 8
     ee6:	08 f0       	brcs	.+2      	; 0xeea <DIO_u8SetPinValue+0x20>
     ee8:	e8 c0       	rjmp	.+464    	; 0x10ba <DIO_u8SetPinValue+0x1f0>
		{
		switch(Copy_u8PortName)
     eea:	8b 81       	ldd	r24, Y+3	; 0x03
     eec:	28 2f       	mov	r18, r24
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	3e 83       	std	Y+6, r19	; 0x06
     ef2:	2d 83       	std	Y+5, r18	; 0x05
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	91 05       	cpc	r25, r1
     efc:	09 f4       	brne	.+2      	; 0xf00 <DIO_u8SetPinValue+0x36>
     efe:	48 c0       	rjmp	.+144    	; 0xf90 <DIO_u8SetPinValue+0xc6>
     f00:	2d 81       	ldd	r18, Y+5	; 0x05
     f02:	3e 81       	ldd	r19, Y+6	; 0x06
     f04:	22 30       	cpi	r18, 0x02	; 2
     f06:	31 05       	cpc	r19, r1
     f08:	2c f4       	brge	.+10     	; 0xf14 <DIO_u8SetPinValue+0x4a>
     f0a:	8d 81       	ldd	r24, Y+5	; 0x05
     f0c:	9e 81       	ldd	r25, Y+6	; 0x06
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	71 f0       	breq	.+28     	; 0xf2e <DIO_u8SetPinValue+0x64>
     f12:	d1 c0       	rjmp	.+418    	; 0x10b6 <DIO_u8SetPinValue+0x1ec>
     f14:	2d 81       	ldd	r18, Y+5	; 0x05
     f16:	3e 81       	ldd	r19, Y+6	; 0x06
     f18:	22 30       	cpi	r18, 0x02	; 2
     f1a:	31 05       	cpc	r19, r1
     f1c:	09 f4       	brne	.+2      	; 0xf20 <DIO_u8SetPinValue+0x56>
     f1e:	69 c0       	rjmp	.+210    	; 0xff2 <DIO_u8SetPinValue+0x128>
     f20:	8d 81       	ldd	r24, Y+5	; 0x05
     f22:	9e 81       	ldd	r25, Y+6	; 0x06
     f24:	83 30       	cpi	r24, 0x03	; 3
     f26:	91 05       	cpc	r25, r1
     f28:	09 f4       	brne	.+2      	; 0xf2c <DIO_u8SetPinValue+0x62>
     f2a:	94 c0       	rjmp	.+296    	; 0x1054 <DIO_u8SetPinValue+0x18a>
     f2c:	c4 c0       	rjmp	.+392    	; 0x10b6 <DIO_u8SetPinValue+0x1ec>
		{
		case DIO_PORTA:
			if(Copy_u8Value == HIGH)
     f2e:	8c 81       	ldd	r24, Y+4	; 0x04
     f30:	81 30       	cpi	r24, 0x01	; 1
     f32:	a1 f4       	brne	.+40     	; 0xf5c <DIO_u8SetPinValue+0x92>
			{
				SET_BIT(PORTA,Copy_u8PinNumber);
     f34:	ab e3       	ldi	r26, 0x3B	; 59
     f36:	b0 e0       	ldi	r27, 0x00	; 0
     f38:	eb e3       	ldi	r30, 0x3B	; 59
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	48 2f       	mov	r20, r24
     f40:	8a 81       	ldd	r24, Y+2	; 0x02
     f42:	28 2f       	mov	r18, r24
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	02 2e       	mov	r0, r18
     f4c:	02 c0       	rjmp	.+4      	; 0xf52 <DIO_u8SetPinValue+0x88>
     f4e:	88 0f       	add	r24, r24
     f50:	99 1f       	adc	r25, r25
     f52:	0a 94       	dec	r0
     f54:	e2 f7       	brpl	.-8      	; 0xf4e <DIO_u8SetPinValue+0x84>
     f56:	84 2b       	or	r24, r20
     f58:	8c 93       	st	X, r24
     f5a:	b0 c0       	rjmp	.+352    	; 0x10bc <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8Value == LOW)
     f5c:	8c 81       	ldd	r24, Y+4	; 0x04
     f5e:	88 23       	and	r24, r24
     f60:	a9 f4       	brne	.+42     	; 0xf8c <DIO_u8SetPinValue+0xc2>
			{
				CLR_BIT(PORTA,Copy_u8PinNumber);
     f62:	ab e3       	ldi	r26, 0x3B	; 59
     f64:	b0 e0       	ldi	r27, 0x00	; 0
     f66:	eb e3       	ldi	r30, 0x3B	; 59
     f68:	f0 e0       	ldi	r31, 0x00	; 0
     f6a:	80 81       	ld	r24, Z
     f6c:	48 2f       	mov	r20, r24
     f6e:	8a 81       	ldd	r24, Y+2	; 0x02
     f70:	28 2f       	mov	r18, r24
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	81 e0       	ldi	r24, 0x01	; 1
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	02 2e       	mov	r0, r18
     f7a:	02 c0       	rjmp	.+4      	; 0xf80 <DIO_u8SetPinValue+0xb6>
     f7c:	88 0f       	add	r24, r24
     f7e:	99 1f       	adc	r25, r25
     f80:	0a 94       	dec	r0
     f82:	e2 f7       	brpl	.-8      	; 0xf7c <DIO_u8SetPinValue+0xb2>
     f84:	80 95       	com	r24
     f86:	84 23       	and	r24, r20
     f88:	8c 93       	st	X, r24
     f8a:	98 c0       	rjmp	.+304    	; 0x10bc <DIO_u8SetPinValue+0x1f2>
			}
			else
			{
				Error_State = NOK;
     f8c:	19 82       	std	Y+1, r1	; 0x01
     f8e:	96 c0       	rjmp	.+300    	; 0x10bc <DIO_u8SetPinValue+0x1f2>
			}
			break;
		case DIO_PORTB:
			if(Copy_u8Value == HIGH)
     f90:	8c 81       	ldd	r24, Y+4	; 0x04
     f92:	81 30       	cpi	r24, 0x01	; 1
     f94:	a1 f4       	brne	.+40     	; 0xfbe <DIO_u8SetPinValue+0xf4>
			{
				SET_BIT(PORTB,Copy_u8PinNumber);
     f96:	a8 e3       	ldi	r26, 0x38	; 56
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e8 e3       	ldi	r30, 0x38	; 56
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	48 2f       	mov	r20, r24
     fa2:	8a 81       	ldd	r24, Y+2	; 0x02
     fa4:	28 2f       	mov	r18, r24
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	02 2e       	mov	r0, r18
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <DIO_u8SetPinValue+0xea>
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <DIO_u8SetPinValue+0xe6>
     fb8:	84 2b       	or	r24, r20
     fba:	8c 93       	st	X, r24
     fbc:	7f c0       	rjmp	.+254    	; 0x10bc <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8Value == LOW)
     fbe:	8c 81       	ldd	r24, Y+4	; 0x04
     fc0:	88 23       	and	r24, r24
     fc2:	a9 f4       	brne	.+42     	; 0xfee <DIO_u8SetPinValue+0x124>
			{
				CLR_BIT(PORTB,Copy_u8PinNumber);
     fc4:	a8 e3       	ldi	r26, 0x38	; 56
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	e8 e3       	ldi	r30, 0x38	; 56
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	48 2f       	mov	r20, r24
     fd0:	8a 81       	ldd	r24, Y+2	; 0x02
     fd2:	28 2f       	mov	r18, r24
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	81 e0       	ldi	r24, 0x01	; 1
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	02 2e       	mov	r0, r18
     fdc:	02 c0       	rjmp	.+4      	; 0xfe2 <DIO_u8SetPinValue+0x118>
     fde:	88 0f       	add	r24, r24
     fe0:	99 1f       	adc	r25, r25
     fe2:	0a 94       	dec	r0
     fe4:	e2 f7       	brpl	.-8      	; 0xfde <DIO_u8SetPinValue+0x114>
     fe6:	80 95       	com	r24
     fe8:	84 23       	and	r24, r20
     fea:	8c 93       	st	X, r24
     fec:	67 c0       	rjmp	.+206    	; 0x10bc <DIO_u8SetPinValue+0x1f2>
			}
			else
			{
				Error_State = NOK;
     fee:	19 82       	std	Y+1, r1	; 0x01
     ff0:	65 c0       	rjmp	.+202    	; 0x10bc <DIO_u8SetPinValue+0x1f2>
			}
			break;
		case DIO_PORTC:
			if(Copy_u8Value == HIGH)
     ff2:	8c 81       	ldd	r24, Y+4	; 0x04
     ff4:	81 30       	cpi	r24, 0x01	; 1
     ff6:	a1 f4       	brne	.+40     	; 0x1020 <DIO_u8SetPinValue+0x156>
			{
				SET_BIT(PORTC,Copy_u8PinNumber);
     ff8:	a5 e3       	ldi	r26, 0x35	; 53
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	e5 e3       	ldi	r30, 0x35	; 53
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	80 81       	ld	r24, Z
    1002:	48 2f       	mov	r20, r24
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	28 2f       	mov	r18, r24
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	81 e0       	ldi	r24, 0x01	; 1
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	02 2e       	mov	r0, r18
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <DIO_u8SetPinValue+0x14c>
    1012:	88 0f       	add	r24, r24
    1014:	99 1f       	adc	r25, r25
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <DIO_u8SetPinValue+0x148>
    101a:	84 2b       	or	r24, r20
    101c:	8c 93       	st	X, r24
    101e:	4e c0       	rjmp	.+156    	; 0x10bc <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8Value == LOW)
    1020:	8c 81       	ldd	r24, Y+4	; 0x04
    1022:	88 23       	and	r24, r24
    1024:	a9 f4       	brne	.+42     	; 0x1050 <DIO_u8SetPinValue+0x186>
			{
				CLR_BIT(PORTC,Copy_u8PinNumber);
    1026:	a5 e3       	ldi	r26, 0x35	; 53
    1028:	b0 e0       	ldi	r27, 0x00	; 0
    102a:	e5 e3       	ldi	r30, 0x35	; 53
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	8a 81       	ldd	r24, Y+2	; 0x02
    1034:	28 2f       	mov	r18, r24
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	02 2e       	mov	r0, r18
    103e:	02 c0       	rjmp	.+4      	; 0x1044 <DIO_u8SetPinValue+0x17a>
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	0a 94       	dec	r0
    1046:	e2 f7       	brpl	.-8      	; 0x1040 <DIO_u8SetPinValue+0x176>
    1048:	80 95       	com	r24
    104a:	84 23       	and	r24, r20
    104c:	8c 93       	st	X, r24
    104e:	36 c0       	rjmp	.+108    	; 0x10bc <DIO_u8SetPinValue+0x1f2>
			}
			else
			{
				Error_State = NOK;
    1050:	19 82       	std	Y+1, r1	; 0x01
    1052:	34 c0       	rjmp	.+104    	; 0x10bc <DIO_u8SetPinValue+0x1f2>
			}
			break;
		case DIO_PORTD:
			if(Copy_u8Value == HIGH)
    1054:	8c 81       	ldd	r24, Y+4	; 0x04
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	a1 f4       	brne	.+40     	; 0x1082 <DIO_u8SetPinValue+0x1b8>
			{
				SET_BIT(PORTD,Copy_u8PinNumber);
    105a:	a2 e3       	ldi	r26, 0x32	; 50
    105c:	b0 e0       	ldi	r27, 0x00	; 0
    105e:	e2 e3       	ldi	r30, 0x32	; 50
    1060:	f0 e0       	ldi	r31, 0x00	; 0
    1062:	80 81       	ld	r24, Z
    1064:	48 2f       	mov	r20, r24
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	28 2f       	mov	r18, r24
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	81 e0       	ldi	r24, 0x01	; 1
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	02 2e       	mov	r0, r18
    1072:	02 c0       	rjmp	.+4      	; 0x1078 <DIO_u8SetPinValue+0x1ae>
    1074:	88 0f       	add	r24, r24
    1076:	99 1f       	adc	r25, r25
    1078:	0a 94       	dec	r0
    107a:	e2 f7       	brpl	.-8      	; 0x1074 <DIO_u8SetPinValue+0x1aa>
    107c:	84 2b       	or	r24, r20
    107e:	8c 93       	st	X, r24
    1080:	1d c0       	rjmp	.+58     	; 0x10bc <DIO_u8SetPinValue+0x1f2>
			}
			else if(Copy_u8Value == LOW)
    1082:	8c 81       	ldd	r24, Y+4	; 0x04
    1084:	88 23       	and	r24, r24
    1086:	a9 f4       	brne	.+42     	; 0x10b2 <DIO_u8SetPinValue+0x1e8>
			{
				CLR_BIT(PORTD,Copy_u8PinNumber);
    1088:	a2 e3       	ldi	r26, 0x32	; 50
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	e2 e3       	ldi	r30, 0x32	; 50
    108e:	f0 e0       	ldi	r31, 0x00	; 0
    1090:	80 81       	ld	r24, Z
    1092:	48 2f       	mov	r20, r24
    1094:	8a 81       	ldd	r24, Y+2	; 0x02
    1096:	28 2f       	mov	r18, r24
    1098:	30 e0       	ldi	r19, 0x00	; 0
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	02 2e       	mov	r0, r18
    10a0:	02 c0       	rjmp	.+4      	; 0x10a6 <DIO_u8SetPinValue+0x1dc>
    10a2:	88 0f       	add	r24, r24
    10a4:	99 1f       	adc	r25, r25
    10a6:	0a 94       	dec	r0
    10a8:	e2 f7       	brpl	.-8      	; 0x10a2 <DIO_u8SetPinValue+0x1d8>
    10aa:	80 95       	com	r24
    10ac:	84 23       	and	r24, r20
    10ae:	8c 93       	st	X, r24
    10b0:	05 c0       	rjmp	.+10     	; 0x10bc <DIO_u8SetPinValue+0x1f2>
			}
			else
			{
				Error_State = NOK;
    10b2:	19 82       	std	Y+1, r1	; 0x01
    10b4:	03 c0       	rjmp	.+6      	; 0x10bc <DIO_u8SetPinValue+0x1f2>
			}
			break;
		default:
			Error_State = NOK;
    10b6:	19 82       	std	Y+1, r1	; 0x01
    10b8:	01 c0       	rjmp	.+2      	; 0x10bc <DIO_u8SetPinValue+0x1f2>
			break;
		}
	}
		else
		{
			Error_State = NOK;
    10ba:	19 82       	std	Y+1, r1	; 0x01
		}
		return Error_State;
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
}
    10be:	26 96       	adiw	r28, 0x06	; 6
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	cf 91       	pop	r28
    10cc:	df 91       	pop	r29
    10ce:	08 95       	ret

000010d0 <DIO_u8SetPortDirection>:

u8 DIO_u8SetPortDirection(u8 Copy_u8PortName,u8 Copy_u8Direction)
{
    10d0:	df 93       	push	r29
    10d2:	cf 93       	push	r28
    10d4:	00 d0       	rcall	.+0      	; 0x10d6 <DIO_u8SetPortDirection+0x6>
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <DIO_u8SetPortDirection+0x8>
    10d8:	0f 92       	push	r0
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
    10de:	8a 83       	std	Y+2, r24	; 0x02
    10e0:	6b 83       	std	Y+3, r22	; 0x03
	u8 Error_State = OK;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8PortName)
    10e6:	8a 81       	ldd	r24, Y+2	; 0x02
    10e8:	28 2f       	mov	r18, r24
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	3d 83       	std	Y+5, r19	; 0x05
    10ee:	2c 83       	std	Y+4, r18	; 0x04
    10f0:	8c 81       	ldd	r24, Y+4	; 0x04
    10f2:	9d 81       	ldd	r25, Y+5	; 0x05
    10f4:	81 30       	cpi	r24, 0x01	; 1
    10f6:	91 05       	cpc	r25, r1
    10f8:	31 f1       	breq	.+76     	; 0x1146 <DIO_u8SetPortDirection+0x76>
    10fa:	2c 81       	ldd	r18, Y+4	; 0x04
    10fc:	3d 81       	ldd	r19, Y+5	; 0x05
    10fe:	22 30       	cpi	r18, 0x02	; 2
    1100:	31 05       	cpc	r19, r1
    1102:	2c f4       	brge	.+10     	; 0x110e <DIO_u8SetPortDirection+0x3e>
    1104:	8c 81       	ldd	r24, Y+4	; 0x04
    1106:	9d 81       	ldd	r25, Y+5	; 0x05
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	61 f0       	breq	.+24     	; 0x1124 <DIO_u8SetPortDirection+0x54>
    110c:	4f c0       	rjmp	.+158    	; 0x11ac <DIO_u8SetPortDirection+0xdc>
    110e:	2c 81       	ldd	r18, Y+4	; 0x04
    1110:	3d 81       	ldd	r19, Y+5	; 0x05
    1112:	22 30       	cpi	r18, 0x02	; 2
    1114:	31 05       	cpc	r19, r1
    1116:	41 f1       	breq	.+80     	; 0x1168 <DIO_u8SetPortDirection+0x98>
    1118:	8c 81       	ldd	r24, Y+4	; 0x04
    111a:	9d 81       	ldd	r25, Y+5	; 0x05
    111c:	83 30       	cpi	r24, 0x03	; 3
    111e:	91 05       	cpc	r25, r1
    1120:	a1 f1       	breq	.+104    	; 0x118a <DIO_u8SetPortDirection+0xba>
    1122:	44 c0       	rjmp	.+136    	; 0x11ac <DIO_u8SetPortDirection+0xdc>
		{
		case DIO_PORTA:
			if(Copy_u8Direction == PORT_OUTPUT)
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	8f 3f       	cpi	r24, 0xFF	; 255
    1128:	29 f4       	brne	.+10     	; 0x1134 <DIO_u8SetPortDirection+0x64>
			{
				DDRA = PORT_OUTPUT;
    112a:	ea e3       	ldi	r30, 0x3A	; 58
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	8f ef       	ldi	r24, 0xFF	; 255
    1130:	80 83       	st	Z, r24
    1132:	3d c0       	rjmp	.+122    	; 0x11ae <DIO_u8SetPortDirection+0xde>
			}
			else if(Copy_u8Direction == PORT_INPUT)
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	88 23       	and	r24, r24
    1138:	21 f4       	brne	.+8      	; 0x1142 <DIO_u8SetPortDirection+0x72>
			{
				DDRA = PORT_INPUT;
    113a:	ea e3       	ldi	r30, 0x3A	; 58
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	10 82       	st	Z, r1
    1140:	36 c0       	rjmp	.+108    	; 0x11ae <DIO_u8SetPortDirection+0xde>
			}
			else
			{
				Error_State = NOK;
    1142:	19 82       	std	Y+1, r1	; 0x01
    1144:	34 c0       	rjmp	.+104    	; 0x11ae <DIO_u8SetPortDirection+0xde>
			}
			break;
		case DIO_PORTB:
			if(Copy_u8Direction == PORT_OUTPUT)
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	8f 3f       	cpi	r24, 0xFF	; 255
    114a:	29 f4       	brne	.+10     	; 0x1156 <DIO_u8SetPortDirection+0x86>
			{
				DDRB = PORT_OUTPUT;
    114c:	e7 e3       	ldi	r30, 0x37	; 55
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	8f ef       	ldi	r24, 0xFF	; 255
    1152:	80 83       	st	Z, r24
    1154:	2c c0       	rjmp	.+88     	; 0x11ae <DIO_u8SetPortDirection+0xde>
			}
			else if(Copy_u8Direction == PORT_INPUT)
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	88 23       	and	r24, r24
    115a:	21 f4       	brne	.+8      	; 0x1164 <DIO_u8SetPortDirection+0x94>
			{
				DDRB = PORT_INPUT;
    115c:	e7 e3       	ldi	r30, 0x37	; 55
    115e:	f0 e0       	ldi	r31, 0x00	; 0
    1160:	10 82       	st	Z, r1
    1162:	25 c0       	rjmp	.+74     	; 0x11ae <DIO_u8SetPortDirection+0xde>
			}
			else
			{
				Error_State = NOK;
    1164:	19 82       	std	Y+1, r1	; 0x01
    1166:	23 c0       	rjmp	.+70     	; 0x11ae <DIO_u8SetPortDirection+0xde>
			}
			break;
		case DIO_PORTC:
			if(Copy_u8Direction == PORT_OUTPUT)
    1168:	8b 81       	ldd	r24, Y+3	; 0x03
    116a:	8f 3f       	cpi	r24, 0xFF	; 255
    116c:	29 f4       	brne	.+10     	; 0x1178 <DIO_u8SetPortDirection+0xa8>
			{
				DDRC = PORT_OUTPUT;
    116e:	e4 e3       	ldi	r30, 0x34	; 52
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8f ef       	ldi	r24, 0xFF	; 255
    1174:	80 83       	st	Z, r24
    1176:	1b c0       	rjmp	.+54     	; 0x11ae <DIO_u8SetPortDirection+0xde>
			}
			else if(Copy_u8Direction == PORT_INPUT)
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	88 23       	and	r24, r24
    117c:	21 f4       	brne	.+8      	; 0x1186 <DIO_u8SetPortDirection+0xb6>
			{
				DDRC = PORT_INPUT;
    117e:	e4 e3       	ldi	r30, 0x34	; 52
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	10 82       	st	Z, r1
    1184:	14 c0       	rjmp	.+40     	; 0x11ae <DIO_u8SetPortDirection+0xde>
			}
			else
			{
				Error_State = NOK;
    1186:	19 82       	std	Y+1, r1	; 0x01
    1188:	12 c0       	rjmp	.+36     	; 0x11ae <DIO_u8SetPortDirection+0xde>
			}
			break;
		case DIO_PORTD:
			if(Copy_u8Direction == PORT_OUTPUT)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	8f 3f       	cpi	r24, 0xFF	; 255
    118e:	29 f4       	brne	.+10     	; 0x119a <DIO_u8SetPortDirection+0xca>
			{
				DDRD = PORT_OUTPUT;
    1190:	e1 e3       	ldi	r30, 0x31	; 49
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	80 83       	st	Z, r24
    1198:	0a c0       	rjmp	.+20     	; 0x11ae <DIO_u8SetPortDirection+0xde>
			}
			else if(Copy_u8Direction == PORT_INPUT)
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	88 23       	and	r24, r24
    119e:	21 f4       	brne	.+8      	; 0x11a8 <DIO_u8SetPortDirection+0xd8>
			{
				DDRD = PORT_INPUT;
    11a0:	e1 e3       	ldi	r30, 0x31	; 49
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	10 82       	st	Z, r1
    11a6:	03 c0       	rjmp	.+6      	; 0x11ae <DIO_u8SetPortDirection+0xde>
			}
			else
			{
				Error_State = NOK;
    11a8:	19 82       	std	Y+1, r1	; 0x01
    11aa:	01 c0       	rjmp	.+2      	; 0x11ae <DIO_u8SetPortDirection+0xde>
			}
			break;
		default:
			Error_State = NOK;
    11ac:	19 82       	std	Y+1, r1	; 0x01
			break;
		}

		return Error_State;
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    11b0:	0f 90       	pop	r0
    11b2:	0f 90       	pop	r0
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <DIO_u8SetPortValue>:
u8 DIO_u8SetPortValue(u8 Copy_u8PortName,u8 Copy_u8Value)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	00 d0       	rcall	.+0      	; 0x11c6 <DIO_u8SetPortValue+0x6>
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <DIO_u8SetPortValue+0x8>
    11c8:	0f 92       	push	r0
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
    11ce:	8a 83       	std	Y+2, r24	; 0x02
    11d0:	6b 83       	std	Y+3, r22	; 0x03
	    u8 Error_State = OK;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	89 83       	std	Y+1, r24	; 0x01

	    if(Copy_u8Value<=255)
	    {
	    	switch(Copy_u8PortName)
    11d6:	8a 81       	ldd	r24, Y+2	; 0x02
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	3d 83       	std	Y+5, r19	; 0x05
    11de:	2c 83       	std	Y+4, r18	; 0x04
    11e0:	8c 81       	ldd	r24, Y+4	; 0x04
    11e2:	9d 81       	ldd	r25, Y+5	; 0x05
    11e4:	81 30       	cpi	r24, 0x01	; 1
    11e6:	91 05       	cpc	r25, r1
    11e8:	d1 f0       	breq	.+52     	; 0x121e <DIO_u8SetPortValue+0x5e>
    11ea:	2c 81       	ldd	r18, Y+4	; 0x04
    11ec:	3d 81       	ldd	r19, Y+5	; 0x05
    11ee:	22 30       	cpi	r18, 0x02	; 2
    11f0:	31 05       	cpc	r19, r1
    11f2:	2c f4       	brge	.+10     	; 0x11fe <DIO_u8SetPortValue+0x3e>
    11f4:	8c 81       	ldd	r24, Y+4	; 0x04
    11f6:	9d 81       	ldd	r25, Y+5	; 0x05
    11f8:	00 97       	sbiw	r24, 0x00	; 0
    11fa:	61 f0       	breq	.+24     	; 0x1214 <DIO_u8SetPortValue+0x54>
    11fc:	1f c0       	rjmp	.+62     	; 0x123c <DIO_u8SetPortValue+0x7c>
    11fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1200:	3d 81       	ldd	r19, Y+5	; 0x05
    1202:	22 30       	cpi	r18, 0x02	; 2
    1204:	31 05       	cpc	r19, r1
    1206:	81 f0       	breq	.+32     	; 0x1228 <DIO_u8SetPortValue+0x68>
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	83 30       	cpi	r24, 0x03	; 3
    120e:	91 05       	cpc	r25, r1
    1210:	81 f0       	breq	.+32     	; 0x1232 <DIO_u8SetPortValue+0x72>
    1212:	14 c0       	rjmp	.+40     	; 0x123c <DIO_u8SetPortValue+0x7c>
	    	{
	    	case DIO_PORTA:
	    		PORTA=Copy_u8Value;
    1214:	eb e3       	ldi	r30, 0x3B	; 59
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	80 83       	st	Z, r24
    121c:	10 c0       	rjmp	.+32     	; 0x123e <DIO_u8SetPortValue+0x7e>
	    		break;
	    	case DIO_PORTB:
	    		PORTB=Copy_u8Value;
    121e:	e8 e3       	ldi	r30, 0x38	; 56
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	80 83       	st	Z, r24
    1226:	0b c0       	rjmp	.+22     	; 0x123e <DIO_u8SetPortValue+0x7e>
	    		break;
	    	case DIO_PORTC:
	    		PORTC=Copy_u8Value;
    1228:	e5 e3       	ldi	r30, 0x35	; 53
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	80 83       	st	Z, r24
    1230:	06 c0       	rjmp	.+12     	; 0x123e <DIO_u8SetPortValue+0x7e>
	    		break;
	    	case DIO_PORTD:
	    		PORTD=Copy_u8Value;
    1232:	e2 e3       	ldi	r30, 0x32	; 50
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	80 83       	st	Z, r24
    123a:	01 c0       	rjmp	.+2      	; 0x123e <DIO_u8SetPortValue+0x7e>
	    		break;
	    	default:
	    		Error_State=NOK;
    123c:	19 82       	std	Y+1, r1	; 0x01
	    }
		else
		{
			Error_State = NOK;
		}
			return Error_State;
    123e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	0f 90       	pop	r0
    1248:	0f 90       	pop	r0
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8PinNumber,u8 Copy_u8PortName,u8* u8PtrToValue)
{
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
    1258:	27 97       	sbiw	r28, 0x07	; 7
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	8a 83       	std	Y+2, r24	; 0x02
    1266:	6b 83       	std	Y+3, r22	; 0x03
    1268:	5d 83       	std	Y+5, r21	; 0x05
    126a:	4c 83       	std	Y+4, r20	; 0x04

	    u8 Error_State = OK;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_u8PinNumber<8)
    1270:	8a 81       	ldd	r24, Y+2	; 0x02
    1272:	88 30       	cpi	r24, 0x08	; 8
    1274:	08 f0       	brcs	.+2      	; 0x1278 <DIO_u8GetPinValue+0x28>
    1276:	73 c0       	rjmp	.+230    	; 0x135e <DIO_u8GetPinValue+0x10e>
		{
		switch(Copy_u8PortName)
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	3f 83       	std	Y+7, r19	; 0x07
    1280:	2e 83       	std	Y+6, r18	; 0x06
    1282:	4e 81       	ldd	r20, Y+6	; 0x06
    1284:	5f 81       	ldd	r21, Y+7	; 0x07
    1286:	41 30       	cpi	r20, 0x01	; 1
    1288:	51 05       	cpc	r21, r1
    128a:	59 f1       	breq	.+86     	; 0x12e2 <DIO_u8GetPinValue+0x92>
    128c:	8e 81       	ldd	r24, Y+6	; 0x06
    128e:	9f 81       	ldd	r25, Y+7	; 0x07
    1290:	82 30       	cpi	r24, 0x02	; 2
    1292:	91 05       	cpc	r25, r1
    1294:	34 f4       	brge	.+12     	; 0x12a2 <DIO_u8GetPinValue+0x52>
    1296:	2e 81       	ldd	r18, Y+6	; 0x06
    1298:	3f 81       	ldd	r19, Y+7	; 0x07
    129a:	21 15       	cp	r18, r1
    129c:	31 05       	cpc	r19, r1
    129e:	69 f0       	breq	.+26     	; 0x12ba <DIO_u8GetPinValue+0x6a>
    12a0:	5c c0       	rjmp	.+184    	; 0x135a <DIO_u8GetPinValue+0x10a>
    12a2:	4e 81       	ldd	r20, Y+6	; 0x06
    12a4:	5f 81       	ldd	r21, Y+7	; 0x07
    12a6:	42 30       	cpi	r20, 0x02	; 2
    12a8:	51 05       	cpc	r21, r1
    12aa:	79 f1       	breq	.+94     	; 0x130a <DIO_u8GetPinValue+0xba>
    12ac:	8e 81       	ldd	r24, Y+6	; 0x06
    12ae:	9f 81       	ldd	r25, Y+7	; 0x07
    12b0:	83 30       	cpi	r24, 0x03	; 3
    12b2:	91 05       	cpc	r25, r1
    12b4:	09 f4       	brne	.+2      	; 0x12b8 <DIO_u8GetPinValue+0x68>
    12b6:	3d c0       	rjmp	.+122    	; 0x1332 <DIO_u8GetPinValue+0xe2>
    12b8:	50 c0       	rjmp	.+160    	; 0x135a <DIO_u8GetPinValue+0x10a>
		{
		case DIO_PORTA:
			   *u8PtrToValue  =  GET_BIT(PINA,Copy_u8PinNumber);
    12ba:	e9 e3       	ldi	r30, 0x39	; 57
    12bc:	f0 e0       	ldi	r31, 0x00	; 0
    12be:	80 81       	ld	r24, Z
    12c0:	28 2f       	mov	r18, r24
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	88 2f       	mov	r24, r24
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a9 01       	movw	r20, r18
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <DIO_u8GetPinValue+0x82>
    12ce:	55 95       	asr	r21
    12d0:	47 95       	ror	r20
    12d2:	8a 95       	dec	r24
    12d4:	e2 f7       	brpl	.-8      	; 0x12ce <DIO_u8GetPinValue+0x7e>
    12d6:	ca 01       	movw	r24, r20
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	ec 81       	ldd	r30, Y+4	; 0x04
    12dc:	fd 81       	ldd	r31, Y+5	; 0x05
    12de:	80 83       	st	Z, r24
    12e0:	3f c0       	rjmp	.+126    	; 0x1360 <DIO_u8GetPinValue+0x110>
			break;
		case DIO_PORTB:
			    *u8PtrToValue = GET_BIT(PINB,Copy_u8PinNumber);
    12e2:	e6 e3       	ldi	r30, 0x36	; 54
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	80 81       	ld	r24, Z
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	88 2f       	mov	r24, r24
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	a9 01       	movw	r20, r18
    12f4:	02 c0       	rjmp	.+4      	; 0x12fa <DIO_u8GetPinValue+0xaa>
    12f6:	55 95       	asr	r21
    12f8:	47 95       	ror	r20
    12fa:	8a 95       	dec	r24
    12fc:	e2 f7       	brpl	.-8      	; 0x12f6 <DIO_u8GetPinValue+0xa6>
    12fe:	ca 01       	movw	r24, r20
    1300:	81 70       	andi	r24, 0x01	; 1
    1302:	ec 81       	ldd	r30, Y+4	; 0x04
    1304:	fd 81       	ldd	r31, Y+5	; 0x05
    1306:	80 83       	st	Z, r24
    1308:	2b c0       	rjmp	.+86     	; 0x1360 <DIO_u8GetPinValue+0x110>
			break;
		case DIO_PORTC:
			    *u8PtrToValue = GET_BIT(PINC,Copy_u8PinNumber);
    130a:	e3 e3       	ldi	r30, 0x33	; 51
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	28 2f       	mov	r18, r24
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	8a 81       	ldd	r24, Y+2	; 0x02
    1316:	88 2f       	mov	r24, r24
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	a9 01       	movw	r20, r18
    131c:	02 c0       	rjmp	.+4      	; 0x1322 <DIO_u8GetPinValue+0xd2>
    131e:	55 95       	asr	r21
    1320:	47 95       	ror	r20
    1322:	8a 95       	dec	r24
    1324:	e2 f7       	brpl	.-8      	; 0x131e <DIO_u8GetPinValue+0xce>
    1326:	ca 01       	movw	r24, r20
    1328:	81 70       	andi	r24, 0x01	; 1
    132a:	ec 81       	ldd	r30, Y+4	; 0x04
    132c:	fd 81       	ldd	r31, Y+5	; 0x05
    132e:	80 83       	st	Z, r24
    1330:	17 c0       	rjmp	.+46     	; 0x1360 <DIO_u8GetPinValue+0x110>
			break;
		case DIO_PORTD:
			    *u8PtrToValue = GET_BIT(PIND,Copy_u8PinNumber);
    1332:	e0 e3       	ldi	r30, 0x30	; 48
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	28 2f       	mov	r18, r24
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	8a 81       	ldd	r24, Y+2	; 0x02
    133e:	88 2f       	mov	r24, r24
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	a9 01       	movw	r20, r18
    1344:	02 c0       	rjmp	.+4      	; 0x134a <DIO_u8GetPinValue+0xfa>
    1346:	55 95       	asr	r21
    1348:	47 95       	ror	r20
    134a:	8a 95       	dec	r24
    134c:	e2 f7       	brpl	.-8      	; 0x1346 <DIO_u8GetPinValue+0xf6>
    134e:	ca 01       	movw	r24, r20
    1350:	81 70       	andi	r24, 0x01	; 1
    1352:	ec 81       	ldd	r30, Y+4	; 0x04
    1354:	fd 81       	ldd	r31, Y+5	; 0x05
    1356:	80 83       	st	Z, r24
    1358:	03 c0       	rjmp	.+6      	; 0x1360 <DIO_u8GetPinValue+0x110>
			break;
		default:
			Error_State = NOK;
    135a:	19 82       	std	Y+1, r1	; 0x01
    135c:	01 c0       	rjmp	.+2      	; 0x1360 <DIO_u8GetPinValue+0x110>
			break;
		}
	}
		else
		{
			Error_State = NOK;
    135e:	19 82       	std	Y+1, r1	; 0x01
		}

		return Error_State;
    1360:	89 81       	ldd	r24, Y+1	; 0x01
}
    1362:	27 96       	adiw	r28, 0x07	; 7
    1364:	0f b6       	in	r0, 0x3f	; 63
    1366:	f8 94       	cli
    1368:	de bf       	out	0x3e, r29	; 62
    136a:	0f be       	out	0x3f, r0	; 63
    136c:	cd bf       	out	0x3d, r28	; 61
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <DIO_u8Set4MSB_BitsValue>:

void DIO_u8Set4MSB_BitsValue(u8 Copy_u8PortNumber,u8 Copy_u8PortValue)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <DIO_u8Set4MSB_BitsValue+0x6>
    137a:	00 d0       	rcall	.+0      	; 0x137c <DIO_u8Set4MSB_BitsValue+0x8>
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
    1380:	89 83       	std	Y+1, r24	; 0x01
    1382:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortNumber)
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	3c 83       	std	Y+4, r19	; 0x04
    138c:	2b 83       	std	Y+3, r18	; 0x03
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	81 30       	cpi	r24, 0x01	; 1
    1394:	91 05       	cpc	r25, r1
    1396:	41 f1       	breq	.+80     	; 0x13e8 <DIO_u8Set4MSB_BitsValue+0x74>
    1398:	2b 81       	ldd	r18, Y+3	; 0x03
    139a:	3c 81       	ldd	r19, Y+4	; 0x04
    139c:	22 30       	cpi	r18, 0x02	; 2
    139e:	31 05       	cpc	r19, r1
    13a0:	2c f4       	brge	.+10     	; 0x13ac <DIO_u8Set4MSB_BitsValue+0x38>
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	00 97       	sbiw	r24, 0x00	; 0
    13a8:	61 f0       	breq	.+24     	; 0x13c2 <DIO_u8Set4MSB_BitsValue+0x4e>
    13aa:	56 c0       	rjmp	.+172    	; 0x1458 <DIO_u8Set4MSB_BitsValue+0xe4>
    13ac:	2b 81       	ldd	r18, Y+3	; 0x03
    13ae:	3c 81       	ldd	r19, Y+4	; 0x04
    13b0:	22 30       	cpi	r18, 0x02	; 2
    13b2:	31 05       	cpc	r19, r1
    13b4:	61 f1       	breq	.+88     	; 0x140e <DIO_u8Set4MSB_BitsValue+0x9a>
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	83 30       	cpi	r24, 0x03	; 3
    13bc:	91 05       	cpc	r25, r1
    13be:	d1 f1       	breq	.+116    	; 0x1434 <DIO_u8Set4MSB_BitsValue+0xc0>
    13c0:	4b c0       	rjmp	.+150    	; 0x1458 <DIO_u8Set4MSB_BitsValue+0xe4>
	{
	case DIO_PORTA:
		PORTA&=0x0F;
    13c2:	ab e3       	ldi	r26, 0x3B	; 59
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	eb e3       	ldi	r30, 0x3B	; 59
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	8f 70       	andi	r24, 0x0F	; 15
    13ce:	8c 93       	st	X, r24
		Copy_u8PortValue&=0xF0;
    13d0:	8a 81       	ldd	r24, Y+2	; 0x02
    13d2:	80 7f       	andi	r24, 0xF0	; 240
    13d4:	8a 83       	std	Y+2, r24	; 0x02
		PORTA|=Copy_u8PortValue;
    13d6:	ab e3       	ldi	r26, 0x3B	; 59
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	eb e3       	ldi	r30, 0x3B	; 59
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	90 81       	ld	r25, Z
    13e0:	8a 81       	ldd	r24, Y+2	; 0x02
    13e2:	89 2b       	or	r24, r25
    13e4:	8c 93       	st	X, r24
    13e6:	38 c0       	rjmp	.+112    	; 0x1458 <DIO_u8Set4MSB_BitsValue+0xe4>
		break;
	case DIO_PORTB:
		PORTB&=0x0F;
    13e8:	a8 e3       	ldi	r26, 0x38	; 56
    13ea:	b0 e0       	ldi	r27, 0x00	; 0
    13ec:	e8 e3       	ldi	r30, 0x38	; 56
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	80 81       	ld	r24, Z
    13f2:	8f 70       	andi	r24, 0x0F	; 15
    13f4:	8c 93       	st	X, r24
		Copy_u8PortValue&=0xF0;
    13f6:	8a 81       	ldd	r24, Y+2	; 0x02
    13f8:	80 7f       	andi	r24, 0xF0	; 240
    13fa:	8a 83       	std	Y+2, r24	; 0x02
		PORTB|=Copy_u8PortValue;
    13fc:	a8 e3       	ldi	r26, 0x38	; 56
    13fe:	b0 e0       	ldi	r27, 0x00	; 0
    1400:	e8 e3       	ldi	r30, 0x38	; 56
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	90 81       	ld	r25, Z
    1406:	8a 81       	ldd	r24, Y+2	; 0x02
    1408:	89 2b       	or	r24, r25
    140a:	8c 93       	st	X, r24
    140c:	25 c0       	rjmp	.+74     	; 0x1458 <DIO_u8Set4MSB_BitsValue+0xe4>
		break;
	case DIO_PORTC:
		PORTC&=0x0F;
    140e:	a5 e3       	ldi	r26, 0x35	; 53
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e5 e3       	ldi	r30, 0x35	; 53
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	8f 70       	andi	r24, 0x0F	; 15
    141a:	8c 93       	st	X, r24
		Copy_u8PortValue&=0xF0;
    141c:	8a 81       	ldd	r24, Y+2	; 0x02
    141e:	80 7f       	andi	r24, 0xF0	; 240
    1420:	8a 83       	std	Y+2, r24	; 0x02
		PORTC|=Copy_u8PortValue;
    1422:	a5 e3       	ldi	r26, 0x35	; 53
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e5 e3       	ldi	r30, 0x35	; 53
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	90 81       	ld	r25, Z
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	89 2b       	or	r24, r25
    1430:	8c 93       	st	X, r24
    1432:	12 c0       	rjmp	.+36     	; 0x1458 <DIO_u8Set4MSB_BitsValue+0xe4>
		break;
	case DIO_PORTD:
		PORTD&=0x0F;
    1434:	a2 e3       	ldi	r26, 0x32	; 50
    1436:	b0 e0       	ldi	r27, 0x00	; 0
    1438:	e2 e3       	ldi	r30, 0x32	; 50
    143a:	f0 e0       	ldi	r31, 0x00	; 0
    143c:	80 81       	ld	r24, Z
    143e:	8f 70       	andi	r24, 0x0F	; 15
    1440:	8c 93       	st	X, r24
		Copy_u8PortValue&=0xF0;
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	80 7f       	andi	r24, 0xF0	; 240
    1446:	8a 83       	std	Y+2, r24	; 0x02
		PORTD|=Copy_u8PortValue;
    1448:	a2 e3       	ldi	r26, 0x32	; 50
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e2 e3       	ldi	r30, 0x32	; 50
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	90 81       	ld	r25, Z
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	89 2b       	or	r24, r25
    1456:	8c 93       	st	X, r24
		break;
	}
}
    1458:	0f 90       	pop	r0
    145a:	0f 90       	pop	r0
    145c:	0f 90       	pop	r0
    145e:	0f 90       	pop	r0
    1460:	cf 91       	pop	r28
    1462:	df 91       	pop	r29
    1464:	08 95       	ret

00001466 <EEPROM_voidSendDataByte>:
#include"EEPROM_PRIVATE.h"

#include<util/delay.h>

void EEPROM_voidSendDataByte(u8 Copy_u8Data,u8 Copy_u8PageNumber,u8 Copy_u8Location)
{
    1466:	df 93       	push	r29
    1468:	cf 93       	push	r28
    146a:	cd b7       	in	r28, 0x3d	; 61
    146c:	de b7       	in	r29, 0x3e	; 62
    146e:	62 97       	sbiw	r28, 0x12	; 18
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	de bf       	out	0x3e, r29	; 62
    1476:	0f be       	out	0x3f, r0	; 63
    1478:	cd bf       	out	0x3d, r28	; 61
    147a:	88 8b       	std	Y+16, r24	; 0x10
    147c:	69 8b       	std	Y+17, r22	; 0x11
    147e:	4a 8b       	std	Y+18, r20	; 0x12
	u8 Local_u8AddressPacket;
	Local_u8AddressPacket=EEPROM_FIXED_ADDRESS|(Copy_u8PageNumber);
    1480:	89 89       	ldd	r24, Y+17	; 0x11
    1482:	80 65       	ori	r24, 0x50	; 80
    1484:	8f 87       	std	Y+15, r24	; 0x0f
	/*Send Start Condition*/
	TWI_u8StartCondition();
    1486:	0e 94 b0 0b 	call	0x1760	; 0x1760 <TWI_u8StartCondition>

	/*Send slave address*/
	TWI_u8SendSlaveAddressWithWrite(Local_u8AddressPacket);
    148a:	8f 85       	ldd	r24, Y+15	; 0x0f
    148c:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <TWI_u8SendSlaveAddressWithWrite>
	/*Send 8 bits Location Data*/
	TWI_u8MasterSendDataByte(Copy_u8Location);
    1490:	8a 89       	ldd	r24, Y+18	; 0x12
    1492:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TWI_u8MasterSendDataByte>
	/*Send 8 bits Data*/
	TWI_u8MasterSendDataByte(Copy_u8Data);
    1496:	88 89       	ldd	r24, Y+16	; 0x10
    1498:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TWI_u8MasterSendDataByte>
	/*Send Stop Condition*/
	TWI_voidStopCondtion();
    149c:	0e 94 ae 0c 	call	0x195c	; 0x195c <TWI_voidStopCondtion>
    14a0:	80 e0       	ldi	r24, 0x00	; 0
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a0 e2       	ldi	r26, 0x20	; 32
    14a6:	b1 e4       	ldi	r27, 0x41	; 65
    14a8:	8b 87       	std	Y+11, r24	; 0x0b
    14aa:	9c 87       	std	Y+12, r25	; 0x0c
    14ac:	ad 87       	std	Y+13, r26	; 0x0d
    14ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    14b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    14b8:	20 e0       	ldi	r18, 0x00	; 0
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	4a e7       	ldi	r20, 0x7A	; 122
    14be:	55 e4       	ldi	r21, 0x45	; 69
    14c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14c4:	dc 01       	movw	r26, r24
    14c6:	cb 01       	movw	r24, r22
    14c8:	8f 83       	std	Y+7, r24	; 0x07
    14ca:	98 87       	std	Y+8, r25	; 0x08
    14cc:	a9 87       	std	Y+9, r26	; 0x09
    14ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    14d0:	6f 81       	ldd	r22, Y+7	; 0x07
    14d2:	78 85       	ldd	r23, Y+8	; 0x08
    14d4:	89 85       	ldd	r24, Y+9	; 0x09
    14d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    14d8:	20 e0       	ldi	r18, 0x00	; 0
    14da:	30 e0       	ldi	r19, 0x00	; 0
    14dc:	40 e8       	ldi	r20, 0x80	; 128
    14de:	5f e3       	ldi	r21, 0x3F	; 63
    14e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14e4:	88 23       	and	r24, r24
    14e6:	2c f4       	brge	.+10     	; 0x14f2 <EEPROM_voidSendDataByte+0x8c>
		__ticks = 1;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	9e 83       	std	Y+6, r25	; 0x06
    14ee:	8d 83       	std	Y+5, r24	; 0x05
    14f0:	3f c0       	rjmp	.+126    	; 0x1570 <EEPROM_voidSendDataByte+0x10a>
	else if (__tmp > 65535)
    14f2:	6f 81       	ldd	r22, Y+7	; 0x07
    14f4:	78 85       	ldd	r23, Y+8	; 0x08
    14f6:	89 85       	ldd	r24, Y+9	; 0x09
    14f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	3f ef       	ldi	r19, 0xFF	; 255
    14fe:	4f e7       	ldi	r20, 0x7F	; 127
    1500:	57 e4       	ldi	r21, 0x47	; 71
    1502:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1506:	18 16       	cp	r1, r24
    1508:	4c f5       	brge	.+82     	; 0x155c <EEPROM_voidSendDataByte+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    150a:	6b 85       	ldd	r22, Y+11	; 0x0b
    150c:	7c 85       	ldd	r23, Y+12	; 0x0c
    150e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1510:	9e 85       	ldd	r25, Y+14	; 0x0e
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	40 e2       	ldi	r20, 0x20	; 32
    1518:	51 e4       	ldi	r21, 0x41	; 65
    151a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    151e:	dc 01       	movw	r26, r24
    1520:	cb 01       	movw	r24, r22
    1522:	bc 01       	movw	r22, r24
    1524:	cd 01       	movw	r24, r26
    1526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    152a:	dc 01       	movw	r26, r24
    152c:	cb 01       	movw	r24, r22
    152e:	9e 83       	std	Y+6, r25	; 0x06
    1530:	8d 83       	std	Y+5, r24	; 0x05
    1532:	0f c0       	rjmp	.+30     	; 0x1552 <EEPROM_voidSendDataByte+0xec>
    1534:	80 e9       	ldi	r24, 0x90	; 144
    1536:	91 e0       	ldi	r25, 0x01	; 1
    1538:	9c 83       	std	Y+4, r25	; 0x04
    153a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	f1 f7       	brne	.-4      	; 0x1540 <EEPROM_voidSendDataByte+0xda>
    1544:	9c 83       	std	Y+4, r25	; 0x04
    1546:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1548:	8d 81       	ldd	r24, Y+5	; 0x05
    154a:	9e 81       	ldd	r25, Y+6	; 0x06
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	9e 83       	std	Y+6, r25	; 0x06
    1550:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1552:	8d 81       	ldd	r24, Y+5	; 0x05
    1554:	9e 81       	ldd	r25, Y+6	; 0x06
    1556:	00 97       	sbiw	r24, 0x00	; 0
    1558:	69 f7       	brne	.-38     	; 0x1534 <EEPROM_voidSendDataByte+0xce>
    155a:	14 c0       	rjmp	.+40     	; 0x1584 <EEPROM_voidSendDataByte+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    155c:	6f 81       	ldd	r22, Y+7	; 0x07
    155e:	78 85       	ldd	r23, Y+8	; 0x08
    1560:	89 85       	ldd	r24, Y+9	; 0x09
    1562:	9a 85       	ldd	r25, Y+10	; 0x0a
    1564:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	9e 83       	std	Y+6, r25	; 0x06
    156e:	8d 83       	std	Y+5, r24	; 0x05
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	9a 83       	std	Y+2, r25	; 0x02
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	9a 81       	ldd	r25, Y+2	; 0x02
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	f1 f7       	brne	.-4      	; 0x157c <EEPROM_voidSendDataByte+0x116>
    1580:	9a 83       	std	Y+2, r25	; 0x02
    1582:	89 83       	std	Y+1, r24	; 0x01

	/*Delay until the write cycle is finished*/
	_delay_ms(10);
}
    1584:	62 96       	adiw	r28, 0x12	; 18
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <EEPROM_u8ReadDataByte>:
u8 EEPROM_u8ReadDataByte(u8 Copy_u8PageNumber,u8 Copy_u8Location)
{
    1596:	df 93       	push	r29
    1598:	cf 93       	push	r28
    159a:	00 d0       	rcall	.+0      	; 0x159c <EEPROM_u8ReadDataByte+0x6>
    159c:	00 d0       	rcall	.+0      	; 0x159e <EEPROM_u8ReadDataByte+0x8>
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	8b 83       	std	Y+3, r24	; 0x03
    15a4:	6c 83       	std	Y+4, r22	; 0x04
	u8 Local_u8AddressPacket;
	u8 Local_u8DataByte;
	Local_u8AddressPacket=EEPROM_FIXED_ADDRESS|Copy_u8PageNumber;
    15a6:	8b 81       	ldd	r24, Y+3	; 0x03
    15a8:	80 65       	ori	r24, 0x50	; 80
    15aa:	89 83       	std	Y+1, r24	; 0x01
	/*Send Start Condition*/
	TWI_u8StartCondition();
    15ac:	0e 94 b0 0b 	call	0x1760	; 0x1760 <TWI_u8StartCondition>
	/*Send slave address*/
	TWI_u8SendSlaveAddressWithWrite(Local_u8AddressPacket);
    15b0:	89 81       	ldd	r24, Y+1	; 0x01
    15b2:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <TWI_u8SendSlaveAddressWithWrite>
	/*Send 8 bits Location Data*/
	TWI_u8MasterSendDataByte(Copy_u8Location);
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <TWI_u8MasterSendDataByte>
	/*Send Repeated Start*/
	TWI_u8RepeatedStart();
    15bc:	0e 94 89 0c 	call	0x1912	; 0x1912 <TWI_u8RepeatedStart>
	/*Send Slave Address with read*/
	TWI_u8SendSlaveAddressWithRead(Local_u8AddressPacket);
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	0e 94 08 0c 	call	0x1810	; 0x1810 <TWI_u8SendSlaveAddressWithRead>
	/*read data byte*/
	TWI_u8MasterReadDataByte(&Local_u8DataByte);
    15c6:	ce 01       	movw	r24, r28
    15c8:	02 96       	adiw	r24, 0x02	; 2
    15ca:	0e 94 5f 0c 	call	0x18be	; 0x18be <TWI_u8MasterReadDataByte>
	/*Send Stop Condition*/
	TWI_voidStopCondtion();
    15ce:	0e 94 ae 0c 	call	0x195c	; 0x195c <TWI_voidStopCondtion>

	return Local_u8DataByte;
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    15d4:	0f 90       	pop	r0
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	cf 91       	pop	r28
    15de:	df 91       	pop	r29
    15e0:	08 95       	ret

000015e2 <Shift>:
 */

#include"STD_TYPES.h"

void Shift(u8 Size_Arr ,u8 *Arr)
{
    15e2:	df 93       	push	r29
    15e4:	cf 93       	push	r28
    15e6:	00 d0       	rcall	.+0      	; 0x15e8 <Shift+0x6>
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <Shift+0x8>
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <Shift+0xa>
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	8c 83       	std	Y+4, r24	; 0x04
    15f2:	7e 83       	std	Y+6, r23	; 0x06
    15f4:	6d 83       	std	Y+5, r22	; 0x05
	u8 x;
	u8 *temp;
	temp=&Arr[Size_Arr-1];
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	9c 01       	movw	r18, r24
    15fe:	21 50       	subi	r18, 0x01	; 1
    1600:	30 40       	sbci	r19, 0x00	; 0
    1602:	8d 81       	ldd	r24, Y+5	; 0x05
    1604:	9e 81       	ldd	r25, Y+6	; 0x06
    1606:	82 0f       	add	r24, r18
    1608:	93 1f       	adc	r25, r19
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
    for(x=Size_Arr-1;x>0;x--)
    160e:	8c 81       	ldd	r24, Y+4	; 0x04
    1610:	81 50       	subi	r24, 0x01	; 1
    1612:	8b 83       	std	Y+3, r24	; 0x03
    1614:	18 c0       	rjmp	.+48     	; 0x1646 <Shift+0x64>
	{
	     Arr[x]=Arr[x-1];
    1616:	8b 81       	ldd	r24, Y+3	; 0x03
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	8d 81       	ldd	r24, Y+5	; 0x05
    161e:	9e 81       	ldd	r25, Y+6	; 0x06
    1620:	dc 01       	movw	r26, r24
    1622:	a2 0f       	add	r26, r18
    1624:	b3 1f       	adc	r27, r19
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	9c 01       	movw	r18, r24
    162e:	21 50       	subi	r18, 0x01	; 1
    1630:	30 40       	sbci	r19, 0x00	; 0
    1632:	8d 81       	ldd	r24, Y+5	; 0x05
    1634:	9e 81       	ldd	r25, Y+6	; 0x06
    1636:	fc 01       	movw	r30, r24
    1638:	e2 0f       	add	r30, r18
    163a:	f3 1f       	adc	r31, r19
    163c:	80 81       	ld	r24, Z
    163e:	8c 93       	st	X, r24
void Shift(u8 Size_Arr ,u8 *Arr)
{
	u8 x;
	u8 *temp;
	temp=&Arr[Size_Arr-1];
    for(x=Size_Arr-1;x>0;x--)
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	81 50       	subi	r24, 0x01	; 1
    1644:	8b 83       	std	Y+3, r24	; 0x03
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	88 23       	and	r24, r24
    164a:	29 f7       	brne	.-54     	; 0x1616 <Shift+0x34>
	{
	     Arr[x]=Arr[x-1];
	}
	Arr[0]=*temp;
    164c:	e9 81       	ldd	r30, Y+1	; 0x01
    164e:	fa 81       	ldd	r31, Y+2	; 0x02
    1650:	80 81       	ld	r24, Z
    1652:	ed 81       	ldd	r30, Y+5	; 0x05
    1654:	fe 81       	ldd	r31, Y+6	; 0x06
    1656:	80 83       	st	Z, r24
}
    1658:	26 96       	adiw	r28, 0x06	; 6
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	f8 94       	cli
    165e:	de bf       	out	0x3e, r29	; 62
    1660:	0f be       	out	0x3f, r0	; 63
    1662:	cd bf       	out	0x3d, r28	; 61
    1664:	cf 91       	pop	r28
    1666:	df 91       	pop	r29
    1668:	08 95       	ret

0000166a <Avg_Calc>:

u8 Avg_Calc(u8 Size_Arr ,u8 *Arr)
{
    166a:	df 93       	push	r29
    166c:	cf 93       	push	r28
    166e:	00 d0       	rcall	.+0      	; 0x1670 <Avg_Calc+0x6>
    1670:	00 d0       	rcall	.+0      	; 0x1672 <Avg_Calc+0x8>
    1672:	00 d0       	rcall	.+0      	; 0x1674 <Avg_Calc+0xa>
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
    1678:	8c 83       	std	Y+4, r24	; 0x04
    167a:	7e 83       	std	Y+6, r23	; 0x06
    167c:	6d 83       	std	Y+5, r22	; 0x05
	u8 i;
	u8 sum;
	u8 avg;
    for (i = 0; i < Size_Arr; ++i)
    167e:	1b 82       	std	Y+3, r1	; 0x03
    1680:	0f c0       	rjmp	.+30     	; 0x16a0 <Avg_Calc+0x36>
    {
    sum += Arr[i];
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	8d 81       	ldd	r24, Y+5	; 0x05
    168a:	9e 81       	ldd	r25, Y+6	; 0x06
    168c:	fc 01       	movw	r30, r24
    168e:	e2 0f       	add	r30, r18
    1690:	f3 1f       	adc	r31, r19
    1692:	90 81       	ld	r25, Z
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	89 0f       	add	r24, r25
    1698:	8a 83       	std	Y+2, r24	; 0x02
u8 Avg_Calc(u8 Size_Arr ,u8 *Arr)
{
	u8 i;
	u8 sum;
	u8 avg;
    for (i = 0; i < Size_Arr; ++i)
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	8f 5f       	subi	r24, 0xFF	; 255
    169e:	8b 83       	std	Y+3, r24	; 0x03
    16a0:	9b 81       	ldd	r25, Y+3	; 0x03
    16a2:	8c 81       	ldd	r24, Y+4	; 0x04
    16a4:	98 17       	cp	r25, r24
    16a6:	68 f3       	brcs	.-38     	; 0x1682 <Avg_Calc+0x18>
    {
    sum += Arr[i];
    }
    avg = sum/Size_Arr;
    16a8:	8a 81       	ldd	r24, Y+2	; 0x02
    16aa:	9c 81       	ldd	r25, Y+4	; 0x04
    16ac:	69 2f       	mov	r22, r25
    16ae:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <__udivmodqi4>
    16b2:	89 83       	std	Y+1, r24	; 0x01
	return avg;
    16b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    16b6:	26 96       	adiw	r28, 0x06	; 6
    16b8:	0f b6       	in	r0, 0x3f	; 63
    16ba:	f8 94       	cli
    16bc:	de bf       	out	0x3e, r29	; 62
    16be:	0f be       	out	0x3f, r0	; 63
    16c0:	cd bf       	out	0x3d, r28	; 61
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <TWI_voidInitMaster>:
#include"STD_TYPES.h"
#include"BIT_MATH.h"
#include"TWI_Private.h"

void TWI_voidInitMaster(u8 Copy_u8Address )
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	0f 92       	push	r0
    16ce:	cd b7       	in	r28, 0x3d	; 61
    16d0:	de b7       	in	r29, 0x3e	; 62
    16d2:	89 83       	std	Y+1, r24	; 0x01
	/*Enable to ACK*/
	SET_BIT(TWCR,6);
    16d4:	a6 e5       	ldi	r26, 0x56	; 86
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e6 e5       	ldi	r30, 0x56	; 86
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	80 64       	ori	r24, 0x40	; 64
    16e0:	8c 93       	st	X, r24
	/*Select prescaler-->1*/
	CLR_BIT(TWSR,1);
    16e2:	a1 e2       	ldi	r26, 0x21	; 33
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e1 e2       	ldi	r30, 0x21	; 33
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	8d 7f       	andi	r24, 0xFD	; 253
    16ee:	8c 93       	st	X, r24
	CLR_BIT(TWSR,0);
    16f0:	a1 e2       	ldi	r26, 0x21	; 33
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e1 e2       	ldi	r30, 0x21	; 33
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	8e 7f       	andi	r24, 0xFE	; 254
    16fc:	8c 93       	st	X, r24
	TWBR=12;
    16fe:	e0 e2       	ldi	r30, 0x20	; 32
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	8c e0       	ldi	r24, 0x0C	; 12
    1704:	80 83       	st	Z, r24
	/*Set Master Address*/
	TWAR=Copy_u8Address<<1;
    1706:	e2 e2       	ldi	r30, 0x22	; 34
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	88 0f       	add	r24, r24
    170e:	80 83       	st	Z, r24
	/*TWI Enable*/
	SET_BIT(TWCR,2);
    1710:	a6 e5       	ldi	r26, 0x56	; 86
    1712:	b0 e0       	ldi	r27, 0x00	; 0
    1714:	e6 e5       	ldi	r30, 0x56	; 86
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	84 60       	ori	r24, 0x04	; 4
    171c:	8c 93       	st	X, r24
}
    171e:	0f 90       	pop	r0
    1720:	cf 91       	pop	r28
    1722:	df 91       	pop	r29
    1724:	08 95       	ret

00001726 <TWI_voidInitSlave>:
void TWI_voidInitSlave(u8 Copy_u8Address )
{
    1726:	df 93       	push	r29
    1728:	cf 93       	push	r28
    172a:	0f 92       	push	r0
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	89 83       	std	Y+1, r24	; 0x01
	/*Enable to ACK*/
	SET_BIT(TWCR,6);
    1732:	a6 e5       	ldi	r26, 0x56	; 86
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	e6 e5       	ldi	r30, 0x56	; 86
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	80 64       	ori	r24, 0x40	; 64
    173e:	8c 93       	st	X, r24
	/*Set own Address*/
	TWAR=Copy_u8Address<<1;
    1740:	e2 e2       	ldi	r30, 0x22	; 34
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	88 0f       	add	r24, r24
    1748:	80 83       	st	Z, r24
	/*TWI Enable*/
	SET_BIT(TWCR,2);
    174a:	a6 e5       	ldi	r26, 0x56	; 86
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e6 e5       	ldi	r30, 0x56	; 86
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	84 60       	ori	r24, 0x04	; 4
    1756:	8c 93       	st	X, r24
}
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	08 95       	ret

00001760 <TWI_u8StartCondition>:
u8 TWI_u8StartCondition(void)
{
    1760:	df 93       	push	r29
    1762:	cf 93       	push	r28
    1764:	0f 92       	push	r0
    1766:	cd b7       	in	r28, 0x3d	; 61
    1768:	de b7       	in	r29, 0x3e	; 62
	u8 ErrorState=OK;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	89 83       	std	Y+1, r24	; 0x01
	/*Set Start Condition Bit*/
	SET_BIT(TWCR,5);
    176e:	a6 e5       	ldi	r26, 0x56	; 86
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	e6 e5       	ldi	r30, 0x56	; 86
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	80 62       	ori	r24, 0x20	; 32
    177a:	8c 93       	st	X, r24
	/*Clear TWINT Flag*/
	SET_BIT(TWCR,7);
    177c:	a6 e5       	ldi	r26, 0x56	; 86
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e6 e5       	ldi	r30, 0x56	; 86
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	80 68       	ori	r24, 0x80	; 128
    1788:	8c 93       	st	X, r24
	/*wait on flag until the operation is finished */
	while(GET_BIT(TWCR,7)==0);
    178a:	e6 e5       	ldi	r30, 0x56	; 86
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	88 23       	and	r24, r24
    1792:	dc f7       	brge	.-10     	; 0x178a <TWI_u8StartCondition+0x2a>

	/*check the operation status*/
	if(TWSR==0x08)
    1794:	e1 e2       	ldi	r30, 0x21	; 33
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	88 30       	cpi	r24, 0x08	; 8
    179c:	09 f0       	breq	.+2      	; 0x17a0 <TWI_u8StartCondition+0x40>
	{
		/*Do Nothing*/
	}
	else
	{
		ErrorState=NOK;
    179e:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    17a0:	89 81       	ldd	r24, Y+1	; 0x01
}
    17a2:	0f 90       	pop	r0
    17a4:	cf 91       	pop	r28
    17a6:	df 91       	pop	r29
    17a8:	08 95       	ret

000017aa <TWI_u8SendSlaveAddressWithWrite>:
u8 TWI_u8SendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    17aa:	df 93       	push	r29
    17ac:	cf 93       	push	r28
    17ae:	00 d0       	rcall	.+0      	; 0x17b0 <TWI_u8SendSlaveAddressWithWrite+0x6>
    17b0:	cd b7       	in	r28, 0x3d	; 61
    17b2:	de b7       	in	r29, 0x3e	; 62
    17b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState=OK;
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	89 83       	std	Y+1, r24	; 0x01
	/*Send 7bits Slave Address With Write*/
	TWDR=Copy_u8SlaveAddress<<1;
    17ba:	e3 e2       	ldi	r30, 0x23	; 35
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	8a 81       	ldd	r24, Y+2	; 0x02
    17c0:	88 0f       	add	r24, r24
    17c2:	80 83       	st	Z, r24
	/*Set the write mode*/
	CLR_BIT(TWDR,0);
    17c4:	a3 e2       	ldi	r26, 0x23	; 35
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e3 e2       	ldi	r30, 0x23	; 35
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	8e 7f       	andi	r24, 0xFE	; 254
    17d0:	8c 93       	st	X, r24
	/*Clear Start Condition Bit*/
	CLR_BIT(TWCR,5);
    17d2:	a6 e5       	ldi	r26, 0x56	; 86
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e6 e5       	ldi	r30, 0x56	; 86
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	8f 7d       	andi	r24, 0xDF	; 223
    17de:	8c 93       	st	X, r24
	/*Clear TWINT Flag*/
	SET_BIT(TWCR,7);
    17e0:	a6 e5       	ldi	r26, 0x56	; 86
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e6 e5       	ldi	r30, 0x56	; 86
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	80 68       	ori	r24, 0x80	; 128
    17ec:	8c 93       	st	X, r24
	/*wait on flag until the operation is finished */
	while(GET_BIT(TWCR,7)==0);
    17ee:	e6 e5       	ldi	r30, 0x56	; 86
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	88 23       	and	r24, r24
    17f6:	dc f7       	brge	.-10     	; 0x17ee <TWI_u8SendSlaveAddressWithWrite+0x44>

	/*check the operation status*/
	if(TWSR==0x18)
    17f8:	e1 e2       	ldi	r30, 0x21	; 33
    17fa:	f0 e0       	ldi	r31, 0x00	; 0
    17fc:	80 81       	ld	r24, Z
    17fe:	88 31       	cpi	r24, 0x18	; 24
    1800:	09 f0       	breq	.+2      	; 0x1804 <TWI_u8SendSlaveAddressWithWrite+0x5a>
	{
		/*Do Nothing*/
	}
	else
	{
		ErrorState=NOK;
    1802:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    1804:	89 81       	ldd	r24, Y+1	; 0x01
}
    1806:	0f 90       	pop	r0
    1808:	0f 90       	pop	r0
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	08 95       	ret

00001810 <TWI_u8SendSlaveAddressWithRead>:
u8 TWI_u8SendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    1810:	df 93       	push	r29
    1812:	cf 93       	push	r28
    1814:	00 d0       	rcall	.+0      	; 0x1816 <TWI_u8SendSlaveAddressWithRead+0x6>
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState=OK;
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	89 83       	std	Y+1, r24	; 0x01
	/*Send 7bits Slave Address With Write*/
	TWDR=Copy_u8SlaveAddress<<1;
    1820:	e3 e2       	ldi	r30, 0x23	; 35
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	88 0f       	add	r24, r24
    1828:	80 83       	st	Z, r24
	/*Set the Read mode*/
	SET_BIT(TWDR,0);
    182a:	a3 e2       	ldi	r26, 0x23	; 35
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e3 e2       	ldi	r30, 0x23	; 35
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	81 60       	ori	r24, 0x01	; 1
    1836:	8c 93       	st	X, r24
	/*Clear Start Condition Bit*/
	CLR_BIT(TWCR,5);
    1838:	a6 e5       	ldi	r26, 0x56	; 86
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	e6 e5       	ldi	r30, 0x56	; 86
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	8f 7d       	andi	r24, 0xDF	; 223
    1844:	8c 93       	st	X, r24
	/*Clear TWINT Flag*/
	SET_BIT(TWCR,7);
    1846:	a6 e5       	ldi	r26, 0x56	; 86
    1848:	b0 e0       	ldi	r27, 0x00	; 0
    184a:	e6 e5       	ldi	r30, 0x56	; 86
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	80 81       	ld	r24, Z
    1850:	80 68       	ori	r24, 0x80	; 128
    1852:	8c 93       	st	X, r24
	/*wait on flag until the operation is finished */
	while(GET_BIT(TWCR,7)==0);
    1854:	e6 e5       	ldi	r30, 0x56	; 86
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	88 23       	and	r24, r24
    185c:	dc f7       	brge	.-10     	; 0x1854 <TWI_u8SendSlaveAddressWithRead+0x44>

	/*check the operation status*/
	if(TWSR==0x40)
    185e:	e1 e2       	ldi	r30, 0x21	; 33
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	80 34       	cpi	r24, 0x40	; 64
    1866:	09 f0       	breq	.+2      	; 0x186a <TWI_u8SendSlaveAddressWithRead+0x5a>
	{
		/*Do Nothing*/
	}
	else
	{
		ErrorState=NOK;
    1868:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    186a:	89 81       	ldd	r24, Y+1	; 0x01
}
    186c:	0f 90       	pop	r0
    186e:	0f 90       	pop	r0
    1870:	cf 91       	pop	r28
    1872:	df 91       	pop	r29
    1874:	08 95       	ret

00001876 <TWI_u8MasterSendDataByte>:
u8 TWI_u8MasterSendDataByte(u8 Copy_u8Data)
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	00 d0       	rcall	.+0      	; 0x187c <TWI_u8MasterSendDataByte+0x6>
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState=OK;
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	89 83       	std	Y+1, r24	; 0x01
	/*Send 8bits Data*/
	TWDR=Copy_u8Data;
    1886:	e3 e2       	ldi	r30, 0x23	; 35
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	80 83       	st	Z, r24
	/*Clear TWINT Flag*/
	SET_BIT(TWCR,7);
    188e:	a6 e5       	ldi	r26, 0x56	; 86
    1890:	b0 e0       	ldi	r27, 0x00	; 0
    1892:	e6 e5       	ldi	r30, 0x56	; 86
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	80 81       	ld	r24, Z
    1898:	80 68       	ori	r24, 0x80	; 128
    189a:	8c 93       	st	X, r24
	/*wait on flag until the operation is finished */
	while(GET_BIT(TWCR,7)==0);
    189c:	e6 e5       	ldi	r30, 0x56	; 86
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	88 23       	and	r24, r24
    18a4:	dc f7       	brge	.-10     	; 0x189c <TWI_u8MasterSendDataByte+0x26>

	/*check the operation status*/
	if(TWSR==0x28)
    18a6:	e1 e2       	ldi	r30, 0x21	; 33
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	88 32       	cpi	r24, 0x28	; 40
    18ae:	09 f0       	breq	.+2      	; 0x18b2 <TWI_u8MasterSendDataByte+0x3c>
	{
		/*Do Nothing*/
	}
	else
	{
		ErrorState=NOK;
    18b0:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    18b2:	89 81       	ldd	r24, Y+1	; 0x01
}
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	cf 91       	pop	r28
    18ba:	df 91       	pop	r29
    18bc:	08 95       	ret

000018be <TWI_u8MasterReadDataByte>:
u8 TWI_u8MasterReadDataByte(u8* Copy_Pu8Data)
{
    18be:	df 93       	push	r29
    18c0:	cf 93       	push	r28
    18c2:	00 d0       	rcall	.+0      	; 0x18c4 <TWI_u8MasterReadDataByte+0x6>
    18c4:	0f 92       	push	r0
    18c6:	cd b7       	in	r28, 0x3d	; 61
    18c8:	de b7       	in	r29, 0x3e	; 62
    18ca:	9b 83       	std	Y+3, r25	; 0x03
    18cc:	8a 83       	std	Y+2, r24	; 0x02
	u8 ErrorState=OK;
    18ce:	81 e0       	ldi	r24, 0x01	; 1
    18d0:	89 83       	std	Y+1, r24	; 0x01
	/*Clear TWINT Flag*/
	SET_BIT(TWCR,7);
    18d2:	a6 e5       	ldi	r26, 0x56	; 86
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	e6 e5       	ldi	r30, 0x56	; 86
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
    18dc:	80 68       	ori	r24, 0x80	; 128
    18de:	8c 93       	st	X, r24
	/*wait on flag until the operation is finished */
	while(GET_BIT(TWCR,7)==0);
    18e0:	e6 e5       	ldi	r30, 0x56	; 86
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	88 23       	and	r24, r24
    18e8:	dc f7       	brge	.-10     	; 0x18e0 <TWI_u8MasterReadDataByte+0x22>
	/*check the operation status*/
	if(TWSR==0x50)
    18ea:	e1 e2       	ldi	r30, 0x21	; 33
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	80 35       	cpi	r24, 0x50	; 80
    18f2:	39 f4       	brne	.+14     	; 0x1902 <TWI_u8MasterReadDataByte+0x44>
	{
		*Copy_Pu8Data=TWDR;
    18f4:	e3 e2       	ldi	r30, 0x23	; 35
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	ea 81       	ldd	r30, Y+2	; 0x02
    18fc:	fb 81       	ldd	r31, Y+3	; 0x03
    18fe:	80 83       	st	Z, r24
    1900:	01 c0       	rjmp	.+2      	; 0x1904 <TWI_u8MasterReadDataByte+0x46>
	}
	else
	{
		ErrorState=NOK;
    1902:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    1904:	89 81       	ldd	r24, Y+1	; 0x01
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	0f 90       	pop	r0
    190c:	cf 91       	pop	r28
    190e:	df 91       	pop	r29
    1910:	08 95       	ret

00001912 <TWI_u8RepeatedStart>:
u8 TWI_u8RepeatedStart(void)
{
    1912:	df 93       	push	r29
    1914:	cf 93       	push	r28
    1916:	0f 92       	push	r0
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
	u8 ErrorState=OK;
    191c:	81 e0       	ldi	r24, 0x01	; 1
    191e:	89 83       	std	Y+1, r24	; 0x01
	/*Set Start Condition Bit*/
	SET_BIT(TWCR,5);
    1920:	a6 e5       	ldi	r26, 0x56	; 86
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e6 e5       	ldi	r30, 0x56	; 86
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	80 62       	ori	r24, 0x20	; 32
    192c:	8c 93       	st	X, r24
	/*Clear TWINT Flag*/
	SET_BIT(TWCR,7);
    192e:	a6 e5       	ldi	r26, 0x56	; 86
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e6 e5       	ldi	r30, 0x56	; 86
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	80 68       	ori	r24, 0x80	; 128
    193a:	8c 93       	st	X, r24
	/*wait on flag until the operation is finished */
	while(GET_BIT(TWCR,7)==0);
    193c:	e6 e5       	ldi	r30, 0x56	; 86
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	80 81       	ld	r24, Z
    1942:	88 23       	and	r24, r24
    1944:	dc f7       	brge	.-10     	; 0x193c <TWI_u8RepeatedStart+0x2a>

	/*check the operation status*/
	if(TWSR==0x10)
    1946:	e1 e2       	ldi	r30, 0x21	; 33
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	80 31       	cpi	r24, 0x10	; 16
    194e:	09 f0       	breq	.+2      	; 0x1952 <TWI_u8RepeatedStart+0x40>
	{
		/*Do Nothing*/
	}
	else
	{
		ErrorState=NOK;
    1950:	19 82       	std	Y+1, r1	; 0x01
	}
	return ErrorState;
    1952:	89 81       	ldd	r24, Y+1	; 0x01
}
    1954:	0f 90       	pop	r0
    1956:	cf 91       	pop	r28
    1958:	df 91       	pop	r29
    195a:	08 95       	ret

0000195c <TWI_voidStopCondtion>:
void TWI_voidStopCondtion(void)
{
    195c:	df 93       	push	r29
    195e:	cf 93       	push	r28
    1960:	cd b7       	in	r28, 0x3d	; 61
    1962:	de b7       	in	r29, 0x3e	; 62
	/*SET Stop Condition Bit*/
	SET_BIT(TWCR,4);
    1964:	a6 e5       	ldi	r26, 0x56	; 86
    1966:	b0 e0       	ldi	r27, 0x00	; 0
    1968:	e6 e5       	ldi	r30, 0x56	; 86
    196a:	f0 e0       	ldi	r31, 0x00	; 0
    196c:	80 81       	ld	r24, Z
    196e:	80 61       	ori	r24, 0x10	; 16
    1970:	8c 93       	st	X, r24

	/*Clear TWINT Flag*/
	SET_BIT(TWCR,7);
    1972:	a6 e5       	ldi	r26, 0x56	; 86
    1974:	b0 e0       	ldi	r27, 0x00	; 0
    1976:	e6 e5       	ldi	r30, 0x56	; 86
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 81       	ld	r24, Z
    197c:	80 68       	ori	r24, 0x80	; 128
    197e:	8c 93       	st	X, r24
}
    1980:	cf 91       	pop	r28
    1982:	df 91       	pop	r29
    1984:	08 95       	ret

00001986 <main>:
#include <util/delay.h>
#include <avr/io.h>
#include <avr/eeprom.h>

int main()
{
    1986:	0f 93       	push	r16
    1988:	1f 93       	push	r17
    198a:	df 93       	push	r29
    198c:	cf 93       	push	r28
    198e:	cd b7       	in	r28, 0x3d	; 61
    1990:	de b7       	in	r29, 0x3e	; 62
    1992:	ce 5c       	subi	r28, 0xCE	; 206
    1994:	d0 40       	sbci	r29, 0x00	; 0
    1996:	0f b6       	in	r0, 0x3f	; 63
    1998:	f8 94       	cli
    199a:	de bf       	out	0x3e, r29	; 62
    199c:	0f be       	out	0x3f, r0	; 63
    199e:	cd bf       	out	0x3d, r28	; 61
	u8 Flag_Heating_Mode=0;
    19a0:	fe 01       	movw	r30, r28
    19a2:	e1 54       	subi	r30, 0x41	; 65
    19a4:	ff 4f       	sbci	r31, 0xFF	; 255
    19a6:	10 82       	st	Z, r1
	u8 Flag_Heater_ON=0;
    19a8:	fe 01       	movw	r30, r28
    19aa:	e2 54       	subi	r30, 0x42	; 66
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	10 82       	st	Z, r1
	u8 Temps_Readings[10] = {60,0,0,0,0,0,0,0,0,0};
    19b0:	ce 01       	movw	r24, r28
    19b2:	80 54       	subi	r24, 0x40	; 64
    19b4:	9f 4f       	sbci	r25, 0xFF	; 255
    19b6:	2a e0       	ldi	r18, 0x0A	; 10
    19b8:	fc 01       	movw	r30, r24
    19ba:	df 01       	movw	r26, r30
    19bc:	42 2f       	mov	r20, r18
    19be:	1d 92       	st	X+, r1
    19c0:	4a 95       	dec	r20
    19c2:	e9 f7       	brne	.-6      	; 0x19be <main+0x38>
    19c4:	fe 01       	movw	r30, r28
    19c6:	e0 54       	subi	r30, 0x40	; 64
    19c8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ca:	8c e3       	ldi	r24, 0x3C	; 60
    19cc:	80 83       	st	Z, r24
	u8 *i=&Temps_Readings[0];
    19ce:	fe 01       	movw	r30, r28
    19d0:	e4 54       	subi	r30, 0x44	; 68
    19d2:	ff 4f       	sbci	r31, 0xFF	; 255
    19d4:	ce 01       	movw	r24, r28
    19d6:	80 54       	subi	r24, 0x40	; 64
    19d8:	9f 4f       	sbci	r25, 0xFF	; 255
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
	u8 j=0;
    19de:	fe 01       	movw	r30, r28
    19e0:	e5 54       	subi	r30, 0x45	; 69
    19e2:	ff 4f       	sbci	r31, 0xFF	; 255
    19e4:	10 82       	st	Z, r1
	u8 k=0;
    19e6:	fe 01       	movw	r30, r28
    19e8:	e6 54       	subi	r30, 0x46	; 70
    19ea:	ff 4f       	sbci	r31, 0xFF	; 255
    19ec:	10 82       	st	Z, r1
	u8 PinState1;
	u8 PinState2;
	u8 PinState3;
	u8 DigitalValue=0;
    19ee:	fe 01       	movw	r30, r28
    19f0:	e7 54       	subi	r30, 0x47	; 71
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	10 82       	st	Z, r1
	u8 AnalogValue=0;
    19f6:	fe 01       	movw	r30, r28
    19f8:	e8 54       	subi	r30, 0x48	; 72
    19fa:	ff 4f       	sbci	r31, 0xFF	; 255
    19fc:	10 82       	st	Z, r1
	u8 Copy_u16DigitalValue=0;
    19fe:	fe 01       	movw	r30, r28
    1a00:	e9 54       	subi	r30, 0x49	; 73
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	10 82       	st	Z, r1
	//u8 Local_ReceiveDataByte;
	//i = Local_ReceiveDataByte;

	DIO_u8SetPinDirection(PIN0,DIO_PORTB,PIN_INPUT); // B0: ON/OFF BUTTON
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	61 e0       	ldi	r22, 0x01	; 1
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN6,DIO_PORTD,PIN_INPUT); // B1: UP BUTTON
    1a10:	86 e0       	ldi	r24, 0x06	; 6
    1a12:	63 e0       	ldi	r22, 0x03	; 3
    1a14:	40 e0       	ldi	r20, 0x00	; 0
    1a16:	0e 94 62 06 	call	0xcc4	; 0xcc4 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN2,DIO_PORTD,PIN_INPUT); // B2: DOWN BUTTON
    1a1a:	82 e0       	ldi	r24, 0x02	; 2
    1a1c:	63 e0       	ldi	r22, 0x03	; 3
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	0e 94 62 06 	call	0xcc4	; 0xcc4 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(PIN7,DIO_PORTC,PIN_OUTPUT); // LED1: LED (HEATING/COOLING)
    1a24:	87 e0       	ldi	r24, 0x07	; 7
    1a26:	62 e0       	ldi	r22, 0x02	; 2
    1a28:	41 e0       	ldi	r20, 0x01	; 1
    1a2a:	0e 94 62 06 	call	0xcc4	; 0xcc4 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(PIN4,DIO_PORTA,PIN_OUTPUT); // SETTING UP 7-SEGMENT HERE & NEXT 7 LINES
    1a2e:	84 e0       	ldi	r24, 0x04	; 4
    1a30:	60 e0       	ldi	r22, 0x00	; 0
    1a32:	41 e0       	ldi	r20, 0x01	; 1
    1a34:	0e 94 62 06 	call	0xcc4	; 0xcc4 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN5,DIO_PORTA,PIN_OUTPUT);
    1a38:	85 e0       	ldi	r24, 0x05	; 5
    1a3a:	60 e0       	ldi	r22, 0x00	; 0
    1a3c:	41 e0       	ldi	r20, 0x01	; 1
    1a3e:	0e 94 62 06 	call	0xcc4	; 0xcc4 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN6,DIO_PORTA,PIN_OUTPUT);
    1a42:	86 e0       	ldi	r24, 0x06	; 6
    1a44:	60 e0       	ldi	r22, 0x00	; 0
    1a46:	41 e0       	ldi	r20, 0x01	; 1
    1a48:	0e 94 62 06 	call	0xcc4	; 0xcc4 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN7,DIO_PORTA,PIN_OUTPUT);
    1a4c:	87 e0       	ldi	r24, 0x07	; 7
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	41 e0       	ldi	r20, 0x01	; 1
    1a52:	0e 94 62 06 	call	0xcc4	; 0xcc4 <DIO_u8SetPinDirection>

	DIO_u8SetPinDirection(PIN1,DIO_PORTB,PIN_OUTPUT);
    1a56:	81 e0       	ldi	r24, 0x01	; 1
    1a58:	61 e0       	ldi	r22, 0x01	; 1
    1a5a:	41 e0       	ldi	r20, 0x01	; 1
    1a5c:	0e 94 62 06 	call	0xcc4	; 0xcc4 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(PIN2,DIO_PORTB,PIN_OUTPUT);
    1a60:	82 e0       	ldi	r24, 0x02	; 2
    1a62:	61 e0       	ldi	r22, 0x01	; 1
    1a64:	41 e0       	ldi	r20, 0x01	; 1
    1a66:	0e 94 62 06 	call	0xcc4	; 0xcc4 <DIO_u8SetPinDirection>

	DIO_u8SetPinValue(PIN1,DIO_PORTB,HIGH);
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	61 e0       	ldi	r22, 0x01	; 1
    1a6e:	41 e0       	ldi	r20, 0x01	; 1
    1a70:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
	DIO_u8SetPinValue(PIN2,DIO_PORTB,HIGH);
    1a74:	82 e0       	ldi	r24, 0x02	; 2
    1a76:	61 e0       	ldi	r22, 0x01	; 1
    1a78:	41 e0       	ldi	r20, 0x01	; 1
    1a7a:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>

	ADC_voidInit();
    1a7e:	0e 94 a3 05 	call	0xb46	; 0xb46 <ADC_voidInit>

//	TWI_voidInitMaster(16);

	DIO_u8Set4MSB_BitsValue(DIO_PORTA,HIGH); // SHIFT PORTA BY 4 (7-SEGMENT)
    1a82:	80 e0       	ldi	r24, 0x00	; 0
    1a84:	61 e0       	ldi	r22, 0x01	; 1
    1a86:	0e 94 ba 09 	call	0x1374	; 0x1374 <DIO_u8Set4MSB_BitsValue>
    1a8a:	fe 01       	movw	r30, r28
    1a8c:	ed 54       	subi	r30, 0x4D	; 77
    1a8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	aa e7       	ldi	r26, 0x7A	; 122
    1a96:	b4 e4       	ldi	r27, 0x44	; 68
    1a98:	80 83       	st	Z, r24
    1a9a:	91 83       	std	Z+1, r25	; 0x01
    1a9c:	a2 83       	std	Z+2, r26	; 0x02
    1a9e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa0:	8e 01       	movw	r16, r28
    1aa2:	01 55       	subi	r16, 0x51	; 81
    1aa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1aa6:	fe 01       	movw	r30, r28
    1aa8:	ed 54       	subi	r30, 0x4D	; 77
    1aaa:	ff 4f       	sbci	r31, 0xFF	; 255
    1aac:	60 81       	ld	r22, Z
    1aae:	71 81       	ldd	r23, Z+1	; 0x01
    1ab0:	82 81       	ldd	r24, Z+2	; 0x02
    1ab2:	93 81       	ldd	r25, Z+3	; 0x03
    1ab4:	20 e0       	ldi	r18, 0x00	; 0
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	4a e7       	ldi	r20, 0x7A	; 122
    1aba:	55 e4       	ldi	r21, 0x45	; 69
    1abc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ac0:	dc 01       	movw	r26, r24
    1ac2:	cb 01       	movw	r24, r22
    1ac4:	f8 01       	movw	r30, r16
    1ac6:	80 83       	st	Z, r24
    1ac8:	91 83       	std	Z+1, r25	; 0x01
    1aca:	a2 83       	std	Z+2, r26	; 0x02
    1acc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ace:	fe 01       	movw	r30, r28
    1ad0:	e1 55       	subi	r30, 0x51	; 81
    1ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad4:	60 81       	ld	r22, Z
    1ad6:	71 81       	ldd	r23, Z+1	; 0x01
    1ad8:	82 81       	ldd	r24, Z+2	; 0x02
    1ada:	93 81       	ldd	r25, Z+3	; 0x03
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e8       	ldi	r20, 0x80	; 128
    1ae2:	5f e3       	ldi	r21, 0x3F	; 63
    1ae4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ae8:	88 23       	and	r24, r24
    1aea:	44 f4       	brge	.+16     	; 0x1afc <main+0x176>
		__ticks = 1;
    1aec:	fe 01       	movw	r30, r28
    1aee:	e3 55       	subi	r30, 0x53	; 83
    1af0:	ff 4f       	sbci	r31, 0xFF	; 255
    1af2:	81 e0       	ldi	r24, 0x01	; 1
    1af4:	90 e0       	ldi	r25, 0x00	; 0
    1af6:	91 83       	std	Z+1, r25	; 0x01
    1af8:	80 83       	st	Z, r24
    1afa:	64 c0       	rjmp	.+200    	; 0x1bc4 <main+0x23e>
	else if (__tmp > 65535)
    1afc:	fe 01       	movw	r30, r28
    1afe:	e1 55       	subi	r30, 0x51	; 81
    1b00:	ff 4f       	sbci	r31, 0xFF	; 255
    1b02:	60 81       	ld	r22, Z
    1b04:	71 81       	ldd	r23, Z+1	; 0x01
    1b06:	82 81       	ldd	r24, Z+2	; 0x02
    1b08:	93 81       	ldd	r25, Z+3	; 0x03
    1b0a:	20 e0       	ldi	r18, 0x00	; 0
    1b0c:	3f ef       	ldi	r19, 0xFF	; 255
    1b0e:	4f e7       	ldi	r20, 0x7F	; 127
    1b10:	57 e4       	ldi	r21, 0x47	; 71
    1b12:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1b16:	18 16       	cp	r1, r24
    1b18:	0c f0       	brlt	.+2      	; 0x1b1c <main+0x196>
    1b1a:	43 c0       	rjmp	.+134    	; 0x1ba2 <main+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	ed 54       	subi	r30, 0x4D	; 77
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	60 81       	ld	r22, Z
    1b24:	71 81       	ldd	r23, Z+1	; 0x01
    1b26:	82 81       	ldd	r24, Z+2	; 0x02
    1b28:	93 81       	ldd	r25, Z+3	; 0x03
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	40 e2       	ldi	r20, 0x20	; 32
    1b30:	51 e4       	ldi	r21, 0x41	; 65
    1b32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b36:	dc 01       	movw	r26, r24
    1b38:	cb 01       	movw	r24, r22
    1b3a:	8e 01       	movw	r16, r28
    1b3c:	03 55       	subi	r16, 0x53	; 83
    1b3e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b40:	bc 01       	movw	r22, r24
    1b42:	cd 01       	movw	r24, r26
    1b44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b48:	dc 01       	movw	r26, r24
    1b4a:	cb 01       	movw	r24, r22
    1b4c:	f8 01       	movw	r30, r16
    1b4e:	91 83       	std	Z+1, r25	; 0x01
    1b50:	80 83       	st	Z, r24
    1b52:	1f c0       	rjmp	.+62     	; 0x1b92 <main+0x20c>
    1b54:	fe 01       	movw	r30, r28
    1b56:	e5 55       	subi	r30, 0x55	; 85
    1b58:	ff 4f       	sbci	r31, 0xFF	; 255
    1b5a:	80 e9       	ldi	r24, 0x90	; 144
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	91 83       	std	Z+1, r25	; 0x01
    1b60:	80 83       	st	Z, r24
    1b62:	fe 01       	movw	r30, r28
    1b64:	e5 55       	subi	r30, 0x55	; 85
    1b66:	ff 4f       	sbci	r31, 0xFF	; 255
    1b68:	80 81       	ld	r24, Z
    1b6a:	91 81       	ldd	r25, Z+1	; 0x01
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <main+0x1e6>
    1b70:	fe 01       	movw	r30, r28
    1b72:	e5 55       	subi	r30, 0x55	; 85
    1b74:	ff 4f       	sbci	r31, 0xFF	; 255
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b7a:	de 01       	movw	r26, r28
    1b7c:	a3 55       	subi	r26, 0x53	; 83
    1b7e:	bf 4f       	sbci	r27, 0xFF	; 255
    1b80:	fe 01       	movw	r30, r28
    1b82:	e3 55       	subi	r30, 0x53	; 83
    1b84:	ff 4f       	sbci	r31, 0xFF	; 255
    1b86:	80 81       	ld	r24, Z
    1b88:	91 81       	ldd	r25, Z+1	; 0x01
    1b8a:	01 97       	sbiw	r24, 0x01	; 1
    1b8c:	11 96       	adiw	r26, 0x01	; 1
    1b8e:	9c 93       	st	X, r25
    1b90:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b92:	fe 01       	movw	r30, r28
    1b94:	e3 55       	subi	r30, 0x53	; 83
    1b96:	ff 4f       	sbci	r31, 0xFF	; 255
    1b98:	80 81       	ld	r24, Z
    1b9a:	91 81       	ldd	r25, Z+1	; 0x01
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	d1 f6       	brne	.-76     	; 0x1b54 <main+0x1ce>
    1ba0:	27 c0       	rjmp	.+78     	; 0x1bf0 <main+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ba2:	8e 01       	movw	r16, r28
    1ba4:	03 55       	subi	r16, 0x53	; 83
    1ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba8:	fe 01       	movw	r30, r28
    1baa:	e1 55       	subi	r30, 0x51	; 81
    1bac:	ff 4f       	sbci	r31, 0xFF	; 255
    1bae:	60 81       	ld	r22, Z
    1bb0:	71 81       	ldd	r23, Z+1	; 0x01
    1bb2:	82 81       	ldd	r24, Z+2	; 0x02
    1bb4:	93 81       	ldd	r25, Z+3	; 0x03
    1bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	f8 01       	movw	r30, r16
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	80 83       	st	Z, r24
    1bc4:	de 01       	movw	r26, r28
    1bc6:	a7 55       	subi	r26, 0x57	; 87
    1bc8:	bf 4f       	sbci	r27, 0xFF	; 255
    1bca:	fe 01       	movw	r30, r28
    1bcc:	e3 55       	subi	r30, 0x53	; 83
    1bce:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd0:	80 81       	ld	r24, Z
    1bd2:	91 81       	ldd	r25, Z+1	; 0x01
    1bd4:	8d 93       	st	X+, r24
    1bd6:	9c 93       	st	X, r25
    1bd8:	fe 01       	movw	r30, r28
    1bda:	e7 55       	subi	r30, 0x57	; 87
    1bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1bde:	80 81       	ld	r24, Z
    1be0:	91 81       	ldd	r25, Z+1	; 0x01
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	f1 f7       	brne	.-4      	; 0x1be2 <main+0x25c>
    1be6:	fe 01       	movw	r30, r28
    1be8:	e7 55       	subi	r30, 0x57	; 87
    1bea:	ff 4f       	sbci	r31, 0xFF	; 255
    1bec:	91 83       	std	Z+1, r25	; 0x01
    1bee:	80 83       	st	Z, r24
	_delay_ms(1000);

	while(1)
	{
		ADC_voidStartConversion(1); 	// S1: TEMPRATURE SENSOR @ PORTA PIN1
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	0e 94 0c 06 	call	0xc18	; 0xc18 <ADC_voidStartConversion>

		DigitalValue = ADC_u16ReadDigitalValue();
    1bf6:	0e 94 57 06 	call	0xcae	; 0xcae <ADC_u16ReadDigitalValue>
    1bfa:	fe 01       	movw	r30, r28
    1bfc:	e7 54       	subi	r30, 0x47	; 71
    1bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    1c00:	80 83       	st	Z, r24
		if(DigitalValue != Copy_u16DigitalValue)
    1c02:	fe 01       	movw	r30, r28
    1c04:	e7 54       	subi	r30, 0x47	; 71
    1c06:	ff 4f       	sbci	r31, 0xFF	; 255
    1c08:	de 01       	movw	r26, r28
    1c0a:	a9 54       	subi	r26, 0x49	; 73
    1c0c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c0e:	90 81       	ld	r25, Z
    1c10:	8c 91       	ld	r24, X
    1c12:	98 17       	cp	r25, r24
    1c14:	09 f4       	brne	.+2      	; 0x1c18 <main+0x292>
    1c16:	11 c1       	rjmp	.+546    	; 0x1e3a <main+0x4b4>
		{
			AnalogValue = (DigitalValue*5000)/1024;
    1c18:	fe 01       	movw	r30, r28
    1c1a:	e7 54       	subi	r30, 0x47	; 71
    1c1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1c1e:	80 81       	ld	r24, Z
    1c20:	28 2f       	mov	r18, r24
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	88 e8       	ldi	r24, 0x88	; 136
    1c26:	93 e1       	ldi	r25, 0x13	; 19
    1c28:	ac 01       	movw	r20, r24
    1c2a:	24 9f       	mul	r18, r20
    1c2c:	c0 01       	movw	r24, r0
    1c2e:	25 9f       	mul	r18, r21
    1c30:	90 0d       	add	r25, r0
    1c32:	34 9f       	mul	r19, r20
    1c34:	90 0d       	add	r25, r0
    1c36:	11 24       	eor	r1, r1
    1c38:	c3 53       	subi	r28, 0x33	; 51
    1c3a:	df 4f       	sbci	r29, 0xFF	; 255
    1c3c:	99 83       	std	Y+1, r25	; 0x01
    1c3e:	88 83       	st	Y, r24
    1c40:	cd 5c       	subi	r28, 0xCD	; 205
    1c42:	d0 40       	sbci	r29, 0x00	; 0
    1c44:	c3 53       	subi	r28, 0x33	; 51
    1c46:	df 4f       	sbci	r29, 0xFF	; 255
    1c48:	88 81       	ld	r24, Y
    1c4a:	99 81       	ldd	r25, Y+1	; 0x01
    1c4c:	cd 5c       	subi	r28, 0xCD	; 205
    1c4e:	d0 40       	sbci	r29, 0x00	; 0
    1c50:	99 23       	and	r25, r25
    1c52:	74 f4       	brge	.+28     	; 0x1c70 <main+0x2ea>
    1c54:	c3 53       	subi	r28, 0x33	; 51
    1c56:	df 4f       	sbci	r29, 0xFF	; 255
    1c58:	a8 81       	ld	r26, Y
    1c5a:	b9 81       	ldd	r27, Y+1	; 0x01
    1c5c:	cd 5c       	subi	r28, 0xCD	; 205
    1c5e:	d0 40       	sbci	r29, 0x00	; 0
    1c60:	a1 50       	subi	r26, 0x01	; 1
    1c62:	bc 4f       	sbci	r27, 0xFC	; 252
    1c64:	c3 53       	subi	r28, 0x33	; 51
    1c66:	df 4f       	sbci	r29, 0xFF	; 255
    1c68:	b9 83       	std	Y+1, r27	; 0x01
    1c6a:	a8 83       	st	Y, r26
    1c6c:	cd 5c       	subi	r28, 0xCD	; 205
    1c6e:	d0 40       	sbci	r29, 0x00	; 0
    1c70:	c3 53       	subi	r28, 0x33	; 51
    1c72:	df 4f       	sbci	r29, 0xFF	; 255
    1c74:	88 81       	ld	r24, Y
    1c76:	99 81       	ldd	r25, Y+1	; 0x01
    1c78:	cd 5c       	subi	r28, 0xCD	; 205
    1c7a:	d0 40       	sbci	r29, 0x00	; 0
    1c7c:	89 2f       	mov	r24, r25
    1c7e:	99 0f       	add	r25, r25
    1c80:	99 0b       	sbc	r25, r25
    1c82:	85 95       	asr	r24
    1c84:	85 95       	asr	r24
    1c86:	fe 01       	movw	r30, r28
    1c88:	e8 54       	subi	r30, 0x48	; 72
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 83       	st	Z, r24
			Copy_u16DigitalValue = DigitalValue;
    1c8e:	de 01       	movw	r26, r28
    1c90:	a9 54       	subi	r26, 0x49	; 73
    1c92:	bf 4f       	sbci	r27, 0xFF	; 255
    1c94:	fe 01       	movw	r30, r28
    1c96:	e7 54       	subi	r30, 0x47	; 71
    1c98:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9a:	80 81       	ld	r24, Z
    1c9c:	8c 93       	st	X, r24

			if(Avg_Calc(10,&Temps_Readings[0]) == 35)
    1c9e:	9e 01       	movw	r18, r28
    1ca0:	20 54       	subi	r18, 0x40	; 64
    1ca2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ca4:	8a e0       	ldi	r24, 0x0A	; 10
    1ca6:	b9 01       	movw	r22, r18
    1ca8:	0e 94 35 0b 	call	0x166a	; 0x166a <Avg_Calc>
    1cac:	83 32       	cpi	r24, 0x23	; 35
    1cae:	29 f4       	brne	.+10     	; 0x1cba <main+0x334>
			{
				Flag_Heater_ON = 1;
    1cb0:	fe 01       	movw	r30, r28
    1cb2:	e2 54       	subi	r30, 0x42	; 66
    1cb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	80 83       	st	Z, r24
			}
			if(Avg_Calc(10,&Temps_Readings[0]) == 75)
    1cba:	9e 01       	movw	r18, r28
    1cbc:	20 54       	subi	r18, 0x40	; 64
    1cbe:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc0:	8a e0       	ldi	r24, 0x0A	; 10
    1cc2:	b9 01       	movw	r22, r18
    1cc4:	0e 94 35 0b 	call	0x166a	; 0x166a <Avg_Calc>
    1cc8:	8b 34       	cpi	r24, 0x4B	; 75
    1cca:	21 f4       	brne	.+8      	; 0x1cd4 <main+0x34e>
			{
				Flag_Heater_ON = 0;
    1ccc:	fe 01       	movw	r30, r28
    1cce:	e2 54       	subi	r30, 0x42	; 66
    1cd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd2:	10 82       	st	Z, r1
    1cd4:	fe 01       	movw	r30, r28
    1cd6:	eb 55       	subi	r30, 0x5B	; 91
    1cd8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cda:	80 e0       	ldi	r24, 0x00	; 0
    1cdc:	90 e0       	ldi	r25, 0x00	; 0
    1cde:	a8 ec       	ldi	r26, 0xC8	; 200
    1ce0:	b2 e4       	ldi	r27, 0x42	; 66
    1ce2:	80 83       	st	Z, r24
    1ce4:	91 83       	std	Z+1, r25	; 0x01
    1ce6:	a2 83       	std	Z+2, r26	; 0x02
    1ce8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cea:	8e 01       	movw	r16, r28
    1cec:	0f 55       	subi	r16, 0x5F	; 95
    1cee:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf0:	fe 01       	movw	r30, r28
    1cf2:	eb 55       	subi	r30, 0x5B	; 91
    1cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf6:	60 81       	ld	r22, Z
    1cf8:	71 81       	ldd	r23, Z+1	; 0x01
    1cfa:	82 81       	ldd	r24, Z+2	; 0x02
    1cfc:	93 81       	ldd	r25, Z+3	; 0x03
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	4a e7       	ldi	r20, 0x7A	; 122
    1d04:	55 e4       	ldi	r21, 0x45	; 69
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	f8 01       	movw	r30, r16
    1d10:	80 83       	st	Z, r24
    1d12:	91 83       	std	Z+1, r25	; 0x01
    1d14:	a2 83       	std	Z+2, r26	; 0x02
    1d16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d18:	fe 01       	movw	r30, r28
    1d1a:	ef 55       	subi	r30, 0x5F	; 95
    1d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1e:	60 81       	ld	r22, Z
    1d20:	71 81       	ldd	r23, Z+1	; 0x01
    1d22:	82 81       	ldd	r24, Z+2	; 0x02
    1d24:	93 81       	ldd	r25, Z+3	; 0x03
    1d26:	20 e0       	ldi	r18, 0x00	; 0
    1d28:	30 e0       	ldi	r19, 0x00	; 0
    1d2a:	40 e8       	ldi	r20, 0x80	; 128
    1d2c:	5f e3       	ldi	r21, 0x3F	; 63
    1d2e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d32:	88 23       	and	r24, r24
    1d34:	44 f4       	brge	.+16     	; 0x1d46 <main+0x3c0>
		__ticks = 1;
    1d36:	fe 01       	movw	r30, r28
    1d38:	e1 56       	subi	r30, 0x61	; 97
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	90 e0       	ldi	r25, 0x00	; 0
    1d40:	91 83       	std	Z+1, r25	; 0x01
    1d42:	80 83       	st	Z, r24
    1d44:	64 c0       	rjmp	.+200    	; 0x1e0e <main+0x488>
	else if (__tmp > 65535)
    1d46:	fe 01       	movw	r30, r28
    1d48:	ef 55       	subi	r30, 0x5F	; 95
    1d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4c:	60 81       	ld	r22, Z
    1d4e:	71 81       	ldd	r23, Z+1	; 0x01
    1d50:	82 81       	ldd	r24, Z+2	; 0x02
    1d52:	93 81       	ldd	r25, Z+3	; 0x03
    1d54:	20 e0       	ldi	r18, 0x00	; 0
    1d56:	3f ef       	ldi	r19, 0xFF	; 255
    1d58:	4f e7       	ldi	r20, 0x7F	; 127
    1d5a:	57 e4       	ldi	r21, 0x47	; 71
    1d5c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d60:	18 16       	cp	r1, r24
    1d62:	0c f0       	brlt	.+2      	; 0x1d66 <main+0x3e0>
    1d64:	43 c0       	rjmp	.+134    	; 0x1dec <main+0x466>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d66:	fe 01       	movw	r30, r28
    1d68:	eb 55       	subi	r30, 0x5B	; 91
    1d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6c:	60 81       	ld	r22, Z
    1d6e:	71 81       	ldd	r23, Z+1	; 0x01
    1d70:	82 81       	ldd	r24, Z+2	; 0x02
    1d72:	93 81       	ldd	r25, Z+3	; 0x03
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	40 e2       	ldi	r20, 0x20	; 32
    1d7a:	51 e4       	ldi	r21, 0x41	; 65
    1d7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d80:	dc 01       	movw	r26, r24
    1d82:	cb 01       	movw	r24, r22
    1d84:	8e 01       	movw	r16, r28
    1d86:	01 56       	subi	r16, 0x61	; 97
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	bc 01       	movw	r22, r24
    1d8c:	cd 01       	movw	r24, r26
    1d8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	f8 01       	movw	r30, r16
    1d98:	91 83       	std	Z+1, r25	; 0x01
    1d9a:	80 83       	st	Z, r24
    1d9c:	1f c0       	rjmp	.+62     	; 0x1ddc <main+0x456>
    1d9e:	fe 01       	movw	r30, r28
    1da0:	e3 56       	subi	r30, 0x63	; 99
    1da2:	ff 4f       	sbci	r31, 0xFF	; 255
    1da4:	80 e9       	ldi	r24, 0x90	; 144
    1da6:	91 e0       	ldi	r25, 0x01	; 1
    1da8:	91 83       	std	Z+1, r25	; 0x01
    1daa:	80 83       	st	Z, r24
    1dac:	fe 01       	movw	r30, r28
    1dae:	e3 56       	subi	r30, 0x63	; 99
    1db0:	ff 4f       	sbci	r31, 0xFF	; 255
    1db2:	80 81       	ld	r24, Z
    1db4:	91 81       	ldd	r25, Z+1	; 0x01
    1db6:	01 97       	sbiw	r24, 0x01	; 1
    1db8:	f1 f7       	brne	.-4      	; 0x1db6 <main+0x430>
    1dba:	fe 01       	movw	r30, r28
    1dbc:	e3 56       	subi	r30, 0x63	; 99
    1dbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc0:	91 83       	std	Z+1, r25	; 0x01
    1dc2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc4:	de 01       	movw	r26, r28
    1dc6:	a1 56       	subi	r26, 0x61	; 97
    1dc8:	bf 4f       	sbci	r27, 0xFF	; 255
    1dca:	fe 01       	movw	r30, r28
    1dcc:	e1 56       	subi	r30, 0x61	; 97
    1dce:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd0:	80 81       	ld	r24, Z
    1dd2:	91 81       	ldd	r25, Z+1	; 0x01
    1dd4:	01 97       	sbiw	r24, 0x01	; 1
    1dd6:	11 96       	adiw	r26, 0x01	; 1
    1dd8:	9c 93       	st	X, r25
    1dda:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ddc:	fe 01       	movw	r30, r28
    1dde:	e1 56       	subi	r30, 0x61	; 97
    1de0:	ff 4f       	sbci	r31, 0xFF	; 255
    1de2:	80 81       	ld	r24, Z
    1de4:	91 81       	ldd	r25, Z+1	; 0x01
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	d1 f6       	brne	.-76     	; 0x1d9e <main+0x418>
    1dea:	27 c0       	rjmp	.+78     	; 0x1e3a <main+0x4b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dec:	8e 01       	movw	r16, r28
    1dee:	01 56       	subi	r16, 0x61	; 97
    1df0:	1f 4f       	sbci	r17, 0xFF	; 255
    1df2:	fe 01       	movw	r30, r28
    1df4:	ef 55       	subi	r30, 0x5F	; 95
    1df6:	ff 4f       	sbci	r31, 0xFF	; 255
    1df8:	60 81       	ld	r22, Z
    1dfa:	71 81       	ldd	r23, Z+1	; 0x01
    1dfc:	82 81       	ldd	r24, Z+2	; 0x02
    1dfe:	93 81       	ldd	r25, Z+3	; 0x03
    1e00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e04:	dc 01       	movw	r26, r24
    1e06:	cb 01       	movw	r24, r22
    1e08:	f8 01       	movw	r30, r16
    1e0a:	91 83       	std	Z+1, r25	; 0x01
    1e0c:	80 83       	st	Z, r24
    1e0e:	de 01       	movw	r26, r28
    1e10:	a5 56       	subi	r26, 0x65	; 101
    1e12:	bf 4f       	sbci	r27, 0xFF	; 255
    1e14:	fe 01       	movw	r30, r28
    1e16:	e1 56       	subi	r30, 0x61	; 97
    1e18:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1a:	80 81       	ld	r24, Z
    1e1c:	91 81       	ldd	r25, Z+1	; 0x01
    1e1e:	8d 93       	st	X+, r24
    1e20:	9c 93       	st	X, r25
    1e22:	fe 01       	movw	r30, r28
    1e24:	e5 56       	subi	r30, 0x65	; 101
    1e26:	ff 4f       	sbci	r31, 0xFF	; 255
    1e28:	80 81       	ld	r24, Z
    1e2a:	91 81       	ldd	r25, Z+1	; 0x01
    1e2c:	01 97       	sbiw	r24, 0x01	; 1
    1e2e:	f1 f7       	brne	.-4      	; 0x1e2c <main+0x4a6>
    1e30:	fe 01       	movw	r30, r28
    1e32:	e5 56       	subi	r30, 0x65	; 101
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
    1e36:	91 83       	std	Z+1, r25	; 0x01
    1e38:	80 83       	st	Z, r24
			}
			_delay_ms(100);
		}
// -----------------------------------------------------------------------------------------------
		if(DIO_u8GetPinValue(PIN6,DIO_PORTD,&PinState1)==1 && (AnalogValue>=35) && (AnalogValue<=75)) // UP B1
    1e3a:	9e 01       	movw	r18, r28
    1e3c:	26 53       	subi	r18, 0x36	; 54
    1e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1e40:	86 e0       	ldi	r24, 0x06	; 6
    1e42:	63 e0       	ldi	r22, 0x03	; 3
    1e44:	a9 01       	movw	r20, r18
    1e46:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8GetPinValue>
    1e4a:	81 30       	cpi	r24, 0x01	; 1
    1e4c:	09 f0       	breq	.+2      	; 0x1e50 <main+0x4ca>
    1e4e:	d5 c4       	rjmp	.+2474   	; 0x27fa <main+0xe74>
    1e50:	fe 01       	movw	r30, r28
    1e52:	e8 54       	subi	r30, 0x48	; 72
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	80 81       	ld	r24, Z
    1e58:	83 32       	cpi	r24, 0x23	; 35
    1e5a:	08 f4       	brcc	.+2      	; 0x1e5e <main+0x4d8>
    1e5c:	ce c4       	rjmp	.+2460   	; 0x27fa <main+0xe74>
    1e5e:	fe 01       	movw	r30, r28
    1e60:	e8 54       	subi	r30, 0x48	; 72
    1e62:	ff 4f       	sbci	r31, 0xFF	; 255
    1e64:	80 81       	ld	r24, Z
    1e66:	8c 34       	cpi	r24, 0x4C	; 76
    1e68:	08 f0       	brcs	.+2      	; 0x1e6c <main+0x4e6>
    1e6a:	c7 c4       	rjmp	.+2446   	; 0x27fa <main+0xe74>
    1e6c:	fe 01       	movw	r30, r28
    1e6e:	e9 56       	subi	r30, 0x69	; 105
    1e70:	ff 4f       	sbci	r31, 0xFF	; 255
    1e72:	80 e0       	ldi	r24, 0x00	; 0
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	a8 e4       	ldi	r26, 0x48	; 72
    1e78:	b2 e4       	ldi	r27, 0x42	; 66
    1e7a:	80 83       	st	Z, r24
    1e7c:	91 83       	std	Z+1, r25	; 0x01
    1e7e:	a2 83       	std	Z+2, r26	; 0x02
    1e80:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e82:	8e 01       	movw	r16, r28
    1e84:	0d 56       	subi	r16, 0x6D	; 109
    1e86:	1f 4f       	sbci	r17, 0xFF	; 255
    1e88:	fe 01       	movw	r30, r28
    1e8a:	e9 56       	subi	r30, 0x69	; 105
    1e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e8e:	60 81       	ld	r22, Z
    1e90:	71 81       	ldd	r23, Z+1	; 0x01
    1e92:	82 81       	ldd	r24, Z+2	; 0x02
    1e94:	93 81       	ldd	r25, Z+3	; 0x03
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	30 e0       	ldi	r19, 0x00	; 0
    1e9a:	4a e7       	ldi	r20, 0x7A	; 122
    1e9c:	55 e4       	ldi	r21, 0x45	; 69
    1e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea2:	dc 01       	movw	r26, r24
    1ea4:	cb 01       	movw	r24, r22
    1ea6:	f8 01       	movw	r30, r16
    1ea8:	80 83       	st	Z, r24
    1eaa:	91 83       	std	Z+1, r25	; 0x01
    1eac:	a2 83       	std	Z+2, r26	; 0x02
    1eae:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1eb0:	fe 01       	movw	r30, r28
    1eb2:	ed 56       	subi	r30, 0x6D	; 109
    1eb4:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb6:	60 81       	ld	r22, Z
    1eb8:	71 81       	ldd	r23, Z+1	; 0x01
    1eba:	82 81       	ldd	r24, Z+2	; 0x02
    1ebc:	93 81       	ldd	r25, Z+3	; 0x03
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	40 e8       	ldi	r20, 0x80	; 128
    1ec4:	5f e3       	ldi	r21, 0x3F	; 63
    1ec6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eca:	88 23       	and	r24, r24
    1ecc:	44 f4       	brge	.+16     	; 0x1ede <main+0x558>
		__ticks = 1;
    1ece:	fe 01       	movw	r30, r28
    1ed0:	ef 56       	subi	r30, 0x6F	; 111
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	81 e0       	ldi	r24, 0x01	; 1
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	91 83       	std	Z+1, r25	; 0x01
    1eda:	80 83       	st	Z, r24
    1edc:	64 c0       	rjmp	.+200    	; 0x1fa6 <main+0x620>
	else if (__tmp > 65535)
    1ede:	fe 01       	movw	r30, r28
    1ee0:	ed 56       	subi	r30, 0x6D	; 109
    1ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee4:	60 81       	ld	r22, Z
    1ee6:	71 81       	ldd	r23, Z+1	; 0x01
    1ee8:	82 81       	ldd	r24, Z+2	; 0x02
    1eea:	93 81       	ldd	r25, Z+3	; 0x03
    1eec:	20 e0       	ldi	r18, 0x00	; 0
    1eee:	3f ef       	ldi	r19, 0xFF	; 255
    1ef0:	4f e7       	ldi	r20, 0x7F	; 127
    1ef2:	57 e4       	ldi	r21, 0x47	; 71
    1ef4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef8:	18 16       	cp	r1, r24
    1efa:	0c f0       	brlt	.+2      	; 0x1efe <main+0x578>
    1efc:	43 c0       	rjmp	.+134    	; 0x1f84 <main+0x5fe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1efe:	fe 01       	movw	r30, r28
    1f00:	e9 56       	subi	r30, 0x69	; 105
    1f02:	ff 4f       	sbci	r31, 0xFF	; 255
    1f04:	60 81       	ld	r22, Z
    1f06:	71 81       	ldd	r23, Z+1	; 0x01
    1f08:	82 81       	ldd	r24, Z+2	; 0x02
    1f0a:	93 81       	ldd	r25, Z+3	; 0x03
    1f0c:	20 e0       	ldi	r18, 0x00	; 0
    1f0e:	30 e0       	ldi	r19, 0x00	; 0
    1f10:	40 e2       	ldi	r20, 0x20	; 32
    1f12:	51 e4       	ldi	r21, 0x41	; 65
    1f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f18:	dc 01       	movw	r26, r24
    1f1a:	cb 01       	movw	r24, r22
    1f1c:	8e 01       	movw	r16, r28
    1f1e:	0f 56       	subi	r16, 0x6F	; 111
    1f20:	1f 4f       	sbci	r17, 0xFF	; 255
    1f22:	bc 01       	movw	r22, r24
    1f24:	cd 01       	movw	r24, r26
    1f26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	f8 01       	movw	r30, r16
    1f30:	91 83       	std	Z+1, r25	; 0x01
    1f32:	80 83       	st	Z, r24
    1f34:	1f c0       	rjmp	.+62     	; 0x1f74 <main+0x5ee>
    1f36:	fe 01       	movw	r30, r28
    1f38:	e1 57       	subi	r30, 0x71	; 113
    1f3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3c:	80 e9       	ldi	r24, 0x90	; 144
    1f3e:	91 e0       	ldi	r25, 0x01	; 1
    1f40:	91 83       	std	Z+1, r25	; 0x01
    1f42:	80 83       	st	Z, r24
    1f44:	fe 01       	movw	r30, r28
    1f46:	e1 57       	subi	r30, 0x71	; 113
    1f48:	ff 4f       	sbci	r31, 0xFF	; 255
    1f4a:	80 81       	ld	r24, Z
    1f4c:	91 81       	ldd	r25, Z+1	; 0x01
    1f4e:	01 97       	sbiw	r24, 0x01	; 1
    1f50:	f1 f7       	brne	.-4      	; 0x1f4e <main+0x5c8>
    1f52:	fe 01       	movw	r30, r28
    1f54:	e1 57       	subi	r30, 0x71	; 113
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	91 83       	std	Z+1, r25	; 0x01
    1f5a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f5c:	de 01       	movw	r26, r28
    1f5e:	af 56       	subi	r26, 0x6F	; 111
    1f60:	bf 4f       	sbci	r27, 0xFF	; 255
    1f62:	fe 01       	movw	r30, r28
    1f64:	ef 56       	subi	r30, 0x6F	; 111
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	80 81       	ld	r24, Z
    1f6a:	91 81       	ldd	r25, Z+1	; 0x01
    1f6c:	01 97       	sbiw	r24, 0x01	; 1
    1f6e:	11 96       	adiw	r26, 0x01	; 1
    1f70:	9c 93       	st	X, r25
    1f72:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f74:	fe 01       	movw	r30, r28
    1f76:	ef 56       	subi	r30, 0x6F	; 111
    1f78:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7a:	80 81       	ld	r24, Z
    1f7c:	91 81       	ldd	r25, Z+1	; 0x01
    1f7e:	00 97       	sbiw	r24, 0x00	; 0
    1f80:	d1 f6       	brne	.-76     	; 0x1f36 <main+0x5b0>
    1f82:	27 c0       	rjmp	.+78     	; 0x1fd2 <main+0x64c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f84:	8e 01       	movw	r16, r28
    1f86:	0f 56       	subi	r16, 0x6F	; 111
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	ed 56       	subi	r30, 0x6D	; 109
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	60 81       	ld	r22, Z
    1f92:	71 81       	ldd	r23, Z+1	; 0x01
    1f94:	82 81       	ldd	r24, Z+2	; 0x02
    1f96:	93 81       	ldd	r25, Z+3	; 0x03
    1f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	f8 01       	movw	r30, r16
    1fa2:	91 83       	std	Z+1, r25	; 0x01
    1fa4:	80 83       	st	Z, r24
    1fa6:	de 01       	movw	r26, r28
    1fa8:	a3 57       	subi	r26, 0x73	; 115
    1faa:	bf 4f       	sbci	r27, 0xFF	; 255
    1fac:	fe 01       	movw	r30, r28
    1fae:	ef 56       	subi	r30, 0x6F	; 111
    1fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb2:	80 81       	ld	r24, Z
    1fb4:	91 81       	ldd	r25, Z+1	; 0x01
    1fb6:	8d 93       	st	X+, r24
    1fb8:	9c 93       	st	X, r25
    1fba:	fe 01       	movw	r30, r28
    1fbc:	e3 57       	subi	r30, 0x73	; 115
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	80 81       	ld	r24, Z
    1fc2:	91 81       	ldd	r25, Z+1	; 0x01
    1fc4:	01 97       	sbiw	r24, 0x01	; 1
    1fc6:	f1 f7       	brne	.-4      	; 0x1fc4 <main+0x63e>
    1fc8:	fe 01       	movw	r30, r28
    1fca:	e3 57       	subi	r30, 0x73	; 115
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	91 83       	std	Z+1, r25	; 0x01
    1fd0:	80 83       	st	Z, r24
		{
			_delay_ms(50);

			if(DIO_u8GetPinValue(PIN6,DIO_PORTD,&PinState1)==1 && (AnalogValue>=Temps_Readings[0]) && (AnalogValue<=75))
    1fd2:	9e 01       	movw	r18, r28
    1fd4:	26 53       	subi	r18, 0x36	; 54
    1fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fd8:	86 e0       	ldi	r24, 0x06	; 6
    1fda:	63 e0       	ldi	r22, 0x03	; 3
    1fdc:	a9 01       	movw	r20, r18
    1fde:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8GetPinValue>
    1fe2:	81 30       	cpi	r24, 0x01	; 1
    1fe4:	09 f0       	breq	.+2      	; 0x1fe8 <main+0x662>
    1fe6:	09 c4       	rjmp	.+2066   	; 0x27fa <main+0xe74>
    1fe8:	fe 01       	movw	r30, r28
    1fea:	e0 54       	subi	r30, 0x40	; 64
    1fec:	ff 4f       	sbci	r31, 0xFF	; 255
    1fee:	90 81       	ld	r25, Z
    1ff0:	fe 01       	movw	r30, r28
    1ff2:	e8 54       	subi	r30, 0x48	; 72
    1ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff6:	80 81       	ld	r24, Z
    1ff8:	89 17       	cp	r24, r25
    1ffa:	08 f4       	brcc	.+2      	; 0x1ffe <main+0x678>
    1ffc:	fe c3       	rjmp	.+2044   	; 0x27fa <main+0xe74>
    1ffe:	fe 01       	movw	r30, r28
    2000:	e8 54       	subi	r30, 0x48	; 72
    2002:	ff 4f       	sbci	r31, 0xFF	; 255
    2004:	80 81       	ld	r24, Z
    2006:	8c 34       	cpi	r24, 0x4C	; 76
    2008:	08 f0       	brcs	.+2      	; 0x200c <main+0x686>
    200a:	f7 c3       	rjmp	.+2030   	; 0x27fa <main+0xe74>
			{
				Flag_Heating_Mode = 0; // Heating Mode ON
    200c:	fe 01       	movw	r30, r28
    200e:	e1 54       	subi	r30, 0x41	; 65
    2010:	ff 4f       	sbci	r31, 0xFF	; 255
    2012:	10 82       	st	Z, r1
				if(j==0)
    2014:	fe 01       	movw	r30, r28
    2016:	e5 54       	subi	r30, 0x45	; 69
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	80 81       	ld	r24, Z
    201c:	88 23       	and	r24, r24
    201e:	09 f0       	breq	.+2      	; 0x2022 <main+0x69c>
    2020:	4c c2       	rjmp	.+1176   	; 0x24ba <main+0xb34>
				{
					PORTA=(AnalogValue<<4);
    2022:	ab e3       	ldi	r26, 0x3B	; 59
    2024:	b0 e0       	ldi	r27, 0x00	; 0
    2026:	fe 01       	movw	r30, r28
    2028:	e8 54       	subi	r30, 0x48	; 72
    202a:	ff 4f       	sbci	r31, 0xFF	; 255
    202c:	80 81       	ld	r24, Z
    202e:	82 95       	swap	r24
    2030:	80 7f       	andi	r24, 0xF0	; 240
    2032:	8c 93       	st	X, r24
					DIO_u8SetPinValue(PIN1,DIO_PORTB,LOW);
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	61 e0       	ldi	r22, 0x01	; 1
    2038:	40 e0       	ldi	r20, 0x00	; 0
    203a:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
					DIO_u8SetPinValue(PIN2,DIO_PORTB,LOW);
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	40 e0       	ldi	r20, 0x00	; 0
    2044:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
    2048:	fe 01       	movw	r30, r28
    204a:	e7 57       	subi	r30, 0x77	; 119
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	80 e0       	ldi	r24, 0x00	; 0
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	aa e7       	ldi	r26, 0x7A	; 122
    2054:	b4 e4       	ldi	r27, 0x44	; 68
    2056:	80 83       	st	Z, r24
    2058:	91 83       	std	Z+1, r25	; 0x01
    205a:	a2 83       	std	Z+2, r26	; 0x02
    205c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205e:	8e 01       	movw	r16, r28
    2060:	0b 57       	subi	r16, 0x7B	; 123
    2062:	1f 4f       	sbci	r17, 0xFF	; 255
    2064:	fe 01       	movw	r30, r28
    2066:	e7 57       	subi	r30, 0x77	; 119
    2068:	ff 4f       	sbci	r31, 0xFF	; 255
    206a:	60 81       	ld	r22, Z
    206c:	71 81       	ldd	r23, Z+1	; 0x01
    206e:	82 81       	ldd	r24, Z+2	; 0x02
    2070:	93 81       	ldd	r25, Z+3	; 0x03
    2072:	20 e0       	ldi	r18, 0x00	; 0
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	4a e7       	ldi	r20, 0x7A	; 122
    2078:	55 e4       	ldi	r21, 0x45	; 69
    207a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    207e:	dc 01       	movw	r26, r24
    2080:	cb 01       	movw	r24, r22
    2082:	f8 01       	movw	r30, r16
    2084:	80 83       	st	Z, r24
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	a2 83       	std	Z+2, r26	; 0x02
    208a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    208c:	fe 01       	movw	r30, r28
    208e:	eb 57       	subi	r30, 0x7B	; 123
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	60 81       	ld	r22, Z
    2094:	71 81       	ldd	r23, Z+1	; 0x01
    2096:	82 81       	ldd	r24, Z+2	; 0x02
    2098:	93 81       	ldd	r25, Z+3	; 0x03
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e8       	ldi	r20, 0x80	; 128
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20a6:	88 23       	and	r24, r24
    20a8:	44 f4       	brge	.+16     	; 0x20ba <main+0x734>
		__ticks = 1;
    20aa:	fe 01       	movw	r30, r28
    20ac:	ed 57       	subi	r30, 0x7D	; 125
    20ae:	ff 4f       	sbci	r31, 0xFF	; 255
    20b0:	81 e0       	ldi	r24, 0x01	; 1
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	91 83       	std	Z+1, r25	; 0x01
    20b6:	80 83       	st	Z, r24
    20b8:	64 c0       	rjmp	.+200    	; 0x2182 <main+0x7fc>
	else if (__tmp > 65535)
    20ba:	fe 01       	movw	r30, r28
    20bc:	eb 57       	subi	r30, 0x7B	; 123
    20be:	ff 4f       	sbci	r31, 0xFF	; 255
    20c0:	60 81       	ld	r22, Z
    20c2:	71 81       	ldd	r23, Z+1	; 0x01
    20c4:	82 81       	ldd	r24, Z+2	; 0x02
    20c6:	93 81       	ldd	r25, Z+3	; 0x03
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	3f ef       	ldi	r19, 0xFF	; 255
    20cc:	4f e7       	ldi	r20, 0x7F	; 127
    20ce:	57 e4       	ldi	r21, 0x47	; 71
    20d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20d4:	18 16       	cp	r1, r24
    20d6:	0c f0       	brlt	.+2      	; 0x20da <main+0x754>
    20d8:	43 c0       	rjmp	.+134    	; 0x2160 <main+0x7da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20da:	fe 01       	movw	r30, r28
    20dc:	e7 57       	subi	r30, 0x77	; 119
    20de:	ff 4f       	sbci	r31, 0xFF	; 255
    20e0:	60 81       	ld	r22, Z
    20e2:	71 81       	ldd	r23, Z+1	; 0x01
    20e4:	82 81       	ldd	r24, Z+2	; 0x02
    20e6:	93 81       	ldd	r25, Z+3	; 0x03
    20e8:	20 e0       	ldi	r18, 0x00	; 0
    20ea:	30 e0       	ldi	r19, 0x00	; 0
    20ec:	40 e2       	ldi	r20, 0x20	; 32
    20ee:	51 e4       	ldi	r21, 0x41	; 65
    20f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f4:	dc 01       	movw	r26, r24
    20f6:	cb 01       	movw	r24, r22
    20f8:	8e 01       	movw	r16, r28
    20fa:	0d 57       	subi	r16, 0x7D	; 125
    20fc:	1f 4f       	sbci	r17, 0xFF	; 255
    20fe:	bc 01       	movw	r22, r24
    2100:	cd 01       	movw	r24, r26
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	f8 01       	movw	r30, r16
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
    2110:	1f c0       	rjmp	.+62     	; 0x2150 <main+0x7ca>
    2112:	fe 01       	movw	r30, r28
    2114:	ef 57       	subi	r30, 0x7F	; 127
    2116:	ff 4f       	sbci	r31, 0xFF	; 255
    2118:	80 e9       	ldi	r24, 0x90	; 144
    211a:	91 e0       	ldi	r25, 0x01	; 1
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	80 83       	st	Z, r24
    2120:	fe 01       	movw	r30, r28
    2122:	ef 57       	subi	r30, 0x7F	; 127
    2124:	ff 4f       	sbci	r31, 0xFF	; 255
    2126:	80 81       	ld	r24, Z
    2128:	91 81       	ldd	r25, Z+1	; 0x01
    212a:	01 97       	sbiw	r24, 0x01	; 1
    212c:	f1 f7       	brne	.-4      	; 0x212a <main+0x7a4>
    212e:	fe 01       	movw	r30, r28
    2130:	ef 57       	subi	r30, 0x7F	; 127
    2132:	ff 4f       	sbci	r31, 0xFF	; 255
    2134:	91 83       	std	Z+1, r25	; 0x01
    2136:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2138:	de 01       	movw	r26, r28
    213a:	ad 57       	subi	r26, 0x7D	; 125
    213c:	bf 4f       	sbci	r27, 0xFF	; 255
    213e:	fe 01       	movw	r30, r28
    2140:	ed 57       	subi	r30, 0x7D	; 125
    2142:	ff 4f       	sbci	r31, 0xFF	; 255
    2144:	80 81       	ld	r24, Z
    2146:	91 81       	ldd	r25, Z+1	; 0x01
    2148:	01 97       	sbiw	r24, 0x01	; 1
    214a:	11 96       	adiw	r26, 0x01	; 1
    214c:	9c 93       	st	X, r25
    214e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2150:	fe 01       	movw	r30, r28
    2152:	ed 57       	subi	r30, 0x7D	; 125
    2154:	ff 4f       	sbci	r31, 0xFF	; 255
    2156:	80 81       	ld	r24, Z
    2158:	91 81       	ldd	r25, Z+1	; 0x01
    215a:	00 97       	sbiw	r24, 0x00	; 0
    215c:	d1 f6       	brne	.-76     	; 0x2112 <main+0x78c>
    215e:	27 c0       	rjmp	.+78     	; 0x21ae <main+0x828>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2160:	8e 01       	movw	r16, r28
    2162:	0d 57       	subi	r16, 0x7D	; 125
    2164:	1f 4f       	sbci	r17, 0xFF	; 255
    2166:	fe 01       	movw	r30, r28
    2168:	eb 57       	subi	r30, 0x7B	; 123
    216a:	ff 4f       	sbci	r31, 0xFF	; 255
    216c:	60 81       	ld	r22, Z
    216e:	71 81       	ldd	r23, Z+1	; 0x01
    2170:	82 81       	ldd	r24, Z+2	; 0x02
    2172:	93 81       	ldd	r25, Z+3	; 0x03
    2174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2178:	dc 01       	movw	r26, r24
    217a:	cb 01       	movw	r24, r22
    217c:	f8 01       	movw	r30, r16
    217e:	91 83       	std	Z+1, r25	; 0x01
    2180:	80 83       	st	Z, r24
    2182:	de 01       	movw	r26, r28
    2184:	a1 58       	subi	r26, 0x81	; 129
    2186:	bf 4f       	sbci	r27, 0xFF	; 255
    2188:	fe 01       	movw	r30, r28
    218a:	ed 57       	subi	r30, 0x7D	; 125
    218c:	ff 4f       	sbci	r31, 0xFF	; 255
    218e:	80 81       	ld	r24, Z
    2190:	91 81       	ldd	r25, Z+1	; 0x01
    2192:	8d 93       	st	X+, r24
    2194:	9c 93       	st	X, r25
    2196:	fe 01       	movw	r30, r28
    2198:	e1 58       	subi	r30, 0x81	; 129
    219a:	ff 4f       	sbci	r31, 0xFF	; 255
    219c:	80 81       	ld	r24, Z
    219e:	91 81       	ldd	r25, Z+1	; 0x01
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <main+0x81a>
    21a4:	fe 01       	movw	r30, r28
    21a6:	e1 58       	subi	r30, 0x81	; 129
    21a8:	ff 4f       	sbci	r31, 0xFF	; 255
    21aa:	91 83       	std	Z+1, r25	; 0x01
    21ac:	80 83       	st	Z, r24
					_delay_ms(1000);
					DIO_u8SetPinValue(PIN1,DIO_PORTB,HIGH);
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	61 e0       	ldi	r22, 0x01	; 1
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
					DIO_u8SetPinValue(PIN2,DIO_PORTB,HIGH);
    21b8:	82 e0       	ldi	r24, 0x02	; 2
    21ba:	61 e0       	ldi	r22, 0x01	; 1
    21bc:	41 e0       	ldi	r20, 0x01	; 1
    21be:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
    21c2:	fe 01       	movw	r30, r28
    21c4:	e5 58       	subi	r30, 0x85	; 133
    21c6:	ff 4f       	sbci	r31, 0xFF	; 255
    21c8:	80 e0       	ldi	r24, 0x00	; 0
    21ca:	90 e0       	ldi	r25, 0x00	; 0
    21cc:	aa e7       	ldi	r26, 0x7A	; 122
    21ce:	b4 e4       	ldi	r27, 0x44	; 68
    21d0:	80 83       	st	Z, r24
    21d2:	91 83       	std	Z+1, r25	; 0x01
    21d4:	a2 83       	std	Z+2, r26	; 0x02
    21d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21d8:	8e 01       	movw	r16, r28
    21da:	09 58       	subi	r16, 0x89	; 137
    21dc:	1f 4f       	sbci	r17, 0xFF	; 255
    21de:	fe 01       	movw	r30, r28
    21e0:	e5 58       	subi	r30, 0x85	; 133
    21e2:	ff 4f       	sbci	r31, 0xFF	; 255
    21e4:	60 81       	ld	r22, Z
    21e6:	71 81       	ldd	r23, Z+1	; 0x01
    21e8:	82 81       	ldd	r24, Z+2	; 0x02
    21ea:	93 81       	ldd	r25, Z+3	; 0x03
    21ec:	20 e0       	ldi	r18, 0x00	; 0
    21ee:	30 e0       	ldi	r19, 0x00	; 0
    21f0:	4a e7       	ldi	r20, 0x7A	; 122
    21f2:	55 e4       	ldi	r21, 0x45	; 69
    21f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	f8 01       	movw	r30, r16
    21fe:	80 83       	st	Z, r24
    2200:	91 83       	std	Z+1, r25	; 0x01
    2202:	a2 83       	std	Z+2, r26	; 0x02
    2204:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2206:	fe 01       	movw	r30, r28
    2208:	e9 58       	subi	r30, 0x89	; 137
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	60 81       	ld	r22, Z
    220e:	71 81       	ldd	r23, Z+1	; 0x01
    2210:	82 81       	ldd	r24, Z+2	; 0x02
    2212:	93 81       	ldd	r25, Z+3	; 0x03
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	40 e8       	ldi	r20, 0x80	; 128
    221a:	5f e3       	ldi	r21, 0x3F	; 63
    221c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2220:	88 23       	and	r24, r24
    2222:	44 f4       	brge	.+16     	; 0x2234 <main+0x8ae>
		__ticks = 1;
    2224:	fe 01       	movw	r30, r28
    2226:	eb 58       	subi	r30, 0x8B	; 139
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	91 83       	std	Z+1, r25	; 0x01
    2230:	80 83       	st	Z, r24
    2232:	64 c0       	rjmp	.+200    	; 0x22fc <main+0x976>
	else if (__tmp > 65535)
    2234:	fe 01       	movw	r30, r28
    2236:	e9 58       	subi	r30, 0x89	; 137
    2238:	ff 4f       	sbci	r31, 0xFF	; 255
    223a:	60 81       	ld	r22, Z
    223c:	71 81       	ldd	r23, Z+1	; 0x01
    223e:	82 81       	ldd	r24, Z+2	; 0x02
    2240:	93 81       	ldd	r25, Z+3	; 0x03
    2242:	20 e0       	ldi	r18, 0x00	; 0
    2244:	3f ef       	ldi	r19, 0xFF	; 255
    2246:	4f e7       	ldi	r20, 0x7F	; 127
    2248:	57 e4       	ldi	r21, 0x47	; 71
    224a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    224e:	18 16       	cp	r1, r24
    2250:	0c f0       	brlt	.+2      	; 0x2254 <main+0x8ce>
    2252:	43 c0       	rjmp	.+134    	; 0x22da <main+0x954>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2254:	fe 01       	movw	r30, r28
    2256:	e5 58       	subi	r30, 0x85	; 133
    2258:	ff 4f       	sbci	r31, 0xFF	; 255
    225a:	60 81       	ld	r22, Z
    225c:	71 81       	ldd	r23, Z+1	; 0x01
    225e:	82 81       	ldd	r24, Z+2	; 0x02
    2260:	93 81       	ldd	r25, Z+3	; 0x03
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	40 e2       	ldi	r20, 0x20	; 32
    2268:	51 e4       	ldi	r21, 0x41	; 65
    226a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    226e:	dc 01       	movw	r26, r24
    2270:	cb 01       	movw	r24, r22
    2272:	8e 01       	movw	r16, r28
    2274:	0b 58       	subi	r16, 0x8B	; 139
    2276:	1f 4f       	sbci	r17, 0xFF	; 255
    2278:	bc 01       	movw	r22, r24
    227a:	cd 01       	movw	r24, r26
    227c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2280:	dc 01       	movw	r26, r24
    2282:	cb 01       	movw	r24, r22
    2284:	f8 01       	movw	r30, r16
    2286:	91 83       	std	Z+1, r25	; 0x01
    2288:	80 83       	st	Z, r24
    228a:	1f c0       	rjmp	.+62     	; 0x22ca <main+0x944>
    228c:	fe 01       	movw	r30, r28
    228e:	ed 58       	subi	r30, 0x8D	; 141
    2290:	ff 4f       	sbci	r31, 0xFF	; 255
    2292:	80 e9       	ldi	r24, 0x90	; 144
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	91 83       	std	Z+1, r25	; 0x01
    2298:	80 83       	st	Z, r24
    229a:	fe 01       	movw	r30, r28
    229c:	ed 58       	subi	r30, 0x8D	; 141
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	80 81       	ld	r24, Z
    22a2:	91 81       	ldd	r25, Z+1	; 0x01
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <main+0x91e>
    22a8:	fe 01       	movw	r30, r28
    22aa:	ed 58       	subi	r30, 0x8D	; 141
    22ac:	ff 4f       	sbci	r31, 0xFF	; 255
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b2:	de 01       	movw	r26, r28
    22b4:	ab 58       	subi	r26, 0x8B	; 139
    22b6:	bf 4f       	sbci	r27, 0xFF	; 255
    22b8:	fe 01       	movw	r30, r28
    22ba:	eb 58       	subi	r30, 0x8B	; 139
    22bc:	ff 4f       	sbci	r31, 0xFF	; 255
    22be:	80 81       	ld	r24, Z
    22c0:	91 81       	ldd	r25, Z+1	; 0x01
    22c2:	01 97       	sbiw	r24, 0x01	; 1
    22c4:	11 96       	adiw	r26, 0x01	; 1
    22c6:	9c 93       	st	X, r25
    22c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22ca:	fe 01       	movw	r30, r28
    22cc:	eb 58       	subi	r30, 0x8B	; 139
    22ce:	ff 4f       	sbci	r31, 0xFF	; 255
    22d0:	80 81       	ld	r24, Z
    22d2:	91 81       	ldd	r25, Z+1	; 0x01
    22d4:	00 97       	sbiw	r24, 0x00	; 0
    22d6:	d1 f6       	brne	.-76     	; 0x228c <main+0x906>
    22d8:	dc c0       	rjmp	.+440    	; 0x2492 <main+0xb0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22da:	8e 01       	movw	r16, r28
    22dc:	0b 58       	subi	r16, 0x8B	; 139
    22de:	1f 4f       	sbci	r17, 0xFF	; 255
    22e0:	fe 01       	movw	r30, r28
    22e2:	e9 58       	subi	r30, 0x89	; 137
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	60 81       	ld	r22, Z
    22e8:	71 81       	ldd	r23, Z+1	; 0x01
    22ea:	82 81       	ldd	r24, Z+2	; 0x02
    22ec:	93 81       	ldd	r25, Z+3	; 0x03
    22ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22f2:	dc 01       	movw	r26, r24
    22f4:	cb 01       	movw	r24, r22
    22f6:	f8 01       	movw	r30, r16
    22f8:	91 83       	std	Z+1, r25	; 0x01
    22fa:	80 83       	st	Z, r24
    22fc:	de 01       	movw	r26, r28
    22fe:	af 58       	subi	r26, 0x8F	; 143
    2300:	bf 4f       	sbci	r27, 0xFF	; 255
    2302:	fe 01       	movw	r30, r28
    2304:	eb 58       	subi	r30, 0x8B	; 139
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	80 81       	ld	r24, Z
    230a:	91 81       	ldd	r25, Z+1	; 0x01
    230c:	11 96       	adiw	r26, 0x01	; 1
    230e:	9c 93       	st	X, r25
    2310:	8e 93       	st	-X, r24
    2312:	fe 01       	movw	r30, r28
    2314:	ef 58       	subi	r30, 0x8F	; 143
    2316:	ff 4f       	sbci	r31, 0xFF	; 255
    2318:	80 81       	ld	r24, Z
    231a:	91 81       	ldd	r25, Z+1	; 0x01
    231c:	01 97       	sbiw	r24, 0x01	; 1
    231e:	f1 f7       	brne	.-4      	; 0x231c <main+0x996>
    2320:	fe 01       	movw	r30, r28
    2322:	ef 58       	subi	r30, 0x8F	; 143
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	91 83       	std	Z+1, r25	; 0x01
    2328:	80 83       	st	Z, r24
    232a:	b3 c0       	rjmp	.+358    	; 0x2492 <main+0xb0c>
					_delay_ms(1000);
					while(DIO_u8GetPinValue(PIN6,DIO_PORTD,&PinState1)==0)
    232c:	fe 01       	movw	r30, r28
    232e:	e3 59       	subi	r30, 0x93	; 147
    2330:	ff 4f       	sbci	r31, 0xFF	; 255
    2332:	80 e0       	ldi	r24, 0x00	; 0
    2334:	90 e4       	ldi	r25, 0x40	; 64
    2336:	ac e9       	ldi	r26, 0x9C	; 156
    2338:	b5 e4       	ldi	r27, 0x45	; 69
    233a:	80 83       	st	Z, r24
    233c:	91 83       	std	Z+1, r25	; 0x01
    233e:	a2 83       	std	Z+2, r26	; 0x02
    2340:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2342:	8e 01       	movw	r16, r28
    2344:	07 59       	subi	r16, 0x97	; 151
    2346:	1f 4f       	sbci	r17, 0xFF	; 255
    2348:	fe 01       	movw	r30, r28
    234a:	e3 59       	subi	r30, 0x93	; 147
    234c:	ff 4f       	sbci	r31, 0xFF	; 255
    234e:	60 81       	ld	r22, Z
    2350:	71 81       	ldd	r23, Z+1	; 0x01
    2352:	82 81       	ldd	r24, Z+2	; 0x02
    2354:	93 81       	ldd	r25, Z+3	; 0x03
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	4a e7       	ldi	r20, 0x7A	; 122
    235c:	55 e4       	ldi	r21, 0x45	; 69
    235e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2362:	dc 01       	movw	r26, r24
    2364:	cb 01       	movw	r24, r22
    2366:	f8 01       	movw	r30, r16
    2368:	80 83       	st	Z, r24
    236a:	91 83       	std	Z+1, r25	; 0x01
    236c:	a2 83       	std	Z+2, r26	; 0x02
    236e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2370:	fe 01       	movw	r30, r28
    2372:	e7 59       	subi	r30, 0x97	; 151
    2374:	ff 4f       	sbci	r31, 0xFF	; 255
    2376:	60 81       	ld	r22, Z
    2378:	71 81       	ldd	r23, Z+1	; 0x01
    237a:	82 81       	ldd	r24, Z+2	; 0x02
    237c:	93 81       	ldd	r25, Z+3	; 0x03
    237e:	20 e0       	ldi	r18, 0x00	; 0
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	40 e8       	ldi	r20, 0x80	; 128
    2384:	5f e3       	ldi	r21, 0x3F	; 63
    2386:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    238a:	88 23       	and	r24, r24
    238c:	44 f4       	brge	.+16     	; 0x239e <main+0xa18>
		__ticks = 1;
    238e:	fe 01       	movw	r30, r28
    2390:	e9 59       	subi	r30, 0x99	; 153
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	91 83       	std	Z+1, r25	; 0x01
    239a:	80 83       	st	Z, r24
    239c:	64 c0       	rjmp	.+200    	; 0x2466 <main+0xae0>
	else if (__tmp > 65535)
    239e:	fe 01       	movw	r30, r28
    23a0:	e7 59       	subi	r30, 0x97	; 151
    23a2:	ff 4f       	sbci	r31, 0xFF	; 255
    23a4:	60 81       	ld	r22, Z
    23a6:	71 81       	ldd	r23, Z+1	; 0x01
    23a8:	82 81       	ldd	r24, Z+2	; 0x02
    23aa:	93 81       	ldd	r25, Z+3	; 0x03
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	3f ef       	ldi	r19, 0xFF	; 255
    23b0:	4f e7       	ldi	r20, 0x7F	; 127
    23b2:	57 e4       	ldi	r21, 0x47	; 71
    23b4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b8:	18 16       	cp	r1, r24
    23ba:	0c f0       	brlt	.+2      	; 0x23be <main+0xa38>
    23bc:	43 c0       	rjmp	.+134    	; 0x2444 <main+0xabe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23be:	fe 01       	movw	r30, r28
    23c0:	e3 59       	subi	r30, 0x93	; 147
    23c2:	ff 4f       	sbci	r31, 0xFF	; 255
    23c4:	60 81       	ld	r22, Z
    23c6:	71 81       	ldd	r23, Z+1	; 0x01
    23c8:	82 81       	ldd	r24, Z+2	; 0x02
    23ca:	93 81       	ldd	r25, Z+3	; 0x03
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e2       	ldi	r20, 0x20	; 32
    23d2:	51 e4       	ldi	r21, 0x41	; 65
    23d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d8:	dc 01       	movw	r26, r24
    23da:	cb 01       	movw	r24, r22
    23dc:	8e 01       	movw	r16, r28
    23de:	09 59       	subi	r16, 0x99	; 153
    23e0:	1f 4f       	sbci	r17, 0xFF	; 255
    23e2:	bc 01       	movw	r22, r24
    23e4:	cd 01       	movw	r24, r26
    23e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ea:	dc 01       	movw	r26, r24
    23ec:	cb 01       	movw	r24, r22
    23ee:	f8 01       	movw	r30, r16
    23f0:	91 83       	std	Z+1, r25	; 0x01
    23f2:	80 83       	st	Z, r24
    23f4:	1f c0       	rjmp	.+62     	; 0x2434 <main+0xaae>
    23f6:	fe 01       	movw	r30, r28
    23f8:	eb 59       	subi	r30, 0x9B	; 155
    23fa:	ff 4f       	sbci	r31, 0xFF	; 255
    23fc:	80 e9       	ldi	r24, 0x90	; 144
    23fe:	91 e0       	ldi	r25, 0x01	; 1
    2400:	91 83       	std	Z+1, r25	; 0x01
    2402:	80 83       	st	Z, r24
    2404:	fe 01       	movw	r30, r28
    2406:	eb 59       	subi	r30, 0x9B	; 155
    2408:	ff 4f       	sbci	r31, 0xFF	; 255
    240a:	80 81       	ld	r24, Z
    240c:	91 81       	ldd	r25, Z+1	; 0x01
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <main+0xa88>
    2412:	fe 01       	movw	r30, r28
    2414:	eb 59       	subi	r30, 0x9B	; 155
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	91 83       	std	Z+1, r25	; 0x01
    241a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241c:	de 01       	movw	r26, r28
    241e:	a9 59       	subi	r26, 0x99	; 153
    2420:	bf 4f       	sbci	r27, 0xFF	; 255
    2422:	fe 01       	movw	r30, r28
    2424:	e9 59       	subi	r30, 0x99	; 153
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	80 81       	ld	r24, Z
    242a:	91 81       	ldd	r25, Z+1	; 0x01
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	11 96       	adiw	r26, 0x01	; 1
    2430:	9c 93       	st	X, r25
    2432:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2434:	fe 01       	movw	r30, r28
    2436:	e9 59       	subi	r30, 0x99	; 153
    2438:	ff 4f       	sbci	r31, 0xFF	; 255
    243a:	80 81       	ld	r24, Z
    243c:	91 81       	ldd	r25, Z+1	; 0x01
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	d1 f6       	brne	.-76     	; 0x23f6 <main+0xa70>
    2442:	27 c0       	rjmp	.+78     	; 0x2492 <main+0xb0c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2444:	8e 01       	movw	r16, r28
    2446:	09 59       	subi	r16, 0x99	; 153
    2448:	1f 4f       	sbci	r17, 0xFF	; 255
    244a:	fe 01       	movw	r30, r28
    244c:	e7 59       	subi	r30, 0x97	; 151
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	60 81       	ld	r22, Z
    2452:	71 81       	ldd	r23, Z+1	; 0x01
    2454:	82 81       	ldd	r24, Z+2	; 0x02
    2456:	93 81       	ldd	r25, Z+3	; 0x03
    2458:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	f8 01       	movw	r30, r16
    2462:	91 83       	std	Z+1, r25	; 0x01
    2464:	80 83       	st	Z, r24
    2466:	de 01       	movw	r26, r28
    2468:	ad 59       	subi	r26, 0x9D	; 157
    246a:	bf 4f       	sbci	r27, 0xFF	; 255
    246c:	fe 01       	movw	r30, r28
    246e:	e9 59       	subi	r30, 0x99	; 153
    2470:	ff 4f       	sbci	r31, 0xFF	; 255
    2472:	80 81       	ld	r24, Z
    2474:	91 81       	ldd	r25, Z+1	; 0x01
    2476:	8d 93       	st	X+, r24
    2478:	9c 93       	st	X, r25
    247a:	fe 01       	movw	r30, r28
    247c:	ed 59       	subi	r30, 0x9D	; 157
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	80 81       	ld	r24, Z
    2482:	91 81       	ldd	r25, Z+1	; 0x01
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <main+0xafe>
    2488:	fe 01       	movw	r30, r28
    248a:	ed 59       	subi	r30, 0x9D	; 157
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	91 83       	std	Z+1, r25	; 0x01
    2490:	80 83       	st	Z, r24
    2492:	9e 01       	movw	r18, r28
    2494:	26 53       	subi	r18, 0x36	; 54
    2496:	3f 4f       	sbci	r19, 0xFF	; 255
    2498:	86 e0       	ldi	r24, 0x06	; 6
    249a:	63 e0       	ldi	r22, 0x03	; 3
    249c:	a9 01       	movw	r20, r18
    249e:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8GetPinValue>
    24a2:	88 23       	and	r24, r24
    24a4:	09 f4       	brne	.+2      	; 0x24a8 <main+0xb22>
    24a6:	42 cf       	rjmp	.-380    	; 0x232c <main+0x9a6>
					{
							_delay_ms(5000);
						//	clock();
					}
					j++;
    24a8:	de 01       	movw	r26, r28
    24aa:	a5 54       	subi	r26, 0x45	; 69
    24ac:	bf 4f       	sbci	r27, 0xFF	; 255
    24ae:	fe 01       	movw	r30, r28
    24b0:	e5 54       	subi	r30, 0x45	; 69
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 81       	ld	r24, Z
    24b6:	8f 5f       	subi	r24, 0xFF	; 255
    24b8:	8c 93       	st	X, r24
				}
				if(Flag_Heating_Mode==0 && j>=1)
    24ba:	fe 01       	movw	r30, r28
    24bc:	e1 54       	subi	r30, 0x41	; 65
    24be:	ff 4f       	sbci	r31, 0xFF	; 255
    24c0:	80 81       	ld	r24, Z
    24c2:	88 23       	and	r24, r24
    24c4:	09 f0       	breq	.+2      	; 0x24c8 <main+0xb42>
    24c6:	99 c1       	rjmp	.+818    	; 0x27fa <main+0xe74>
    24c8:	fe 01       	movw	r30, r28
    24ca:	e5 54       	subi	r30, 0x45	; 69
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	80 81       	ld	r24, Z
    24d0:	88 23       	and	r24, r24
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <main+0xb50>
    24d4:	92 c1       	rjmp	.+804    	; 0x27fa <main+0xe74>
				{
					DIO_u8SetPinValue(PIN7,DIO_PORTC,HIGH);
    24d6:	87 e0       	ldi	r24, 0x07	; 7
    24d8:	62 e0       	ldi	r22, 0x02	; 2
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
    24e0:	fe 01       	movw	r30, r28
    24e2:	e1 5a       	subi	r30, 0xA1	; 161
    24e4:	ff 4f       	sbci	r31, 0xFF	; 255
    24e6:	80 e0       	ldi	r24, 0x00	; 0
    24e8:	90 e0       	ldi	r25, 0x00	; 0
    24ea:	aa e7       	ldi	r26, 0x7A	; 122
    24ec:	b4 e4       	ldi	r27, 0x44	; 68
    24ee:	80 83       	st	Z, r24
    24f0:	91 83       	std	Z+1, r25	; 0x01
    24f2:	a2 83       	std	Z+2, r26	; 0x02
    24f4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24f6:	8e 01       	movw	r16, r28
    24f8:	05 5a       	subi	r16, 0xA5	; 165
    24fa:	1f 4f       	sbci	r17, 0xFF	; 255
    24fc:	fe 01       	movw	r30, r28
    24fe:	e1 5a       	subi	r30, 0xA1	; 161
    2500:	ff 4f       	sbci	r31, 0xFF	; 255
    2502:	60 81       	ld	r22, Z
    2504:	71 81       	ldd	r23, Z+1	; 0x01
    2506:	82 81       	ldd	r24, Z+2	; 0x02
    2508:	93 81       	ldd	r25, Z+3	; 0x03
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	4a e7       	ldi	r20, 0x7A	; 122
    2510:	55 e4       	ldi	r21, 0x45	; 69
    2512:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	f8 01       	movw	r30, r16
    251c:	80 83       	st	Z, r24
    251e:	91 83       	std	Z+1, r25	; 0x01
    2520:	a2 83       	std	Z+2, r26	; 0x02
    2522:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2524:	fe 01       	movw	r30, r28
    2526:	e5 5a       	subi	r30, 0xA5	; 165
    2528:	ff 4f       	sbci	r31, 0xFF	; 255
    252a:	60 81       	ld	r22, Z
    252c:	71 81       	ldd	r23, Z+1	; 0x01
    252e:	82 81       	ldd	r24, Z+2	; 0x02
    2530:	93 81       	ldd	r25, Z+3	; 0x03
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e8       	ldi	r20, 0x80	; 128
    2538:	5f e3       	ldi	r21, 0x3F	; 63
    253a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    253e:	88 23       	and	r24, r24
    2540:	44 f4       	brge	.+16     	; 0x2552 <main+0xbcc>
		__ticks = 1;
    2542:	fe 01       	movw	r30, r28
    2544:	e7 5a       	subi	r30, 0xA7	; 167
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	81 e0       	ldi	r24, 0x01	; 1
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	91 83       	std	Z+1, r25	; 0x01
    254e:	80 83       	st	Z, r24
    2550:	64 c0       	rjmp	.+200    	; 0x261a <main+0xc94>
	else if (__tmp > 65535)
    2552:	fe 01       	movw	r30, r28
    2554:	e5 5a       	subi	r30, 0xA5	; 165
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	60 81       	ld	r22, Z
    255a:	71 81       	ldd	r23, Z+1	; 0x01
    255c:	82 81       	ldd	r24, Z+2	; 0x02
    255e:	93 81       	ldd	r25, Z+3	; 0x03
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	3f ef       	ldi	r19, 0xFF	; 255
    2564:	4f e7       	ldi	r20, 0x7F	; 127
    2566:	57 e4       	ldi	r21, 0x47	; 71
    2568:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    256c:	18 16       	cp	r1, r24
    256e:	0c f0       	brlt	.+2      	; 0x2572 <main+0xbec>
    2570:	43 c0       	rjmp	.+134    	; 0x25f8 <main+0xc72>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2572:	fe 01       	movw	r30, r28
    2574:	e1 5a       	subi	r30, 0xA1	; 161
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	60 81       	ld	r22, Z
    257a:	71 81       	ldd	r23, Z+1	; 0x01
    257c:	82 81       	ldd	r24, Z+2	; 0x02
    257e:	93 81       	ldd	r25, Z+3	; 0x03
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e2       	ldi	r20, 0x20	; 32
    2586:	51 e4       	ldi	r21, 0x41	; 65
    2588:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    258c:	dc 01       	movw	r26, r24
    258e:	cb 01       	movw	r24, r22
    2590:	8e 01       	movw	r16, r28
    2592:	07 5a       	subi	r16, 0xA7	; 167
    2594:	1f 4f       	sbci	r17, 0xFF	; 255
    2596:	bc 01       	movw	r22, r24
    2598:	cd 01       	movw	r24, r26
    259a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	f8 01       	movw	r30, r16
    25a4:	91 83       	std	Z+1, r25	; 0x01
    25a6:	80 83       	st	Z, r24
    25a8:	1f c0       	rjmp	.+62     	; 0x25e8 <main+0xc62>
    25aa:	fe 01       	movw	r30, r28
    25ac:	e9 5a       	subi	r30, 0xA9	; 169
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	80 e9       	ldi	r24, 0x90	; 144
    25b2:	91 e0       	ldi	r25, 0x01	; 1
    25b4:	91 83       	std	Z+1, r25	; 0x01
    25b6:	80 83       	st	Z, r24
    25b8:	fe 01       	movw	r30, r28
    25ba:	e9 5a       	subi	r30, 0xA9	; 169
    25bc:	ff 4f       	sbci	r31, 0xFF	; 255
    25be:	80 81       	ld	r24, Z
    25c0:	91 81       	ldd	r25, Z+1	; 0x01
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	f1 f7       	brne	.-4      	; 0x25c2 <main+0xc3c>
    25c6:	fe 01       	movw	r30, r28
    25c8:	e9 5a       	subi	r30, 0xA9	; 169
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	91 83       	std	Z+1, r25	; 0x01
    25ce:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25d0:	de 01       	movw	r26, r28
    25d2:	a7 5a       	subi	r26, 0xA7	; 167
    25d4:	bf 4f       	sbci	r27, 0xFF	; 255
    25d6:	fe 01       	movw	r30, r28
    25d8:	e7 5a       	subi	r30, 0xA7	; 167
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	11 96       	adiw	r26, 0x01	; 1
    25e4:	9c 93       	st	X, r25
    25e6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e8:	fe 01       	movw	r30, r28
    25ea:	e7 5a       	subi	r30, 0xA7	; 167
    25ec:	ff 4f       	sbci	r31, 0xFF	; 255
    25ee:	80 81       	ld	r24, Z
    25f0:	91 81       	ldd	r25, Z+1	; 0x01
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	d1 f6       	brne	.-76     	; 0x25aa <main+0xc24>
    25f6:	27 c0       	rjmp	.+78     	; 0x2646 <main+0xcc0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25f8:	8e 01       	movw	r16, r28
    25fa:	07 5a       	subi	r16, 0xA7	; 167
    25fc:	1f 4f       	sbci	r17, 0xFF	; 255
    25fe:	fe 01       	movw	r30, r28
    2600:	e5 5a       	subi	r30, 0xA5	; 165
    2602:	ff 4f       	sbci	r31, 0xFF	; 255
    2604:	60 81       	ld	r22, Z
    2606:	71 81       	ldd	r23, Z+1	; 0x01
    2608:	82 81       	ldd	r24, Z+2	; 0x02
    260a:	93 81       	ldd	r25, Z+3	; 0x03
    260c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	f8 01       	movw	r30, r16
    2616:	91 83       	std	Z+1, r25	; 0x01
    2618:	80 83       	st	Z, r24
    261a:	de 01       	movw	r26, r28
    261c:	ab 5a       	subi	r26, 0xAB	; 171
    261e:	bf 4f       	sbci	r27, 0xFF	; 255
    2620:	fe 01       	movw	r30, r28
    2622:	e7 5a       	subi	r30, 0xA7	; 167
    2624:	ff 4f       	sbci	r31, 0xFF	; 255
    2626:	80 81       	ld	r24, Z
    2628:	91 81       	ldd	r25, Z+1	; 0x01
    262a:	8d 93       	st	X+, r24
    262c:	9c 93       	st	X, r25
    262e:	fe 01       	movw	r30, r28
    2630:	eb 5a       	subi	r30, 0xAB	; 171
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	80 81       	ld	r24, Z
    2636:	91 81       	ldd	r25, Z+1	; 0x01
    2638:	01 97       	sbiw	r24, 0x01	; 1
    263a:	f1 f7       	brne	.-4      	; 0x2638 <main+0xcb2>
    263c:	fe 01       	movw	r30, r28
    263e:	eb 5a       	subi	r30, 0xAB	; 171
    2640:	ff 4f       	sbci	r31, 0xFF	; 255
    2642:	91 83       	std	Z+1, r25	; 0x01
    2644:	80 83       	st	Z, r24
					_delay_ms(1000);
					DIO_u8SetPinValue(PIN7,DIO_PORTC,LOW);
    2646:	87 e0       	ldi	r24, 0x07	; 7
    2648:	62 e0       	ldi	r22, 0x02	; 2
    264a:	40 e0       	ldi	r20, 0x00	; 0
    264c:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
    2650:	fe 01       	movw	r30, r28
    2652:	ef 5a       	subi	r30, 0xAF	; 175
    2654:	ff 4f       	sbci	r31, 0xFF	; 255
    2656:	80 e0       	ldi	r24, 0x00	; 0
    2658:	90 e0       	ldi	r25, 0x00	; 0
    265a:	aa e7       	ldi	r26, 0x7A	; 122
    265c:	b4 e4       	ldi	r27, 0x44	; 68
    265e:	80 83       	st	Z, r24
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	a2 83       	std	Z+2, r26	; 0x02
    2664:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2666:	8e 01       	movw	r16, r28
    2668:	03 5b       	subi	r16, 0xB3	; 179
    266a:	1f 4f       	sbci	r17, 0xFF	; 255
    266c:	fe 01       	movw	r30, r28
    266e:	ef 5a       	subi	r30, 0xAF	; 175
    2670:	ff 4f       	sbci	r31, 0xFF	; 255
    2672:	60 81       	ld	r22, Z
    2674:	71 81       	ldd	r23, Z+1	; 0x01
    2676:	82 81       	ldd	r24, Z+2	; 0x02
    2678:	93 81       	ldd	r25, Z+3	; 0x03
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	4a e7       	ldi	r20, 0x7A	; 122
    2680:	55 e4       	ldi	r21, 0x45	; 69
    2682:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2686:	dc 01       	movw	r26, r24
    2688:	cb 01       	movw	r24, r22
    268a:	f8 01       	movw	r30, r16
    268c:	80 83       	st	Z, r24
    268e:	91 83       	std	Z+1, r25	; 0x01
    2690:	a2 83       	std	Z+2, r26	; 0x02
    2692:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2694:	fe 01       	movw	r30, r28
    2696:	e3 5b       	subi	r30, 0xB3	; 179
    2698:	ff 4f       	sbci	r31, 0xFF	; 255
    269a:	60 81       	ld	r22, Z
    269c:	71 81       	ldd	r23, Z+1	; 0x01
    269e:	82 81       	ldd	r24, Z+2	; 0x02
    26a0:	93 81       	ldd	r25, Z+3	; 0x03
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	44 f4       	brge	.+16     	; 0x26c2 <main+0xd3c>
		__ticks = 1;
    26b2:	fe 01       	movw	r30, r28
    26b4:	e5 5b       	subi	r30, 0xB5	; 181
    26b6:	ff 4f       	sbci	r31, 0xFF	; 255
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	91 83       	std	Z+1, r25	; 0x01
    26be:	80 83       	st	Z, r24
    26c0:	64 c0       	rjmp	.+200    	; 0x278a <main+0xe04>
	else if (__tmp > 65535)
    26c2:	fe 01       	movw	r30, r28
    26c4:	e3 5b       	subi	r30, 0xB3	; 179
    26c6:	ff 4f       	sbci	r31, 0xFF	; 255
    26c8:	60 81       	ld	r22, Z
    26ca:	71 81       	ldd	r23, Z+1	; 0x01
    26cc:	82 81       	ldd	r24, Z+2	; 0x02
    26ce:	93 81       	ldd	r25, Z+3	; 0x03
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	3f ef       	ldi	r19, 0xFF	; 255
    26d4:	4f e7       	ldi	r20, 0x7F	; 127
    26d6:	57 e4       	ldi	r21, 0x47	; 71
    26d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26dc:	18 16       	cp	r1, r24
    26de:	0c f0       	brlt	.+2      	; 0x26e2 <main+0xd5c>
    26e0:	43 c0       	rjmp	.+134    	; 0x2768 <main+0xde2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26e2:	fe 01       	movw	r30, r28
    26e4:	ef 5a       	subi	r30, 0xAF	; 175
    26e6:	ff 4f       	sbci	r31, 0xFF	; 255
    26e8:	60 81       	ld	r22, Z
    26ea:	71 81       	ldd	r23, Z+1	; 0x01
    26ec:	82 81       	ldd	r24, Z+2	; 0x02
    26ee:	93 81       	ldd	r25, Z+3	; 0x03
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e2       	ldi	r20, 0x20	; 32
    26f6:	51 e4       	ldi	r21, 0x41	; 65
    26f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	8e 01       	movw	r16, r28
    2702:	05 5b       	subi	r16, 0xB5	; 181
    2704:	1f 4f       	sbci	r17, 0xFF	; 255
    2706:	bc 01       	movw	r22, r24
    2708:	cd 01       	movw	r24, r26
    270a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	f8 01       	movw	r30, r16
    2714:	91 83       	std	Z+1, r25	; 0x01
    2716:	80 83       	st	Z, r24
    2718:	1f c0       	rjmp	.+62     	; 0x2758 <main+0xdd2>
    271a:	fe 01       	movw	r30, r28
    271c:	e7 5b       	subi	r30, 0xB7	; 183
    271e:	ff 4f       	sbci	r31, 0xFF	; 255
    2720:	80 e9       	ldi	r24, 0x90	; 144
    2722:	91 e0       	ldi	r25, 0x01	; 1
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
    2728:	fe 01       	movw	r30, r28
    272a:	e7 5b       	subi	r30, 0xB7	; 183
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	80 81       	ld	r24, Z
    2730:	91 81       	ldd	r25, Z+1	; 0x01
    2732:	01 97       	sbiw	r24, 0x01	; 1
    2734:	f1 f7       	brne	.-4      	; 0x2732 <main+0xdac>
    2736:	fe 01       	movw	r30, r28
    2738:	e7 5b       	subi	r30, 0xB7	; 183
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	91 83       	std	Z+1, r25	; 0x01
    273e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2740:	de 01       	movw	r26, r28
    2742:	a5 5b       	subi	r26, 0xB5	; 181
    2744:	bf 4f       	sbci	r27, 0xFF	; 255
    2746:	fe 01       	movw	r30, r28
    2748:	e5 5b       	subi	r30, 0xB5	; 181
    274a:	ff 4f       	sbci	r31, 0xFF	; 255
    274c:	80 81       	ld	r24, Z
    274e:	91 81       	ldd	r25, Z+1	; 0x01
    2750:	01 97       	sbiw	r24, 0x01	; 1
    2752:	11 96       	adiw	r26, 0x01	; 1
    2754:	9c 93       	st	X, r25
    2756:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2758:	fe 01       	movw	r30, r28
    275a:	e5 5b       	subi	r30, 0xB5	; 181
    275c:	ff 4f       	sbci	r31, 0xFF	; 255
    275e:	80 81       	ld	r24, Z
    2760:	91 81       	ldd	r25, Z+1	; 0x01
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	d1 f6       	brne	.-76     	; 0x271a <main+0xd94>
    2766:	27 c0       	rjmp	.+78     	; 0x27b6 <main+0xe30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2768:	8e 01       	movw	r16, r28
    276a:	05 5b       	subi	r16, 0xB5	; 181
    276c:	1f 4f       	sbci	r17, 0xFF	; 255
    276e:	fe 01       	movw	r30, r28
    2770:	e3 5b       	subi	r30, 0xB3	; 179
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	60 81       	ld	r22, Z
    2776:	71 81       	ldd	r23, Z+1	; 0x01
    2778:	82 81       	ldd	r24, Z+2	; 0x02
    277a:	93 81       	ldd	r25, Z+3	; 0x03
    277c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	f8 01       	movw	r30, r16
    2786:	91 83       	std	Z+1, r25	; 0x01
    2788:	80 83       	st	Z, r24
    278a:	de 01       	movw	r26, r28
    278c:	a9 5b       	subi	r26, 0xB9	; 185
    278e:	bf 4f       	sbci	r27, 0xFF	; 255
    2790:	fe 01       	movw	r30, r28
    2792:	e5 5b       	subi	r30, 0xB5	; 181
    2794:	ff 4f       	sbci	r31, 0xFF	; 255
    2796:	80 81       	ld	r24, Z
    2798:	91 81       	ldd	r25, Z+1	; 0x01
    279a:	8d 93       	st	X+, r24
    279c:	9c 93       	st	X, r25
    279e:	fe 01       	movw	r30, r28
    27a0:	e9 5b       	subi	r30, 0xB9	; 185
    27a2:	ff 4f       	sbci	r31, 0xFF	; 255
    27a4:	80 81       	ld	r24, Z
    27a6:	91 81       	ldd	r25, Z+1	; 0x01
    27a8:	01 97       	sbiw	r24, 0x01	; 1
    27aa:	f1 f7       	brne	.-4      	; 0x27a8 <main+0xe22>
    27ac:	fe 01       	movw	r30, r28
    27ae:	e9 5b       	subi	r30, 0xB9	; 185
    27b0:	ff 4f       	sbci	r31, 0xFF	; 255
    27b2:	91 83       	std	Z+1, r25	; 0x01
    27b4:	80 83       	st	Z, r24
				    _delay_ms(1000);
					AnalogValue+=5;
    27b6:	de 01       	movw	r26, r28
    27b8:	a8 54       	subi	r26, 0x48	; 72
    27ba:	bf 4f       	sbci	r27, 0xFF	; 255
    27bc:	fe 01       	movw	r30, r28
    27be:	e8 54       	subi	r30, 0x48	; 72
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	80 81       	ld	r24, Z
    27c4:	8b 5f       	subi	r24, 0xFB	; 251
    27c6:	8c 93       	st	X, r24

					eeprom_write_word((unsigned int*)&Temps_Readings[*i], AnalogValue);
    27c8:	9e 01       	movw	r18, r28
    27ca:	20 54       	subi	r18, 0x40	; 64
    27cc:	3f 4f       	sbci	r19, 0xFF	; 255
    27ce:	fe 01       	movw	r30, r28
    27d0:	e4 54       	subi	r30, 0x44	; 68
    27d2:	ff 4f       	sbci	r31, 0xFF	; 255
    27d4:	01 90       	ld	r0, Z+
    27d6:	f0 81       	ld	r31, Z
    27d8:	e0 2d       	mov	r30, r0
    27da:	80 81       	ld	r24, Z
    27dc:	88 2f       	mov	r24, r24
    27de:	90 e0       	ldi	r25, 0x00	; 0
    27e0:	a9 01       	movw	r20, r18
    27e2:	48 0f       	add	r20, r24
    27e4:	59 1f       	adc	r21, r25
    27e6:	fe 01       	movw	r30, r28
    27e8:	e8 54       	subi	r30, 0x48	; 72
    27ea:	ff 4f       	sbci	r31, 0xFF	; 255
    27ec:	80 81       	ld	r24, Z
    27ee:	28 2f       	mov	r18, r24
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	ca 01       	movw	r24, r20
    27f4:	b9 01       	movw	r22, r18
    27f6:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <__eewr_word_m32>
				//	EEPROM_voidSendDataByte(Local_ReceiveDataByte,0,i+1);
				}
			}
		}
// -----------------------------------------------------------------------------------------------
		if(DIO_u8GetPinValue(PIN2,DIO_PORTD,&PinState2)==1 && (AnalogValue>=Temps_Readings[0]) && (AnalogValue>=35)) // DOWN B2
    27fa:	9e 01       	movw	r18, r28
    27fc:	25 53       	subi	r18, 0x35	; 53
    27fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2800:	82 e0       	ldi	r24, 0x02	; 2
    2802:	63 e0       	ldi	r22, 0x03	; 3
    2804:	a9 01       	movw	r20, r18
    2806:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8GetPinValue>
    280a:	81 30       	cpi	r24, 0x01	; 1
    280c:	09 f0       	breq	.+2      	; 0x2810 <main+0xe8a>
    280e:	ff c1       	rjmp	.+1022   	; 0x2c0e <main+0x1288>
    2810:	fe 01       	movw	r30, r28
    2812:	e0 54       	subi	r30, 0x40	; 64
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	90 81       	ld	r25, Z
    2818:	fe 01       	movw	r30, r28
    281a:	e8 54       	subi	r30, 0x48	; 72
    281c:	ff 4f       	sbci	r31, 0xFF	; 255
    281e:	80 81       	ld	r24, Z
    2820:	89 17       	cp	r24, r25
    2822:	08 f4       	brcc	.+2      	; 0x2826 <main+0xea0>
    2824:	f4 c1       	rjmp	.+1000   	; 0x2c0e <main+0x1288>
    2826:	fe 01       	movw	r30, r28
    2828:	e8 54       	subi	r30, 0x48	; 72
    282a:	ff 4f       	sbci	r31, 0xFF	; 255
    282c:	80 81       	ld	r24, Z
    282e:	83 32       	cpi	r24, 0x23	; 35
    2830:	08 f4       	brcc	.+2      	; 0x2834 <main+0xeae>
    2832:	ed c1       	rjmp	.+986    	; 0x2c0e <main+0x1288>
    2834:	fe 01       	movw	r30, r28
    2836:	ed 5b       	subi	r30, 0xBD	; 189
    2838:	ff 4f       	sbci	r31, 0xFF	; 255
    283a:	80 e0       	ldi	r24, 0x00	; 0
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	a8 e4       	ldi	r26, 0x48	; 72
    2840:	b2 e4       	ldi	r27, 0x42	; 66
    2842:	80 83       	st	Z, r24
    2844:	91 83       	std	Z+1, r25	; 0x01
    2846:	a2 83       	std	Z+2, r26	; 0x02
    2848:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    284a:	8e 01       	movw	r16, r28
    284c:	01 5c       	subi	r16, 0xC1	; 193
    284e:	1f 4f       	sbci	r17, 0xFF	; 255
    2850:	fe 01       	movw	r30, r28
    2852:	ed 5b       	subi	r30, 0xBD	; 189
    2854:	ff 4f       	sbci	r31, 0xFF	; 255
    2856:	60 81       	ld	r22, Z
    2858:	71 81       	ldd	r23, Z+1	; 0x01
    285a:	82 81       	ldd	r24, Z+2	; 0x02
    285c:	93 81       	ldd	r25, Z+3	; 0x03
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	4a e7       	ldi	r20, 0x7A	; 122
    2864:	55 e4       	ldi	r21, 0x45	; 69
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	f8 01       	movw	r30, r16
    2870:	80 83       	st	Z, r24
    2872:	91 83       	std	Z+1, r25	; 0x01
    2874:	a2 83       	std	Z+2, r26	; 0x02
    2876:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2878:	fe 01       	movw	r30, r28
    287a:	ff 96       	adiw	r30, 0x3f	; 63
    287c:	60 81       	ld	r22, Z
    287e:	71 81       	ldd	r23, Z+1	; 0x01
    2880:	82 81       	ldd	r24, Z+2	; 0x02
    2882:	93 81       	ldd	r25, Z+3	; 0x03
    2884:	20 e0       	ldi	r18, 0x00	; 0
    2886:	30 e0       	ldi	r19, 0x00	; 0
    2888:	40 e8       	ldi	r20, 0x80	; 128
    288a:	5f e3       	ldi	r21, 0x3F	; 63
    288c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2890:	88 23       	and	r24, r24
    2892:	2c f4       	brge	.+10     	; 0x289e <main+0xf18>
		__ticks = 1;
    2894:	81 e0       	ldi	r24, 0x01	; 1
    2896:	90 e0       	ldi	r25, 0x00	; 0
    2898:	9e af       	std	Y+62, r25	; 0x3e
    289a:	8d af       	std	Y+61, r24	; 0x3d
    289c:	46 c0       	rjmp	.+140    	; 0x292a <main+0xfa4>
	else if (__tmp > 65535)
    289e:	fe 01       	movw	r30, r28
    28a0:	ff 96       	adiw	r30, 0x3f	; 63
    28a2:	60 81       	ld	r22, Z
    28a4:	71 81       	ldd	r23, Z+1	; 0x01
    28a6:	82 81       	ldd	r24, Z+2	; 0x02
    28a8:	93 81       	ldd	r25, Z+3	; 0x03
    28aa:	20 e0       	ldi	r18, 0x00	; 0
    28ac:	3f ef       	ldi	r19, 0xFF	; 255
    28ae:	4f e7       	ldi	r20, 0x7F	; 127
    28b0:	57 e4       	ldi	r21, 0x47	; 71
    28b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28b6:	18 16       	cp	r1, r24
    28b8:	64 f5       	brge	.+88     	; 0x2912 <main+0xf8c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ba:	fe 01       	movw	r30, r28
    28bc:	ed 5b       	subi	r30, 0xBD	; 189
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	60 81       	ld	r22, Z
    28c2:	71 81       	ldd	r23, Z+1	; 0x01
    28c4:	82 81       	ldd	r24, Z+2	; 0x02
    28c6:	93 81       	ldd	r25, Z+3	; 0x03
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e2       	ldi	r20, 0x20	; 32
    28ce:	51 e4       	ldi	r21, 0x41	; 65
    28d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d4:	dc 01       	movw	r26, r24
    28d6:	cb 01       	movw	r24, r22
    28d8:	bc 01       	movw	r22, r24
    28da:	cd 01       	movw	r24, r26
    28dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e0:	dc 01       	movw	r26, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	9e af       	std	Y+62, r25	; 0x3e
    28e6:	8d af       	std	Y+61, r24	; 0x3d
    28e8:	0f c0       	rjmp	.+30     	; 0x2908 <main+0xf82>
    28ea:	80 e9       	ldi	r24, 0x90	; 144
    28ec:	91 e0       	ldi	r25, 0x01	; 1
    28ee:	9c af       	std	Y+60, r25	; 0x3c
    28f0:	8b af       	std	Y+59, r24	; 0x3b
    28f2:	8b ad       	ldd	r24, Y+59	; 0x3b
    28f4:	9c ad       	ldd	r25, Y+60	; 0x3c
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <main+0xf70>
    28fa:	9c af       	std	Y+60, r25	; 0x3c
    28fc:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28fe:	8d ad       	ldd	r24, Y+61	; 0x3d
    2900:	9e ad       	ldd	r25, Y+62	; 0x3e
    2902:	01 97       	sbiw	r24, 0x01	; 1
    2904:	9e af       	std	Y+62, r25	; 0x3e
    2906:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2908:	8d ad       	ldd	r24, Y+61	; 0x3d
    290a:	9e ad       	ldd	r25, Y+62	; 0x3e
    290c:	00 97       	sbiw	r24, 0x00	; 0
    290e:	69 f7       	brne	.-38     	; 0x28ea <main+0xf64>
    2910:	16 c0       	rjmp	.+44     	; 0x293e <main+0xfb8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2912:	fe 01       	movw	r30, r28
    2914:	ff 96       	adiw	r30, 0x3f	; 63
    2916:	60 81       	ld	r22, Z
    2918:	71 81       	ldd	r23, Z+1	; 0x01
    291a:	82 81       	ldd	r24, Z+2	; 0x02
    291c:	93 81       	ldd	r25, Z+3	; 0x03
    291e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2922:	dc 01       	movw	r26, r24
    2924:	cb 01       	movw	r24, r22
    2926:	9e af       	std	Y+62, r25	; 0x3e
    2928:	8d af       	std	Y+61, r24	; 0x3d
    292a:	8d ad       	ldd	r24, Y+61	; 0x3d
    292c:	9e ad       	ldd	r25, Y+62	; 0x3e
    292e:	9a af       	std	Y+58, r25	; 0x3a
    2930:	89 af       	std	Y+57, r24	; 0x39
    2932:	89 ad       	ldd	r24, Y+57	; 0x39
    2934:	9a ad       	ldd	r25, Y+58	; 0x3a
    2936:	01 97       	sbiw	r24, 0x01	; 1
    2938:	f1 f7       	brne	.-4      	; 0x2936 <main+0xfb0>
    293a:	9a af       	std	Y+58, r25	; 0x3a
    293c:	89 af       	std	Y+57, r24	; 0x39
		{
			_delay_ms(50);

			if(DIO_u8GetPinValue(PIN2,DIO_PORTD,&PinState2)==1 && (AnalogValue>=Temps_Readings[0]) && (AnalogValue>=35))
    293e:	9e 01       	movw	r18, r28
    2940:	25 53       	subi	r18, 0x35	; 53
    2942:	3f 4f       	sbci	r19, 0xFF	; 255
    2944:	82 e0       	ldi	r24, 0x02	; 2
    2946:	63 e0       	ldi	r22, 0x03	; 3
    2948:	a9 01       	movw	r20, r18
    294a:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8GetPinValue>
    294e:	81 30       	cpi	r24, 0x01	; 1
    2950:	09 f0       	breq	.+2      	; 0x2954 <main+0xfce>
    2952:	5d c1       	rjmp	.+698    	; 0x2c0e <main+0x1288>
    2954:	fe 01       	movw	r30, r28
    2956:	e0 54       	subi	r30, 0x40	; 64
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	90 81       	ld	r25, Z
    295c:	fe 01       	movw	r30, r28
    295e:	e8 54       	subi	r30, 0x48	; 72
    2960:	ff 4f       	sbci	r31, 0xFF	; 255
    2962:	80 81       	ld	r24, Z
    2964:	89 17       	cp	r24, r25
    2966:	08 f4       	brcc	.+2      	; 0x296a <main+0xfe4>
    2968:	52 c1       	rjmp	.+676    	; 0x2c0e <main+0x1288>
    296a:	fe 01       	movw	r30, r28
    296c:	e8 54       	subi	r30, 0x48	; 72
    296e:	ff 4f       	sbci	r31, 0xFF	; 255
    2970:	80 81       	ld	r24, Z
    2972:	83 32       	cpi	r24, 0x23	; 35
    2974:	08 f4       	brcc	.+2      	; 0x2978 <main+0xff2>
    2976:	4b c1       	rjmp	.+662    	; 0x2c0e <main+0x1288>
			{
				Flag_Heating_Mode = 1; // Cooling Mode ON
    2978:	fe 01       	movw	r30, r28
    297a:	e1 54       	subi	r30, 0x41	; 65
    297c:	ff 4f       	sbci	r31, 0xFF	; 255
    297e:	81 e0       	ldi	r24, 0x01	; 1
    2980:	80 83       	st	Z, r24
				if(j==0)
    2982:	fe 01       	movw	r30, r28
    2984:	e5 54       	subi	r30, 0x45	; 69
    2986:	ff 4f       	sbci	r31, 0xFF	; 255
    2988:	80 81       	ld	r24, Z
    298a:	88 23       	and	r24, r24
    298c:	09 f0       	breq	.+2      	; 0x2990 <main+0x100a>
    298e:	98 c0       	rjmp	.+304    	; 0x2ac0 <main+0x113a>
				{
					PORTA=(AnalogValue<<4);
    2990:	ab e3       	ldi	r26, 0x3B	; 59
    2992:	b0 e0       	ldi	r27, 0x00	; 0
    2994:	fe 01       	movw	r30, r28
    2996:	e8 54       	subi	r30, 0x48	; 72
    2998:	ff 4f       	sbci	r31, 0xFF	; 255
    299a:	80 81       	ld	r24, Z
    299c:	82 95       	swap	r24
    299e:	80 7f       	andi	r24, 0xF0	; 240
    29a0:	8c 93       	st	X, r24
					DIO_u8SetPinValue(PIN1,DIO_PORTB,LOW);
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	61 e0       	ldi	r22, 0x01	; 1
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
					DIO_u8SetPinValue(PIN2,DIO_PORTB,LOW);
    29ac:	82 e0       	ldi	r24, 0x02	; 2
    29ae:	61 e0       	ldi	r22, 0x01	; 1
    29b0:	40 e0       	ldi	r20, 0x00	; 0
    29b2:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	aa e7       	ldi	r26, 0x7A	; 122
    29bc:	b4 e4       	ldi	r27, 0x44	; 68
    29be:	8d ab       	std	Y+53, r24	; 0x35
    29c0:	9e ab       	std	Y+54, r25	; 0x36
    29c2:	af ab       	std	Y+55, r26	; 0x37
    29c4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c6:	6d a9       	ldd	r22, Y+53	; 0x35
    29c8:	7e a9       	ldd	r23, Y+54	; 0x36
    29ca:	8f a9       	ldd	r24, Y+55	; 0x37
    29cc:	98 ad       	ldd	r25, Y+56	; 0x38
    29ce:	20 e0       	ldi	r18, 0x00	; 0
    29d0:	30 e0       	ldi	r19, 0x00	; 0
    29d2:	4a e7       	ldi	r20, 0x7A	; 122
    29d4:	55 e4       	ldi	r21, 0x45	; 69
    29d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29da:	dc 01       	movw	r26, r24
    29dc:	cb 01       	movw	r24, r22
    29de:	89 ab       	std	Y+49, r24	; 0x31
    29e0:	9a ab       	std	Y+50, r25	; 0x32
    29e2:	ab ab       	std	Y+51, r26	; 0x33
    29e4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29e6:	69 a9       	ldd	r22, Y+49	; 0x31
    29e8:	7a a9       	ldd	r23, Y+50	; 0x32
    29ea:	8b a9       	ldd	r24, Y+51	; 0x33
    29ec:	9c a9       	ldd	r25, Y+52	; 0x34
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	40 e8       	ldi	r20, 0x80	; 128
    29f4:	5f e3       	ldi	r21, 0x3F	; 63
    29f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29fa:	88 23       	and	r24, r24
    29fc:	2c f4       	brge	.+10     	; 0x2a08 <main+0x1082>
		__ticks = 1;
    29fe:	81 e0       	ldi	r24, 0x01	; 1
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	98 ab       	std	Y+48, r25	; 0x30
    2a04:	8f a7       	std	Y+47, r24	; 0x2f
    2a06:	3f c0       	rjmp	.+126    	; 0x2a86 <main+0x1100>
	else if (__tmp > 65535)
    2a08:	69 a9       	ldd	r22, Y+49	; 0x31
    2a0a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a0c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a0e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a10:	20 e0       	ldi	r18, 0x00	; 0
    2a12:	3f ef       	ldi	r19, 0xFF	; 255
    2a14:	4f e7       	ldi	r20, 0x7F	; 127
    2a16:	57 e4       	ldi	r21, 0x47	; 71
    2a18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a1c:	18 16       	cp	r1, r24
    2a1e:	4c f5       	brge	.+82     	; 0x2a72 <main+0x10ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a20:	6d a9       	ldd	r22, Y+53	; 0x35
    2a22:	7e a9       	ldd	r23, Y+54	; 0x36
    2a24:	8f a9       	ldd	r24, Y+55	; 0x37
    2a26:	98 ad       	ldd	r25, Y+56	; 0x38
    2a28:	20 e0       	ldi	r18, 0x00	; 0
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	40 e2       	ldi	r20, 0x20	; 32
    2a2e:	51 e4       	ldi	r21, 0x41	; 65
    2a30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a34:	dc 01       	movw	r26, r24
    2a36:	cb 01       	movw	r24, r22
    2a38:	bc 01       	movw	r22, r24
    2a3a:	cd 01       	movw	r24, r26
    2a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a40:	dc 01       	movw	r26, r24
    2a42:	cb 01       	movw	r24, r22
    2a44:	98 ab       	std	Y+48, r25	; 0x30
    2a46:	8f a7       	std	Y+47, r24	; 0x2f
    2a48:	0f c0       	rjmp	.+30     	; 0x2a68 <main+0x10e2>
    2a4a:	80 e9       	ldi	r24, 0x90	; 144
    2a4c:	91 e0       	ldi	r25, 0x01	; 1
    2a4e:	9e a7       	std	Y+46, r25	; 0x2e
    2a50:	8d a7       	std	Y+45, r24	; 0x2d
    2a52:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a54:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a56:	01 97       	sbiw	r24, 0x01	; 1
    2a58:	f1 f7       	brne	.-4      	; 0x2a56 <main+0x10d0>
    2a5a:	9e a7       	std	Y+46, r25	; 0x2e
    2a5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a60:	98 a9       	ldd	r25, Y+48	; 0x30
    2a62:	01 97       	sbiw	r24, 0x01	; 1
    2a64:	98 ab       	std	Y+48, r25	; 0x30
    2a66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a68:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a6a:	98 a9       	ldd	r25, Y+48	; 0x30
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	69 f7       	brne	.-38     	; 0x2a4a <main+0x10c4>
    2a70:	14 c0       	rjmp	.+40     	; 0x2a9a <main+0x1114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a72:	69 a9       	ldd	r22, Y+49	; 0x31
    2a74:	7a a9       	ldd	r23, Y+50	; 0x32
    2a76:	8b a9       	ldd	r24, Y+51	; 0x33
    2a78:	9c a9       	ldd	r25, Y+52	; 0x34
    2a7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7e:	dc 01       	movw	r26, r24
    2a80:	cb 01       	movw	r24, r22
    2a82:	98 ab       	std	Y+48, r25	; 0x30
    2a84:	8f a7       	std	Y+47, r24	; 0x2f
    2a86:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a88:	98 a9       	ldd	r25, Y+48	; 0x30
    2a8a:	9c a7       	std	Y+44, r25	; 0x2c
    2a8c:	8b a7       	std	Y+43, r24	; 0x2b
    2a8e:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a90:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a92:	01 97       	sbiw	r24, 0x01	; 1
    2a94:	f1 f7       	brne	.-4      	; 0x2a92 <main+0x110c>
    2a96:	9c a7       	std	Y+44, r25	; 0x2c
    2a98:	8b a7       	std	Y+43, r24	; 0x2b
					_delay_ms(1000);
					DIO_u8SetPinValue(PIN1,DIO_PORTB,HIGH);
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	61 e0       	ldi	r22, 0x01	; 1
    2a9e:	41 e0       	ldi	r20, 0x01	; 1
    2aa0:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
					DIO_u8SetPinValue(PIN2,DIO_PORTB,HIGH);
    2aa4:	82 e0       	ldi	r24, 0x02	; 2
    2aa6:	61 e0       	ldi	r22, 0x01	; 1
    2aa8:	41 e0       	ldi	r20, 0x01	; 1
    2aaa:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
					j++;
    2aae:	de 01       	movw	r26, r28
    2ab0:	a5 54       	subi	r26, 0x45	; 69
    2ab2:	bf 4f       	sbci	r27, 0xFF	; 255
    2ab4:	fe 01       	movw	r30, r28
    2ab6:	e5 54       	subi	r30, 0x45	; 69
    2ab8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aba:	80 81       	ld	r24, Z
    2abc:	8f 5f       	subi	r24, 0xFF	; 255
    2abe:	8c 93       	st	X, r24
				}
				if(Flag_Heating_Mode==1 && j>=1)
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e1 54       	subi	r30, 0x41	; 65
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 81       	ld	r24, Z
    2ac8:	81 30       	cpi	r24, 0x01	; 1
    2aca:	09 f0       	breq	.+2      	; 0x2ace <main+0x1148>
    2acc:	a0 c0       	rjmp	.+320    	; 0x2c0e <main+0x1288>
    2ace:	fe 01       	movw	r30, r28
    2ad0:	e5 54       	subi	r30, 0x45	; 69
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	80 81       	ld	r24, Z
    2ad6:	88 23       	and	r24, r24
    2ad8:	09 f4       	brne	.+2      	; 0x2adc <main+0x1156>
    2ada:	99 c0       	rjmp	.+306    	; 0x2c0e <main+0x1288>
				{
					DIO_u8SetPinValue(PIN7,DIO_PORTC,HIGH);
    2adc:	87 e0       	ldi	r24, 0x07	; 7
    2ade:	62 e0       	ldi	r22, 0x02	; 2
    2ae0:	41 e0       	ldi	r20, 0x01	; 1
    2ae2:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
    2ae6:	80 e0       	ldi	r24, 0x00	; 0
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	aa e7       	ldi	r26, 0x7A	; 122
    2aec:	b4 e4       	ldi	r27, 0x44	; 68
    2aee:	8f a3       	std	Y+39, r24	; 0x27
    2af0:	98 a7       	std	Y+40, r25	; 0x28
    2af2:	a9 a7       	std	Y+41, r26	; 0x29
    2af4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2af6:	6f a1       	ldd	r22, Y+39	; 0x27
    2af8:	78 a5       	ldd	r23, Y+40	; 0x28
    2afa:	89 a5       	ldd	r24, Y+41	; 0x29
    2afc:	9a a5       	ldd	r25, Y+42	; 0x2a
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	4a e7       	ldi	r20, 0x7A	; 122
    2b04:	55 e4       	ldi	r21, 0x45	; 69
    2b06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b0a:	dc 01       	movw	r26, r24
    2b0c:	cb 01       	movw	r24, r22
    2b0e:	8b a3       	std	Y+35, r24	; 0x23
    2b10:	9c a3       	std	Y+36, r25	; 0x24
    2b12:	ad a3       	std	Y+37, r26	; 0x25
    2b14:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b16:	6b a1       	ldd	r22, Y+35	; 0x23
    2b18:	7c a1       	ldd	r23, Y+36	; 0x24
    2b1a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b1c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	40 e8       	ldi	r20, 0x80	; 128
    2b24:	5f e3       	ldi	r21, 0x3F	; 63
    2b26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b2a:	88 23       	and	r24, r24
    2b2c:	2c f4       	brge	.+10     	; 0x2b38 <main+0x11b2>
		__ticks = 1;
    2b2e:	81 e0       	ldi	r24, 0x01	; 1
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	9a a3       	std	Y+34, r25	; 0x22
    2b34:	89 a3       	std	Y+33, r24	; 0x21
    2b36:	3f c0       	rjmp	.+126    	; 0x2bb6 <main+0x1230>
	else if (__tmp > 65535)
    2b38:	6b a1       	ldd	r22, Y+35	; 0x23
    2b3a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b3c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b3e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	3f ef       	ldi	r19, 0xFF	; 255
    2b44:	4f e7       	ldi	r20, 0x7F	; 127
    2b46:	57 e4       	ldi	r21, 0x47	; 71
    2b48:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b4c:	18 16       	cp	r1, r24
    2b4e:	4c f5       	brge	.+82     	; 0x2ba2 <main+0x121c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b50:	6f a1       	ldd	r22, Y+39	; 0x27
    2b52:	78 a5       	ldd	r23, Y+40	; 0x28
    2b54:	89 a5       	ldd	r24, Y+41	; 0x29
    2b56:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b58:	20 e0       	ldi	r18, 0x00	; 0
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	40 e2       	ldi	r20, 0x20	; 32
    2b5e:	51 e4       	ldi	r21, 0x41	; 65
    2b60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b64:	dc 01       	movw	r26, r24
    2b66:	cb 01       	movw	r24, r22
    2b68:	bc 01       	movw	r22, r24
    2b6a:	cd 01       	movw	r24, r26
    2b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	9a a3       	std	Y+34, r25	; 0x22
    2b76:	89 a3       	std	Y+33, r24	; 0x21
    2b78:	0f c0       	rjmp	.+30     	; 0x2b98 <main+0x1212>
    2b7a:	80 e9       	ldi	r24, 0x90	; 144
    2b7c:	91 e0       	ldi	r25, 0x01	; 1
    2b7e:	98 a3       	std	Y+32, r25	; 0x20
    2b80:	8f 8f       	std	Y+31, r24	; 0x1f
    2b82:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b84:	98 a1       	ldd	r25, Y+32	; 0x20
    2b86:	01 97       	sbiw	r24, 0x01	; 1
    2b88:	f1 f7       	brne	.-4      	; 0x2b86 <main+0x1200>
    2b8a:	98 a3       	std	Y+32, r25	; 0x20
    2b8c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2b90:	9a a1       	ldd	r25, Y+34	; 0x22
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	9a a3       	std	Y+34, r25	; 0x22
    2b96:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b98:	89 a1       	ldd	r24, Y+33	; 0x21
    2b9a:	9a a1       	ldd	r25, Y+34	; 0x22
    2b9c:	00 97       	sbiw	r24, 0x00	; 0
    2b9e:	69 f7       	brne	.-38     	; 0x2b7a <main+0x11f4>
    2ba0:	14 c0       	rjmp	.+40     	; 0x2bca <main+0x1244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba2:	6b a1       	ldd	r22, Y+35	; 0x23
    2ba4:	7c a1       	ldd	r23, Y+36	; 0x24
    2ba6:	8d a1       	ldd	r24, Y+37	; 0x25
    2ba8:	9e a1       	ldd	r25, Y+38	; 0x26
    2baa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22
    2bb2:	9a a3       	std	Y+34, r25	; 0x22
    2bb4:	89 a3       	std	Y+33, r24	; 0x21
    2bb6:	89 a1       	ldd	r24, Y+33	; 0x21
    2bb8:	9a a1       	ldd	r25, Y+34	; 0x22
    2bba:	9e 8f       	std	Y+30, r25	; 0x1e
    2bbc:	8d 8f       	std	Y+29, r24	; 0x1d
    2bbe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2bc0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2bc2:	01 97       	sbiw	r24, 0x01	; 1
    2bc4:	f1 f7       	brne	.-4      	; 0x2bc2 <main+0x123c>
    2bc6:	9e 8f       	std	Y+30, r25	; 0x1e
    2bc8:	8d 8f       	std	Y+29, r24	; 0x1d
					_delay_ms(1000);
					AnalogValue-=5;
    2bca:	de 01       	movw	r26, r28
    2bcc:	a8 54       	subi	r26, 0x48	; 72
    2bce:	bf 4f       	sbci	r27, 0xFF	; 255
    2bd0:	fe 01       	movw	r30, r28
    2bd2:	e8 54       	subi	r30, 0x48	; 72
    2bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd6:	80 81       	ld	r24, Z
    2bd8:	85 50       	subi	r24, 0x05	; 5
    2bda:	8c 93       	st	X, r24

					eeprom_write_word((unsigned int*)&Temps_Readings[*i], AnalogValue);
    2bdc:	9e 01       	movw	r18, r28
    2bde:	20 54       	subi	r18, 0x40	; 64
    2be0:	3f 4f       	sbci	r19, 0xFF	; 255
    2be2:	fe 01       	movw	r30, r28
    2be4:	e4 54       	subi	r30, 0x44	; 68
    2be6:	ff 4f       	sbci	r31, 0xFF	; 255
    2be8:	01 90       	ld	r0, Z+
    2bea:	f0 81       	ld	r31, Z
    2bec:	e0 2d       	mov	r30, r0
    2bee:	80 81       	ld	r24, Z
    2bf0:	88 2f       	mov	r24, r24
    2bf2:	90 e0       	ldi	r25, 0x00	; 0
    2bf4:	a9 01       	movw	r20, r18
    2bf6:	48 0f       	add	r20, r24
    2bf8:	59 1f       	adc	r21, r25
    2bfa:	fe 01       	movw	r30, r28
    2bfc:	e8 54       	subi	r30, 0x48	; 72
    2bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2c00:	80 81       	ld	r24, Z
    2c02:	28 2f       	mov	r18, r24
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	ca 01       	movw	r24, r20
    2c08:	b9 01       	movw	r22, r18
    2c0a:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <__eewr_word_m32>
					//	EEPROM_voidSendDataByte(Local_ReceiveDataByte,0,i+1);
				}
			}
		}
// -----------------------------------------------------------------------------------------------
		if(DIO_u8GetPinValue(PIN0,DIO_PORTB,&PinState3)==1) // ON/OFF B0
    2c0e:	9e 01       	movw	r18, r28
    2c10:	24 53       	subi	r18, 0x34	; 52
    2c12:	3f 4f       	sbci	r19, 0xFF	; 255
    2c14:	80 e0       	ldi	r24, 0x00	; 0
    2c16:	61 e0       	ldi	r22, 0x01	; 1
    2c18:	a9 01       	movw	r20, r18
    2c1a:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8GetPinValue>
    2c1e:	81 30       	cpi	r24, 0x01	; 1
    2c20:	11 f0       	breq	.+4      	; 0x2c26 <main+0x12a0>
    2c22:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <main+0x26a>
    2c26:	80 e0       	ldi	r24, 0x00	; 0
    2c28:	90 e0       	ldi	r25, 0x00	; 0
    2c2a:	a8 e4       	ldi	r26, 0x48	; 72
    2c2c:	b2 e4       	ldi	r27, 0x42	; 66
    2c2e:	89 8f       	std	Y+25, r24	; 0x19
    2c30:	9a 8f       	std	Y+26, r25	; 0x1a
    2c32:	ab 8f       	std	Y+27, r26	; 0x1b
    2c34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c36:	69 8d       	ldd	r22, Y+25	; 0x19
    2c38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c3e:	20 e0       	ldi	r18, 0x00	; 0
    2c40:	30 e0       	ldi	r19, 0x00	; 0
    2c42:	4a e7       	ldi	r20, 0x7A	; 122
    2c44:	55 e4       	ldi	r21, 0x45	; 69
    2c46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c4a:	dc 01       	movw	r26, r24
    2c4c:	cb 01       	movw	r24, r22
    2c4e:	8d 8b       	std	Y+21, r24	; 0x15
    2c50:	9e 8b       	std	Y+22, r25	; 0x16
    2c52:	af 8b       	std	Y+23, r26	; 0x17
    2c54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c56:	6d 89       	ldd	r22, Y+21	; 0x15
    2c58:	7e 89       	ldd	r23, Y+22	; 0x16
    2c5a:	8f 89       	ldd	r24, Y+23	; 0x17
    2c5c:	98 8d       	ldd	r25, Y+24	; 0x18
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e8       	ldi	r20, 0x80	; 128
    2c64:	5f e3       	ldi	r21, 0x3F	; 63
    2c66:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c6a:	88 23       	and	r24, r24
    2c6c:	2c f4       	brge	.+10     	; 0x2c78 <main+0x12f2>
		__ticks = 1;
    2c6e:	81 e0       	ldi	r24, 0x01	; 1
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	9c 8b       	std	Y+20, r25	; 0x14
    2c74:	8b 8b       	std	Y+19, r24	; 0x13
    2c76:	3f c0       	rjmp	.+126    	; 0x2cf6 <main+0x1370>
	else if (__tmp > 65535)
    2c78:	6d 89       	ldd	r22, Y+21	; 0x15
    2c7a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c7c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c7e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c80:	20 e0       	ldi	r18, 0x00	; 0
    2c82:	3f ef       	ldi	r19, 0xFF	; 255
    2c84:	4f e7       	ldi	r20, 0x7F	; 127
    2c86:	57 e4       	ldi	r21, 0x47	; 71
    2c88:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c8c:	18 16       	cp	r1, r24
    2c8e:	4c f5       	brge	.+82     	; 0x2ce2 <main+0x135c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c90:	69 8d       	ldd	r22, Y+25	; 0x19
    2c92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c98:	20 e0       	ldi	r18, 0x00	; 0
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	40 e2       	ldi	r20, 0x20	; 32
    2c9e:	51 e4       	ldi	r21, 0x41	; 65
    2ca0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ca4:	dc 01       	movw	r26, r24
    2ca6:	cb 01       	movw	r24, r22
    2ca8:	bc 01       	movw	r22, r24
    2caa:	cd 01       	movw	r24, r26
    2cac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb0:	dc 01       	movw	r26, r24
    2cb2:	cb 01       	movw	r24, r22
    2cb4:	9c 8b       	std	Y+20, r25	; 0x14
    2cb6:	8b 8b       	std	Y+19, r24	; 0x13
    2cb8:	0f c0       	rjmp	.+30     	; 0x2cd8 <main+0x1352>
    2cba:	80 e9       	ldi	r24, 0x90	; 144
    2cbc:	91 e0       	ldi	r25, 0x01	; 1
    2cbe:	9a 8b       	std	Y+18, r25	; 0x12
    2cc0:	89 8b       	std	Y+17, r24	; 0x11
    2cc2:	89 89       	ldd	r24, Y+17	; 0x11
    2cc4:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc6:	01 97       	sbiw	r24, 0x01	; 1
    2cc8:	f1 f7       	brne	.-4      	; 0x2cc6 <main+0x1340>
    2cca:	9a 8b       	std	Y+18, r25	; 0x12
    2ccc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cce:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd0:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd2:	01 97       	sbiw	r24, 0x01	; 1
    2cd4:	9c 8b       	std	Y+20, r25	; 0x14
    2cd6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cda:	9c 89       	ldd	r25, Y+20	; 0x14
    2cdc:	00 97       	sbiw	r24, 0x00	; 0
    2cde:	69 f7       	brne	.-38     	; 0x2cba <main+0x1334>
    2ce0:	14 c0       	rjmp	.+40     	; 0x2d0a <main+0x1384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce2:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce4:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce6:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce8:	98 8d       	ldd	r25, Y+24	; 0x18
    2cea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	9c 8b       	std	Y+20, r25	; 0x14
    2cf4:	8b 8b       	std	Y+19, r24	; 0x13
    2cf6:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf8:	9c 89       	ldd	r25, Y+20	; 0x14
    2cfa:	98 8b       	std	Y+16, r25	; 0x10
    2cfc:	8f 87       	std	Y+15, r24	; 0x0f
    2cfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d00:	98 89       	ldd	r25, Y+16	; 0x10
    2d02:	01 97       	sbiw	r24, 0x01	; 1
    2d04:	f1 f7       	brne	.-4      	; 0x2d02 <main+0x137c>
    2d06:	98 8b       	std	Y+16, r25	; 0x10
    2d08:	8f 87       	std	Y+15, r24	; 0x0f
		{
			_delay_ms(50);

			if(DIO_u8GetPinValue(PIN0,DIO_PORTB,&PinState3)==1)
    2d0a:	9e 01       	movw	r18, r28
    2d0c:	24 53       	subi	r18, 0x34	; 52
    2d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    2d10:	80 e0       	ldi	r24, 0x00	; 0
    2d12:	61 e0       	ldi	r22, 0x01	; 1
    2d14:	a9 01       	movw	r20, r18
    2d16:	0e 94 28 09 	call	0x1250	; 0x1250 <DIO_u8GetPinValue>
    2d1a:	81 30       	cpi	r24, 0x01	; 1
    2d1c:	09 f0       	breq	.+2      	; 0x2d20 <main+0x139a>
    2d1e:	97 c0       	rjmp	.+302    	; 0x2e4e <main+0x14c8>
			{
				Flag_Heater_ON = 1;
    2d20:	fe 01       	movw	r30, r28
    2d22:	e2 54       	subi	r30, 0x42	; 66
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	80 83       	st	Z, r24
    2d2a:	09 c0       	rjmp	.+18     	; 0x2d3e <main+0x13b8>
				while(k<Temps_Readings[0])
				{
					k++;
    2d2c:	de 01       	movw	r26, r28
    2d2e:	a6 54       	subi	r26, 0x46	; 70
    2d30:	bf 4f       	sbci	r27, 0xFF	; 255
    2d32:	fe 01       	movw	r30, r28
    2d34:	e6 54       	subi	r30, 0x46	; 70
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	8f 5f       	subi	r24, 0xFF	; 255
    2d3c:	8c 93       	st	X, r24
			_delay_ms(50);

			if(DIO_u8GetPinValue(PIN0,DIO_PORTB,&PinState3)==1)
			{
				Flag_Heater_ON = 1;
				while(k<Temps_Readings[0])
    2d3e:	fe 01       	movw	r30, r28
    2d40:	e0 54       	subi	r30, 0x40	; 64
    2d42:	ff 4f       	sbci	r31, 0xFF	; 255
    2d44:	90 81       	ld	r25, Z
    2d46:	fe 01       	movw	r30, r28
    2d48:	e6 54       	subi	r30, 0x46	; 70
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	80 81       	ld	r24, Z
    2d4e:	89 17       	cp	r24, r25
    2d50:	68 f3       	brcs	.-38     	; 0x2d2c <main+0x13a6>
				{
					k++;
				}
				PORTA=(k<<4);
    2d52:	ab e3       	ldi	r26, 0x3B	; 59
    2d54:	b0 e0       	ldi	r27, 0x00	; 0
    2d56:	fe 01       	movw	r30, r28
    2d58:	e6 54       	subi	r30, 0x46	; 70
    2d5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5c:	80 81       	ld	r24, Z
    2d5e:	82 95       	swap	r24
    2d60:	80 7f       	andi	r24, 0xF0	; 240
    2d62:	8c 93       	st	X, r24
    2d64:	80 e0       	ldi	r24, 0x00	; 0
    2d66:	90 e0       	ldi	r25, 0x00	; 0
    2d68:	aa e7       	ldi	r26, 0x7A	; 122
    2d6a:	b4 e4       	ldi	r27, 0x44	; 68
    2d6c:	8b 87       	std	Y+11, r24	; 0x0b
    2d6e:	9c 87       	std	Y+12, r25	; 0x0c
    2d70:	ad 87       	std	Y+13, r26	; 0x0d
    2d72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	4a e7       	ldi	r20, 0x7A	; 122
    2d82:	55 e4       	ldi	r21, 0x45	; 69
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	8f 83       	std	Y+7, r24	; 0x07
    2d8e:	98 87       	std	Y+8, r25	; 0x08
    2d90:	a9 87       	std	Y+9, r26	; 0x09
    2d92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d94:	6f 81       	ldd	r22, Y+7	; 0x07
    2d96:	78 85       	ldd	r23, Y+8	; 0x08
    2d98:	89 85       	ldd	r24, Y+9	; 0x09
    2d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	40 e8       	ldi	r20, 0x80	; 128
    2da2:	5f e3       	ldi	r21, 0x3F	; 63
    2da4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2da8:	88 23       	and	r24, r24
    2daa:	2c f4       	brge	.+10     	; 0x2db6 <main+0x1430>
		__ticks = 1;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	9e 83       	std	Y+6, r25	; 0x06
    2db2:	8d 83       	std	Y+5, r24	; 0x05
    2db4:	40 c0       	rjmp	.+128    	; 0x2e36 <main+0x14b0>
	else if (__tmp > 65535)
    2db6:	6f 81       	ldd	r22, Y+7	; 0x07
    2db8:	78 85       	ldd	r23, Y+8	; 0x08
    2dba:	89 85       	ldd	r24, Y+9	; 0x09
    2dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	3f ef       	ldi	r19, 0xFF	; 255
    2dc2:	4f e7       	ldi	r20, 0x7F	; 127
    2dc4:	57 e4       	ldi	r21, 0x47	; 71
    2dc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dca:	18 16       	cp	r1, r24
    2dcc:	54 f5       	brge	.+84     	; 0x2e22 <main+0x149c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	30 e0       	ldi	r19, 0x00	; 0
    2dda:	40 e2       	ldi	r20, 0x20	; 32
    2ddc:	51 e4       	ldi	r21, 0x41	; 65
    2dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	bc 01       	movw	r22, r24
    2de8:	cd 01       	movw	r24, r26
    2dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	9e 83       	std	Y+6, r25	; 0x06
    2df4:	8d 83       	std	Y+5, r24	; 0x05
    2df6:	0f c0       	rjmp	.+30     	; 0x2e16 <main+0x1490>
    2df8:	80 e9       	ldi	r24, 0x90	; 144
    2dfa:	91 e0       	ldi	r25, 0x01	; 1
    2dfc:	9c 83       	std	Y+4, r25	; 0x04
    2dfe:	8b 83       	std	Y+3, r24	; 0x03
    2e00:	8b 81       	ldd	r24, Y+3	; 0x03
    2e02:	9c 81       	ldd	r25, Y+4	; 0x04
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	f1 f7       	brne	.-4      	; 0x2e04 <main+0x147e>
    2e08:	9c 83       	std	Y+4, r25	; 0x04
    2e0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e10:	01 97       	sbiw	r24, 0x01	; 1
    2e12:	9e 83       	std	Y+6, r25	; 0x06
    2e14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e16:	8d 81       	ldd	r24, Y+5	; 0x05
    2e18:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1a:	00 97       	sbiw	r24, 0x00	; 0
    2e1c:	69 f7       	brne	.-38     	; 0x2df8 <main+0x1472>
    2e1e:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <main+0x26a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e22:	6f 81       	ldd	r22, Y+7	; 0x07
    2e24:	78 85       	ldd	r23, Y+8	; 0x08
    2e26:	89 85       	ldd	r24, Y+9	; 0x09
    2e28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2e:	dc 01       	movw	r26, r24
    2e30:	cb 01       	movw	r24, r22
    2e32:	9e 83       	std	Y+6, r25	; 0x06
    2e34:	8d 83       	std	Y+5, r24	; 0x05
    2e36:	8d 81       	ldd	r24, Y+5	; 0x05
    2e38:	9e 81       	ldd	r25, Y+6	; 0x06
    2e3a:	9a 83       	std	Y+2, r25	; 0x02
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	89 81       	ldd	r24, Y+1	; 0x01
    2e40:	9a 81       	ldd	r25, Y+2	; 0x02
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <main+0x14bc>
    2e46:	9a 83       	std	Y+2, r25	; 0x02
    2e48:	89 83       	std	Y+1, r24	; 0x01
    2e4a:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <main+0x26a>
				_delay_ms(1000);
			}
			else
			{
				Flag_Heater_ON = 0;
    2e4e:	fe 01       	movw	r30, r28
    2e50:	e2 54       	subi	r30, 0x42	; 66
    2e52:	ff 4f       	sbci	r31, 0xFF	; 255
    2e54:	10 82       	st	Z, r1
				DIO_u8SetPinValue(PIN1,DIO_PORTB,LOW);
    2e56:	81 e0       	ldi	r24, 0x01	; 1
    2e58:	61 e0       	ldi	r22, 0x01	; 1
    2e5a:	40 e0       	ldi	r20, 0x00	; 0
    2e5c:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
				DIO_u8SetPinValue(PIN2,DIO_PORTB,LOW);
    2e60:	82 e0       	ldi	r24, 0x02	; 2
    2e62:	61 e0       	ldi	r22, 0x01	; 1
    2e64:	40 e0       	ldi	r20, 0x00	; 0
    2e66:	0e 94 65 07 	call	0xeca	; 0xeca <DIO_u8SetPinValue>
    2e6a:	0c 94 f8 0d 	jmp	0x1bf0	; 0x1bf0 <main+0x26a>

00002e6e <__udivmodqi4>:
    2e6e:	99 1b       	sub	r25, r25
    2e70:	79 e0       	ldi	r23, 0x09	; 9
    2e72:	04 c0       	rjmp	.+8      	; 0x2e7c <__udivmodqi4_ep>

00002e74 <__udivmodqi4_loop>:
    2e74:	99 1f       	adc	r25, r25
    2e76:	96 17       	cp	r25, r22
    2e78:	08 f0       	brcs	.+2      	; 0x2e7c <__udivmodqi4_ep>
    2e7a:	96 1b       	sub	r25, r22

00002e7c <__udivmodqi4_ep>:
    2e7c:	88 1f       	adc	r24, r24
    2e7e:	7a 95       	dec	r23
    2e80:	c9 f7       	brne	.-14     	; 0x2e74 <__udivmodqi4_loop>
    2e82:	80 95       	com	r24
    2e84:	08 95       	ret

00002e86 <__prologue_saves__>:
    2e86:	2f 92       	push	r2
    2e88:	3f 92       	push	r3
    2e8a:	4f 92       	push	r4
    2e8c:	5f 92       	push	r5
    2e8e:	6f 92       	push	r6
    2e90:	7f 92       	push	r7
    2e92:	8f 92       	push	r8
    2e94:	9f 92       	push	r9
    2e96:	af 92       	push	r10
    2e98:	bf 92       	push	r11
    2e9a:	cf 92       	push	r12
    2e9c:	df 92       	push	r13
    2e9e:	ef 92       	push	r14
    2ea0:	ff 92       	push	r15
    2ea2:	0f 93       	push	r16
    2ea4:	1f 93       	push	r17
    2ea6:	cf 93       	push	r28
    2ea8:	df 93       	push	r29
    2eaa:	cd b7       	in	r28, 0x3d	; 61
    2eac:	de b7       	in	r29, 0x3e	; 62
    2eae:	ca 1b       	sub	r28, r26
    2eb0:	db 0b       	sbc	r29, r27
    2eb2:	0f b6       	in	r0, 0x3f	; 63
    2eb4:	f8 94       	cli
    2eb6:	de bf       	out	0x3e, r29	; 62
    2eb8:	0f be       	out	0x3f, r0	; 63
    2eba:	cd bf       	out	0x3d, r28	; 61
    2ebc:	09 94       	ijmp

00002ebe <__epilogue_restores__>:
    2ebe:	2a 88       	ldd	r2, Y+18	; 0x12
    2ec0:	39 88       	ldd	r3, Y+17	; 0x11
    2ec2:	48 88       	ldd	r4, Y+16	; 0x10
    2ec4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ec6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ec8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2eca:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ecc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ece:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ed0:	b9 84       	ldd	r11, Y+9	; 0x09
    2ed2:	c8 84       	ldd	r12, Y+8	; 0x08
    2ed4:	df 80       	ldd	r13, Y+7	; 0x07
    2ed6:	ee 80       	ldd	r14, Y+6	; 0x06
    2ed8:	fd 80       	ldd	r15, Y+5	; 0x05
    2eda:	0c 81       	ldd	r16, Y+4	; 0x04
    2edc:	1b 81       	ldd	r17, Y+3	; 0x03
    2ede:	aa 81       	ldd	r26, Y+2	; 0x02
    2ee0:	b9 81       	ldd	r27, Y+1	; 0x01
    2ee2:	ce 0f       	add	r28, r30
    2ee4:	d1 1d       	adc	r29, r1
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	de bf       	out	0x3e, r29	; 62
    2eec:	0f be       	out	0x3f, r0	; 63
    2eee:	cd bf       	out	0x3d, r28	; 61
    2ef0:	ed 01       	movw	r28, r26
    2ef2:	08 95       	ret

00002ef4 <__eewr_word_m32>:
    2ef4:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__eewr_byte_m32>
    2ef8:	27 2f       	mov	r18, r23
    2efa:	0c 94 80 17 	jmp	0x2f00	; 0x2f00 <__eewr_r18_m32>

00002efe <__eewr_byte_m32>:
    2efe:	26 2f       	mov	r18, r22

00002f00 <__eewr_r18_m32>:
    2f00:	e1 99       	sbic	0x1c, 1	; 28
    2f02:	fe cf       	rjmp	.-4      	; 0x2f00 <__eewr_r18_m32>
    2f04:	9f bb       	out	0x1f, r25	; 31
    2f06:	8e bb       	out	0x1e, r24	; 30
    2f08:	2d bb       	out	0x1d, r18	; 29
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	e2 9a       	sbi	0x1c, 2	; 28
    2f10:	e1 9a       	sbi	0x1c, 1	; 28
    2f12:	0f be       	out	0x3f, r0	; 63
    2f14:	01 96       	adiw	r24, 0x01	; 1
    2f16:	08 95       	ret

00002f18 <_exit>:
    2f18:	f8 94       	cli

00002f1a <__stop_program>:
    2f1a:	ff cf       	rjmp	.-2      	; 0x2f1a <__stop_program>
